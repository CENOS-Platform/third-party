# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
HLRBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_hlrbrep.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _HLRBRep
else:
    import _HLRBRep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _HLRBRep.delete_SwigPyIterator

    def value(self):
        return _HLRBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _HLRBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _HLRBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _HLRBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _HLRBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _HLRBRep.SwigPyIterator_copy(self)

    def next(self):
        return _HLRBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _HLRBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _HLRBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _HLRBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _HLRBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _HLRBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _HLRBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _HLRBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _HLRBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _HLRBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _HLRBRep:
_HLRBRep.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _HLRBRep.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.TCollection
import OCC.Core.OSD
import OCC.Core.TColStd
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.HLRAlgo
import OCC.Core.TColgp
import OCC.Core.BRepAdaptor
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.IntRes2d
import OCC.Core.TopTools
import OCC.Core.BRepTopAdaptor
import OCC.Core.IntCurveSurface
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntSurf
import OCC.Core.HLRTopoBRep
import OCC.Core.Contap
import OCC.Core.IntCurve
import OCC.Core.Extrema

from enum import IntEnum
from OCC.Core.Exception import *

HLRBRep_Undefined = _HLRBRep.HLRBRep_Undefined
HLRBRep_IsoLine = _HLRBRep.HLRBRep_IsoLine
HLRBRep_OutLine = _HLRBRep.HLRBRep_OutLine
HLRBRep_Rg1Line = _HLRBRep.HLRBRep_Rg1Line
HLRBRep_RgNLine = _HLRBRep.HLRBRep_RgNLine
HLRBRep_Sharp = _HLRBRep.HLRBRep_Sharp


class HLRBRep_TypeOfResultingEdge(IntEnum):
	HLRBRep_Undefined = 0
	HLRBRep_IsoLine = 1
	HLRBRep_OutLine = 2
	HLRBRep_Rg1Line = 3
	HLRBRep_RgNLine = 4
	HLRBRep_Sharp = 5
HLRBRep_Undefined = HLRBRep_TypeOfResultingEdge.HLRBRep_Undefined
HLRBRep_IsoLine = HLRBRep_TypeOfResultingEdge.HLRBRep_IsoLine
HLRBRep_OutLine = HLRBRep_TypeOfResultingEdge.HLRBRep_OutLine
HLRBRep_Rg1Line = HLRBRep_TypeOfResultingEdge.HLRBRep_Rg1Line
HLRBRep_RgNLine = HLRBRep_TypeOfResultingEdge.HLRBRep_RgNLine
HLRBRep_Sharp = HLRBRep_TypeOfResultingEdge.HLRBRep_Sharp


def Handle_HLRBRep_AreaLimit_Create():
    return _HLRBRep.Handle_HLRBRep_AreaLimit_Create()

def Handle_HLRBRep_AreaLimit_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_AreaLimit_DownCast(t)

def Handle_HLRBRep_AreaLimit_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_AreaLimit_IsNull(t)

def Handle_HLRBRep_Data_Create():
    return _HLRBRep.Handle_HLRBRep_Data_Create()

def Handle_HLRBRep_Data_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_Data_DownCast(t)

def Handle_HLRBRep_Data_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_Data_IsNull(t)

def Handle_HLRBRep_InternalAlgo_Create():
    return _HLRBRep.Handle_HLRBRep_InternalAlgo_Create()

def Handle_HLRBRep_InternalAlgo_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_InternalAlgo_DownCast(t)

def Handle_HLRBRep_InternalAlgo_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_InternalAlgo_IsNull(t)

def Handle_HLRBRep_PolyAlgo_Create():
    return _HLRBRep.Handle_HLRBRep_PolyAlgo_Create()

def Handle_HLRBRep_PolyAlgo_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_PolyAlgo_DownCast(t)

def Handle_HLRBRep_PolyAlgo_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_PolyAlgo_IsNull(t)

def Handle_HLRBRep_Algo_Create():
    return _HLRBRep.Handle_HLRBRep_Algo_Create()

def Handle_HLRBRep_Algo_DownCast(t):
    return _HLRBRep.Handle_HLRBRep_Algo_DownCast(t)

def Handle_HLRBRep_Algo_IsNull(t):
    return _HLRBRep.Handle_HLRBRep_Algo_IsNull(t)
class HLRBRep_Array1OfEData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_Array1OfEData_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_Array1OfEData_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_Array1OfEData_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_Array1OfEData_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_Array1OfEData_swiginit(self, _HLRBRep.new_HLRBRep_Array1OfEData(*args))

    def Init(self, theValue):
        return _HLRBRep.HLRBRep_Array1OfEData_Init(self, theValue)

    def Size(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Size(self)

    def Length(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Length(self)

    def IsEmpty(self):
        return _HLRBRep.HLRBRep_Array1OfEData_IsEmpty(self)

    def Lower(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Lower(self)

    def Upper(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Upper(self)

    def IsDeletable(self):
        return _HLRBRep.HLRBRep_Array1OfEData_IsDeletable(self)

    def IsAllocated(self):
        return _HLRBRep.HLRBRep_Array1OfEData_IsAllocated(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfEData_Assign(self, theOther)

    def Move(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfEData_Move(self, theOther)

    def Set(self, *args):
        return _HLRBRep.HLRBRep_Array1OfEData_Set(self, *args)

    def First(self):
        return _HLRBRep.HLRBRep_Array1OfEData_First(self)

    def ChangeFirst(self):
        return _HLRBRep.HLRBRep_Array1OfEData_ChangeFirst(self)

    def Last(self):
        return _HLRBRep.HLRBRep_Array1OfEData_Last(self)

    def ChangeLast(self):
        return _HLRBRep.HLRBRep_Array1OfEData_ChangeLast(self)

    def Value(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfEData_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfEData_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _HLRBRep.HLRBRep_Array1OfEData___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _HLRBRep.HLRBRep_Array1OfEData_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _HLRBRep.HLRBRep_Array1OfEData_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Array1OfEData

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register HLRBRep_Array1OfEData in _HLRBRep:
_HLRBRep.HLRBRep_Array1OfEData_swigregister(HLRBRep_Array1OfEData)

class HLRBRep_Array1OfFData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_Array1OfFData_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_Array1OfFData_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_Array1OfFData_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_Array1OfFData_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_Array1OfFData_swiginit(self, _HLRBRep.new_HLRBRep_Array1OfFData(*args))

    def Init(self, theValue):
        return _HLRBRep.HLRBRep_Array1OfFData_Init(self, theValue)

    def Size(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Size(self)

    def Length(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Length(self)

    def IsEmpty(self):
        return _HLRBRep.HLRBRep_Array1OfFData_IsEmpty(self)

    def Lower(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Lower(self)

    def Upper(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Upper(self)

    def IsDeletable(self):
        return _HLRBRep.HLRBRep_Array1OfFData_IsDeletable(self)

    def IsAllocated(self):
        return _HLRBRep.HLRBRep_Array1OfFData_IsAllocated(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfFData_Assign(self, theOther)

    def Move(self, theOther):
        return _HLRBRep.HLRBRep_Array1OfFData_Move(self, theOther)

    def Set(self, *args):
        return _HLRBRep.HLRBRep_Array1OfFData_Set(self, *args)

    def First(self):
        return _HLRBRep.HLRBRep_Array1OfFData_First(self)

    def ChangeFirst(self):
        return _HLRBRep.HLRBRep_Array1OfFData_ChangeFirst(self)

    def Last(self):
        return _HLRBRep.HLRBRep_Array1OfFData_Last(self)

    def ChangeLast(self):
        return _HLRBRep.HLRBRep_Array1OfFData_ChangeLast(self)

    def Value(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfFData_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _HLRBRep.HLRBRep_Array1OfFData_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _HLRBRep.HLRBRep_Array1OfFData___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _HLRBRep.HLRBRep_Array1OfFData_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _HLRBRep.HLRBRep_Array1OfFData_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Array1OfFData

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register HLRBRep_Array1OfFData in _HLRBRep:
_HLRBRep.HLRBRep_Array1OfFData_swigregister(HLRBRep_Array1OfFData)

class HLRBRep_ListIteratorOfListOfBPnt2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_swiginit(self, _HLRBRep.new_HLRBRep_ListIteratorOfListOfBPnt2D(*args))

    def More(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_More(self)

    def Next(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_Next(self)

    def Value(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_Value(self)

    def ChangeValue(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_ChangeValue(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListIteratorOfListOfBPnt2D

# Register HLRBRep_ListIteratorOfListOfBPnt2D in _HLRBRep:
_HLRBRep.HLRBRep_ListIteratorOfListOfBPnt2D_swigregister(HLRBRep_ListIteratorOfListOfBPnt2D)

class HLRBRep_ListIteratorOfListOfBPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_swiginit(self, _HLRBRep.new_HLRBRep_ListIteratorOfListOfBPoint(*args))

    def More(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_More(self)

    def Next(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_Next(self)

    def Value(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_Value(self)

    def ChangeValue(self):
        return _HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_ChangeValue(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListIteratorOfListOfBPoint

# Register HLRBRep_ListIteratorOfListOfBPoint in _HLRBRep:
_HLRBRep.HLRBRep_ListIteratorOfListOfBPoint_swigregister(HLRBRep_ListIteratorOfListOfBPoint)

class HLRBRep_ListOfBPnt2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListOfBPnt2D_swiginit(self, _HLRBRep.new_HLRBRep_ListOfBPnt2D(*args))

    def Size(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Size(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Assign(self, theOther)

    def Set(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Clear(self, theAllocator)

    def First(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_First(self)

    def Last(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Last(self)

    def Append(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Append(self, *args)

    def Prepend(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Prepend(self, *args)

    def RemoveFirst(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_RemoveFirst(self)

    def Remove(self, theIter):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_InsertAfter(self, *args)

    def Reverse(self):
        return _HLRBRep.HLRBRep_ListOfBPnt2D_Reverse(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListOfBPnt2D

    def __len__(self):
        return self.Size()


# Register HLRBRep_ListOfBPnt2D in _HLRBRep:
_HLRBRep.HLRBRep_ListOfBPnt2D_swigregister(HLRBRep_ListOfBPnt2D)

class HLRBRep_ListOfBPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_ListOfBPoint_swiginit(self, _HLRBRep.new_HLRBRep_ListOfBPoint(*args))

    def Size(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_Size(self)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPoint_Assign(self, theOther)

    def Set(self, theOther):
        return _HLRBRep.HLRBRep_ListOfBPoint_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _HLRBRep.HLRBRep_ListOfBPoint_Clear(self, theAllocator)

    def First(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_First(self)

    def Last(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_Last(self)

    def Append(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_Append(self, *args)

    def Prepend(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_Prepend(self, *args)

    def RemoveFirst(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_RemoveFirst(self)

    def Remove(self, theIter):
        return _HLRBRep.HLRBRep_ListOfBPoint_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _HLRBRep.HLRBRep_ListOfBPoint_InsertAfter(self, *args)

    def Reverse(self):
        return _HLRBRep.HLRBRep_ListOfBPoint_Reverse(self)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ListOfBPoint

    def __len__(self):
        return self.Size()


# Register HLRBRep_ListOfBPoint in _HLRBRep:
_HLRBRep.HLRBRep_ListOfBPoint_swigregister(HLRBRep_ListOfBPoint)

class HLRBRep_SeqOfShapeBounds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_begin(self)

    def end(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_end(self)

    def cbegin(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_cbegin(self)

    def cend(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_cend(self)

    def __init__(self, *args):
        _HLRBRep.HLRBRep_SeqOfShapeBounds_swiginit(self, _HLRBRep.new_HLRBRep_SeqOfShapeBounds(*args))

    def Size(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Size(self)

    def Length(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Length(self)

    def Lower(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Lower(self)

    def Upper(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Upper(self)

    def IsEmpty(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_IsEmpty(self)

    def Reverse(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Reverse(self)

    def Exchange(self, I, J):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Assign(self, theOther)

    def Set(self, theOther):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Set(self, theOther)

    def Remove(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Remove(self, *args)

    def Append(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Append(self, *args)

    def Prepend(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Split(self, theIndex, theSeq)

    def First(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_First(self)

    def ChangeFirst(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_ChangeFirst(self)

    def Last(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Last(self)

    def ChangeLast(self):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_ChangeLast(self)

    def Value(self, theIndex):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _HLRBRep.HLRBRep_SeqOfShapeBounds_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SeqOfShapeBounds

    def __len__(self):
        return self.Size()


# Register HLRBRep_SeqOfShapeBounds in _HLRBRep:
_HLRBRep.HLRBRep_SeqOfShapeBounds_swigregister(HLRBRep_SeqOfShapeBounds)

def HLRBRep_SeqOfShapeBounds_delNode(theNode, theAl):
    return _HLRBRep.HLRBRep_SeqOfShapeBounds_delNode(theNode, theAl)

class hlrbrep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def MakeEdge(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        ec: HLRBRep_Curve
        U1: float
        U2: float

        Returns
        -------
        TopoDS_Edge

        """
        return _HLRBRep.hlrbrep_MakeEdge(*args)

    @staticmethod
    def MakeEdge3d(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        ec: HLRBRep_Curve
        U1: float
        U2: float

        Returns
        -------
        TopoDS_Edge

        """
        return _HLRBRep.hlrbrep_MakeEdge3d(*args)

    @staticmethod
    def PolyHLRAngleAndDeflection(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        InAngl: float

        Returns
        -------
        OutAngl: float
        OutDefl: float

        """
        return _HLRBRep.hlrbrep_PolyHLRAngleAndDeflection(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.hlrbrep_swiginit(self, _HLRBRep.new_hlrbrep())
    __swig_destroy__ = _HLRBRep.delete_hlrbrep

# Register hlrbrep in _HLRBRep:
_HLRBRep.hlrbrep_swigregister(hlrbrep)

def hlrbrep_MakeEdge(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    ec: HLRBRep_Curve
    U1: float
    U2: float

    Returns
    -------
    TopoDS_Edge

    """
    return _HLRBRep.hlrbrep_MakeEdge(*args)

def hlrbrep_MakeEdge3d(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    ec: HLRBRep_Curve
    U1: float
    U2: float

    Returns
    -------
    TopoDS_Edge

    """
    return _HLRBRep.hlrbrep_MakeEdge3d(*args)

def hlrbrep_PolyHLRAngleAndDeflection(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    InAngl: float

    Returns
    -------
    OutAngl: float
    OutDefl: float

    """
    return _HLRBRep.hlrbrep_PolyHLRAngleAndDeflection(*args)

class HLRBRep_AreaLimit(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        The previous and next field are set to null.

        Parameters
        ----------
        V: HLRAlgo_Intersection
        Boundary: bool
        Interference: bool
        StateBefore: TopAbs_State
        StateAfter: TopAbs_State
        EdgeBefore: TopAbs_State
        EdgeAfter: TopAbs_State

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_AreaLimit_swiginit(self, _HLRBRep.new_HLRBRep_AreaLimit(*args))

    def Clear(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_AreaLimit_Clear(self, *args)

    def EdgeAfter(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        St: TopAbs_State

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_AreaLimit_EdgeAfter(self, *args)

    def EdgeBefore(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        St: TopAbs_State

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_AreaLimit_EdgeBefore(self, *args)

    def IsBoundary(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_AreaLimit_IsBoundary(self, *args)

    def IsInterference(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_AreaLimit_IsInterference(self, *args)

    def Next(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        N: HLRBRep_AreaLimit

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        """
        return _HLRBRep.HLRBRep_AreaLimit_Next(self, *args)

    def Previous(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: HLRBRep_AreaLimit

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        """
        return _HLRBRep.HLRBRep_AreaLimit_Previous(self, *args)

    def StateAfter(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        St: TopAbs_State

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_AreaLimit_StateAfter(self, *args)

    def StateBefore(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        St: TopAbs_State

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_AreaLimit_StateBefore(self, *args)

    def Vertex(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRAlgo_Intersection

        """
        return _HLRBRep.HLRBRep_AreaLimit_Vertex(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_AreaLimit_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_AreaLimit

# Register HLRBRep_AreaLimit in _HLRBRep:
_HLRBRep.HLRBRep_AreaLimit_swigregister(HLRBRep_AreaLimit)

class HLRBRep_BCurveTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BSpline(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _HLRBRep.HLRBRep_BCurveTool_BSpline(*args)

    @staticmethod
    def Bezier(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _HLRBRep.HLRBRep_BCurveTool_Bezier(*args)

    @staticmethod
    def Circle(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        gp_Circ

        """
        return _HLRBRep.HLRBRep_BCurveTool_Circle(*args)

    @staticmethod
    def Continuity(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        GeomAbs_Shape

        """
        return _HLRBRep.HLRBRep_BCurveTool_Continuity(*args)

    @staticmethod
    def D0(*args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BCurveTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BCurveTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BCurveTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BCurveTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_BCurveTool_DN(*args)

    @staticmethod
    def Degree(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_BCurveTool_Degree(*args)

    @staticmethod
    def Ellipse(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        gp_Elips

        """
        return _HLRBRep.HLRBRep_BCurveTool_Ellipse(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_BCurveTool_FirstParameter(*args)

    @staticmethod
    def GetType(*args):
        r"""
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        GeomAbs_CurveType

        """
        return _HLRBRep.HLRBRep_BCurveTool_GetType(*args)

    @staticmethod
    def Hyperbola(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        gp_Hypr

        """
        return _HLRBRep.HLRBRep_BCurveTool_Hyperbola(*args)

    @staticmethod
    def Intervals(*args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        C: BRepAdaptor_Curve
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BCurveTool_Intervals(*args)

    @staticmethod
    def IsClosed(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_BCurveTool_IsClosed(*args)

    @staticmethod
    def IsPeriodic(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_BCurveTool_IsPeriodic(*args)

    @staticmethod
    def IsRational(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_BCurveTool_IsRational(*args)

    @staticmethod
    def LastParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_BCurveTool_LastParameter(*args)

    @staticmethod
    def Line(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        gp_Lin

        """
        return _HLRBRep.HLRBRep_BCurveTool_Line(*args)

    @staticmethod
    def NbIntervals(*args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbIntervals(*args)

    @staticmethod
    def NbKnots(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbKnots(*args)

    @staticmethod
    def NbPoles(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbPoles(*args)

    @staticmethod
    def NbSamples(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U0: float
        U1: float

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_BCurveTool_NbSamples(*args)

    @staticmethod
    def Parabola(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        gp_Parab

        """
        return _HLRBRep.HLRBRep_BCurveTool_Parabola(*args)

    @staticmethod
    def Period(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_BCurveTool_Period(*args)

    @staticmethod
    def Poles(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        T: TColgp_Array1OfPnt

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BCurveTool_Poles(*args)

    @staticmethod
    def PolesAndWeights(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        T: TColgp_Array1OfPnt
        W: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BCurveTool_PolesAndWeights(*args)

    @staticmethod
    def Resolution(*args):
        r"""
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        R3d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_BCurveTool_Resolution(*args)

    @staticmethod
    def Value(*args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: BRepAdaptor_Curve
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_BCurveTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_BCurveTool_swiginit(self, _HLRBRep.new_HLRBRep_BCurveTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_BCurveTool

# Register HLRBRep_BCurveTool in _HLRBRep:
_HLRBRep.HLRBRep_BCurveTool_swigregister(HLRBRep_BCurveTool)

def HLRBRep_BCurveTool_BSpline(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    opencascade::handle<Geom_BSplineCurve>

    """
    return _HLRBRep.HLRBRep_BCurveTool_BSpline(*args)

def HLRBRep_BCurveTool_Bezier(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    opencascade::handle<Geom_BezierCurve>

    """
    return _HLRBRep.HLRBRep_BCurveTool_Bezier(*args)

def HLRBRep_BCurveTool_Circle(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    gp_Circ

    """
    return _HLRBRep.HLRBRep_BCurveTool_Circle(*args)

def HLRBRep_BCurveTool_Continuity(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    GeomAbs_Shape

    """
    return _HLRBRep.HLRBRep_BCurveTool_Continuity(*args)

def HLRBRep_BCurveTool_D0(*args):
    r"""
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    U: float
    P: gp_Pnt

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_BCurveTool_D0(*args)

def HLRBRep_BCurveTool_D1(*args):
    r"""
    Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    U: float
    P: gp_Pnt
    V: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_BCurveTool_D1(*args)

def HLRBRep_BCurveTool_D2(*args):
    r"""
    Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    U: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_BCurveTool_D2(*args)

def HLRBRep_BCurveTool_D3(*args):
    r"""
    Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    U: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_BCurveTool_D3(*args)

def HLRBRep_BCurveTool_DN(*args):
    r"""
    The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    U: float
    N: int

    Returns
    -------
    gp_Vec

    """
    return _HLRBRep.HLRBRep_BCurveTool_DN(*args)

def HLRBRep_BCurveTool_Degree(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_BCurveTool_Degree(*args)

def HLRBRep_BCurveTool_Ellipse(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    gp_Elips

    """
    return _HLRBRep.HLRBRep_BCurveTool_Ellipse(*args)

def HLRBRep_BCurveTool_FirstParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_BCurveTool_FirstParameter(*args)

def HLRBRep_BCurveTool_GetType(*args):
    r"""
    Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    GeomAbs_CurveType

    """
    return _HLRBRep.HLRBRep_BCurveTool_GetType(*args)

def HLRBRep_BCurveTool_Hyperbola(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    gp_Hypr

    """
    return _HLRBRep.HLRBRep_BCurveTool_Hyperbola(*args)

def HLRBRep_BCurveTool_Intervals(*args):
    r"""
    Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

    Parameters
    ----------
    C: BRepAdaptor_Curve
    T: TColStd_Array1OfReal
    S: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_BCurveTool_Intervals(*args)

def HLRBRep_BCurveTool_IsClosed(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_BCurveTool_IsClosed(*args)

def HLRBRep_BCurveTool_IsPeriodic(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_BCurveTool_IsPeriodic(*args)

def HLRBRep_BCurveTool_IsRational(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_BCurveTool_IsRational(*args)

def HLRBRep_BCurveTool_LastParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_BCurveTool_LastParameter(*args)

def HLRBRep_BCurveTool_Line(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    gp_Lin

    """
    return _HLRBRep.HLRBRep_BCurveTool_Line(*args)

def HLRBRep_BCurveTool_NbIntervals(*args):
    r"""
    Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    S: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_BCurveTool_NbIntervals(*args)

def HLRBRep_BCurveTool_NbKnots(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_BCurveTool_NbKnots(*args)

def HLRBRep_BCurveTool_NbPoles(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_BCurveTool_NbPoles(*args)

def HLRBRep_BCurveTool_NbSamples(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    U0: float
    U1: float

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_BCurveTool_NbSamples(*args)

def HLRBRep_BCurveTool_Parabola(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    gp_Parab

    """
    return _HLRBRep.HLRBRep_BCurveTool_Parabola(*args)

def HLRBRep_BCurveTool_Period(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_BCurveTool_Period(*args)

def HLRBRep_BCurveTool_Poles(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    T: TColgp_Array1OfPnt

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_BCurveTool_Poles(*args)

def HLRBRep_BCurveTool_PolesAndWeights(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    T: TColgp_Array1OfPnt
    W: TColStd_Array1OfReal

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_BCurveTool_PolesAndWeights(*args)

def HLRBRep_BCurveTool_Resolution(*args):
    r"""
    Returns the parametric resolution corresponding to the real space resolution <r3d>.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    R3d: float

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_BCurveTool_Resolution(*args)

def HLRBRep_BCurveTool_Value(*args):
    r"""
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: BRepAdaptor_Curve
    U: float

    Returns
    -------
    gp_Pnt

    """
    return _HLRBRep.HLRBRep_BCurveTool_Value(*args)

class HLRBRep_BiPnt2D(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        x1: float
        y1: float
        x2: float
        y2: float
        S: TopoDS_Shape
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        thePoint1: gp_XY
        thePoint2: gp_XY
        S: TopoDS_Shape
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_BiPnt2D_swiginit(self, _HLRBRep.new_HLRBRep_BiPnt2D(*args))

    def IntLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPnt2D_IntLine(self, *args)

    def OutLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPnt2D_OutLine(self, *args)

    def P1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt2d

        """
        return _HLRBRep.HLRBRep_BiPnt2D_P1(self, *args)

    def P2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt2d

        """
        return _HLRBRep.HLRBRep_BiPnt2D_P2(self, *args)

    def Rg1Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPnt2D_Rg1Line(self, *args)

    def RgNLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPnt2D_RgNLine(self, *args)

    def Shape(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPnt2D_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_BiPnt2D

# Register HLRBRep_BiPnt2D in _HLRBRep:
_HLRBRep.HLRBRep_BiPnt2D_swigregister(HLRBRep_BiPnt2D)

class HLRBRep_BiPoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        x1: float
        y1: float
        z1: float
        x2: float
        y2: float
        z2: float
        S: TopoDS_Shape
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_BiPoint_swiginit(self, _HLRBRep.new_HLRBRep_BiPoint(*args))

    def IntLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPoint_IntLine(self, *args)

    def OutLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPoint_OutLine(self, *args)

    def P1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_BiPoint_P1(self, *args)

    def P2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_BiPoint_P2(self, *args)

    def Rg1Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPoint_Rg1Line(self, *args)

    def RgNLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPoint_RgNLine(self, *args)

    def Shape(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_BiPoint_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_BiPoint

# Register HLRBRep_BiPoint in _HLRBRep:
_HLRBRep.HLRBRep_BiPoint_swigregister(HLRBRep_BiPoint)

class HLRBRep_CInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor.

        Returns
        -------
        None
        Self intersection of a curve.

        Parameters
        ----------
        C: Standard_Address
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Self intersection of a curve with a domain.

        Parameters
        ----------
        C: Standard_Address
        D: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_CInter_swiginit(self, _HLRBRep.new_HLRBRep_CInter(*args))

    def ComputeDomain(self, *args):
        r"""
        Create a domain from a curve.

        Parameters
        ----------
        C1: Standard_Address
        TolDomain: float

        Returns
        -------
        IntRes2d_Domain

        """
        return _HLRBRep.HLRBRep_CInter_ComputeDomain(self, *args)

    def GetMinNbSamples(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_CInter_GetMinNbSamples(self, *args)

    def Perform(self, *args):
        r"""
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        D1: IntRes2d_Domain
        C2: Standard_Address
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between 2 curves.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CInter_Perform(self, *args)

    def SetMinNbSamples(self, *args):
        r"""
        Set / get minimum number of points in polygon intersection.

        Parameters
        ----------
        theMinNbSamples: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CInter_SetMinNbSamples(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CInter

# Register HLRBRep_CInter in _HLRBRep:
_HLRBRep.HLRBRep_CInter_swigregister(HLRBRep_CInter)

class HLRBRep_CLProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Initializes the local properties of the curve <c> the current point and the derivatives are computed at the same time, which allows an optimization of the computation time. <n> indicates the maximum number of derivations to be done (0, 1, 2 or 3). for example, to compute only the tangent, n should be equal to 1. <resolution> is the linear tolerance (it is used to test if a vector is null).

        Parameters
        ----------
        C: HLRBRep_Curve *
        N: int
        Resolution: float

        Returns
        -------
        None
        Same as previous constructor but here the parameter is set to the value <u>. all the computations done will be related to <c> and <u>.

        Parameters
        ----------
        C: HLRBRep_Curve *
        U: float
        N: int
        Resolution: float

        Returns
        -------
        None
        Same as previous constructor but here the parameter is set to the value <u> and the curve is set with setcurve. the curve can have a empty constructor all the computations done will be related to <c> and <u> when the functions 'set' will be done.

        Parameters
        ----------
        N: int
        Resolution: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_CLProps_swiginit(self, _HLRBRep.new_HLRBRep_CLProps(*args))

    def CentreOfCurvature(self, *args):
        r"""
        Returns the centre of curvature <p>.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLProps_CentreOfCurvature(self, *args)

    def Curvature(self, *args):
        r"""
        Returns the curvature.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CLProps_Curvature(self, *args)

    def D1(self, *args):
        r"""
        Returns the first derivative. the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec2d

        """
        return _HLRBRep.HLRBRep_CLProps_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the second derivative. the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec2d

        """
        return _HLRBRep.HLRBRep_CLProps_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the third derivative. the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec2d

        """
        return _HLRBRep.HLRBRep_CLProps_D3(self, *args)

    def IsTangentDefined(self, *args):
        r"""
        Returns true if the tangent is defined. for example, the tangent is not defined if the three first derivatives are all null.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_CLProps_IsTangentDefined(self, *args)

    def Normal(self, *args):
        r"""
        Returns the normal direction <n>.

        Parameters
        ----------
        N: gp_Dir2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLProps_Normal(self, *args)

    def SetCurve(self, *args):
        r"""
        Initializes the local properties of the curve for the new curve.

        Parameters
        ----------
        C: HLRBRep_Curve *

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLProps_SetCurve(self, *args)

    def SetParameter(self, *args):
        r"""
        Initializes the local properties of the curve for the parameter value <u>.

        Parameters
        ----------
        U: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLProps_SetParameter(self, *args)

    def Tangent(self, *args):
        r"""
        Output the tangent direction <d>.

        Parameters
        ----------
        D: gp_Dir2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLProps_Tangent(self, *args)

    def Value(self, *args):
        r"""
        Returns the point.

        Returns
        -------
        gp_Pnt2d

        """
        return _HLRBRep.HLRBRep_CLProps_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CLProps

# Register HLRBRep_CLProps in _HLRBRep:
_HLRBRep.HLRBRep_CLProps_swigregister(HLRBRep_CLProps)

class HLRBRep_CLPropsATool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Continuity(*args):
        r"""
        Returns the order of continuity of the curve <c>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.

        Parameters
        ----------
        A: HLRBRep_Curve *

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_CLPropsATool_Continuity(*args)

    @staticmethod
    def D1(*args):
        r"""
        Computes the point <p> and first derivative <v1> of parameter <u> on the curve <c>.

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLPropsATool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""
        Computes the point <p>, the first derivative <v1> and second derivative <v2> of parameter <u> on the curve <c>.

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLPropsATool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""
        Computes the point <p>, the first derivative <v1>, the second derivative <v2> and third derivative <v3> of parameter <u> on the curve <c>.

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLPropsATool_D3(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""
        Returns the first parameter bound of the curve.

        Parameters
        ----------
        A: HLRBRep_Curve *

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CLPropsATool_FirstParameter(*args)

    @staticmethod
    def LastParameter(*args):
        r"""
        Returns the last parameter bound of the curve. firstparameter must be less than lastparamenter.

        Parameters
        ----------
        A: HLRBRep_Curve *

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CLPropsATool_LastParameter(*args)

    @staticmethod
    def Value(*args):
        r"""
        Computes the point <p> of parameter <u> on the curve from hlrbrep <c>.

        Parameters
        ----------
        A: HLRBRep_Curve *
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CLPropsATool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_CLPropsATool_swiginit(self, _HLRBRep.new_HLRBRep_CLPropsATool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CLPropsATool

# Register HLRBRep_CLPropsATool in _HLRBRep:
_HLRBRep.HLRBRep_CLPropsATool_swigregister(HLRBRep_CLPropsATool)

def HLRBRep_CLPropsATool_Continuity(*args):
    r"""
    Returns the order of continuity of the curve <c>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable. returns 3 : first, second and third are computable.

    Parameters
    ----------
    A: HLRBRep_Curve *

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_CLPropsATool_Continuity(*args)

def HLRBRep_CLPropsATool_D1(*args):
    r"""
    Computes the point <p> and first derivative <v1> of parameter <u> on the curve <c>.

    Parameters
    ----------
    A: HLRBRep_Curve *
    U: float
    P: gp_Pnt2d
    V1: gp_Vec2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CLPropsATool_D1(*args)

def HLRBRep_CLPropsATool_D2(*args):
    r"""
    Computes the point <p>, the first derivative <v1> and second derivative <v2> of parameter <u> on the curve <c>.

    Parameters
    ----------
    A: HLRBRep_Curve *
    U: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CLPropsATool_D2(*args)

def HLRBRep_CLPropsATool_D3(*args):
    r"""
    Computes the point <p>, the first derivative <v1>, the second derivative <v2> and third derivative <v3> of parameter <u> on the curve <c>.

    Parameters
    ----------
    A: HLRBRep_Curve *
    U: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CLPropsATool_D3(*args)

def HLRBRep_CLPropsATool_FirstParameter(*args):
    r"""
    Returns the first parameter bound of the curve.

    Parameters
    ----------
    A: HLRBRep_Curve *

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_CLPropsATool_FirstParameter(*args)

def HLRBRep_CLPropsATool_LastParameter(*args):
    r"""
    Returns the last parameter bound of the curve. firstparameter must be less than lastparamenter.

    Parameters
    ----------
    A: HLRBRep_Curve *

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_CLPropsATool_LastParameter(*args)

def HLRBRep_CLPropsATool_Value(*args):
    r"""
    Computes the point <p> of parameter <u> on the curve from hlrbrep <c>.

    Parameters
    ----------
    A: HLRBRep_Curve *
    U: float
    P: gp_Pnt2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CLPropsATool_Value(*args)

class HLRBRep_Curve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an undefined curve.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_Curve_swiginit(self, _HLRBRep.new_HLRBRep_Curve(*args))

    def Circle(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Circ2d

        """
        return _HLRBRep.HLRBRep_Curve_Circle(self, *args)

    def Continuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _HLRBRep.HLRBRep_Curve_Continuity(self, *args)

    def Curve(self, *args):
        r"""
        Returns the 3d curve.

        Returns
        -------
        BRepAdaptor_Curve
        Sets the 3d curve to be projected.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_Curve(self, *args)

    def D0(self, *args):
        r"""
        Computes the 3d point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point of parameter u on the curve with its first derivative.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_D1(self, *args)

    def D2(self, *args):
        r"""
        Raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_D3(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _HLRBRep.HLRBRep_Curve_DN(self, *args)

    def Degree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Curve_Degree(self, *args)

    def Ellipse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Elips2d

        """
        return _HLRBRep.HLRBRep_Curve_Ellipse(self, *args)

    def FirstParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_FirstParameter(self, *args)

    def GetCurve(self, *args):
        r"""
        Returns the 3d curve.

        Returns
        -------
        BRepAdaptor_Curve

        """
        return _HLRBRep.HLRBRep_Curve_GetCurve(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _HLRBRep.HLRBRep_Curve_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Hypr2d

        """
        return _HLRBRep.HLRBRep_Curve_Hyperbola(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_Intervals(self, *args)

    def IsClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Curve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Curve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Curve_IsRational(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        kn: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_Knots(self, *args)

    def LastParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_LastParameter(self, *args)

    def Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin2d

        """
        return _HLRBRep.HLRBRep_Curve_Line(self, *args)

    def Multiplicities(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        mu: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_Multiplicities(self, *args)

    def NbIntervals(self, *args):
        r"""
        If necessary, breaks the curve in intervals of continuity <s>. and returns the number of intervals.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Curve_NbIntervals(self, *args)

    def NbKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Curve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Curve_NbPoles(self, *args)

    def Parabola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Parab2d

        """
        return _HLRBRep.HLRBRep_Curve_Parabola(self, *args)

    def Parameter2d(self, *args):
        r"""
        Returns the parameter on the 2d curve from the parameter on the 3d curve.

        Parameters
        ----------
        P3d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_Parameter2d(self, *args)

    def Parameter3d(self, *args):
        r"""
        Returns the parameter on the 3d curve from the parameter on the 2d curve.

        Parameters
        ----------
        P2d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_Parameter3d(self, *args)

    def Period(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_Period(self, *args)

    def Poles(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TP: TColgp_Array1OfPnt2d

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        aCurve: Geom_BSplineCurve
        TP: TColgp_Array1OfPnt2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_Poles(self, *args)

    def PolesAndWeights(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TP: TColgp_Array1OfPnt2d
        TW: TColStd_Array1OfReal

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        aCurve: Geom_BSplineCurve
        TP: TColgp_Array1OfPnt2d
        TW: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_PolesAndWeights(self, *args)

    def Projector(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Proj: HLRAlgo_Projector *

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_Projector(self, *args)

    def Resolution(self, *args):
        r"""
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_Resolution(self, *args)

    def Tangent(self, *args):
        r"""
        Depending on <atstart> computes the 2d point and tangent on the curve at sart (or at end). if the first derivative is null look after at start (or before at end) with the second derivative.

        Parameters
        ----------
        AtStart: bool
        P: gp_Pnt2d
        D: gp_Dir2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Curve_Tangent(self, *args)

    def Update(self, *args):
        r"""
        Update the minmax and the internal data.

        Parameters
        ----------
        TotMin: float
        TotMax: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_Update(self, *args)

    def UpdateMinMax(self, *args):
        r"""
        Update the minmax returns tol for enlarge;.

        Parameters
        ----------
        TotMin: float
        TotMax: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_UpdateMinMax(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _HLRBRep.HLRBRep_Curve_Value(self, *args)

    def Value3D(self, *args):
        r"""
        Computes the 3d point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_Curve_Value3D(self, *args)

    def Z(self, *args):
        r"""
        Computes the z coordinate of the point of parameter u on the curve in the viewing coordinate system.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Curve_Z(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Curve

# Register HLRBRep_Curve in _HLRBRep:
_HLRBRep.HLRBRep_Curve_swigregister(HLRBRep_Curve)

class HLRBRep_CurveTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BSpline(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _HLRBRep.HLRBRep_CurveTool_BSpline(*args)

    @staticmethod
    def Bezier(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        opencascade::handle<Geom2d_BezierCurve>

        """
        return _HLRBRep.HLRBRep_CurveTool_Bezier(*args)

    @staticmethod
    def Circle(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        gp_Circ2d

        """
        return _HLRBRep.HLRBRep_CurveTool_Circle(*args)

    @staticmethod
    def Continuity(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        GeomAbs_Shape

        """
        return _HLRBRep.HLRBRep_CurveTool_Continuity(*args)

    @staticmethod
    def D0(*args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CurveTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CurveTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CurveTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        C: Standard_Address
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CurveTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        C: Standard_Address
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _HLRBRep.HLRBRep_CurveTool_DN(*args)

    @staticmethod
    def Degree(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_CurveTool_Degree(*args)

    @staticmethod
    def Ellipse(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        gp_Elips2d

        """
        return _HLRBRep.HLRBRep_CurveTool_Ellipse(*args)

    @staticmethod
    def EpsX(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CurveTool_EpsX(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CurveTool_FirstParameter(*args)

    @staticmethod
    def GetInterval(*args):
        r"""
        Output the bounds of interval of index <index> used if type == composite.

        Parameters
        ----------
        C: Standard_Address
        Index: int
        Tab: TColStd_Array1OfReal

        Returns
        -------
        U1: float
        U2: float

        """
        return _HLRBRep.HLRBRep_CurveTool_GetInterval(*args)

    @staticmethod
    def GetType(*args):
        r"""
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        GeomAbs_CurveType

        """
        return _HLRBRep.HLRBRep_CurveTool_GetType(*args)

    @staticmethod
    def Hyperbola(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        gp_Hypr2d

        """
        return _HLRBRep.HLRBRep_CurveTool_Hyperbola(*args)

    @staticmethod
    def Intervals(*args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        C: Standard_Address
        T: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_CurveTool_Intervals(*args)

    @staticmethod
    def IsClosed(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_CurveTool_IsClosed(*args)

    @staticmethod
    def IsPeriodic(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_CurveTool_IsPeriodic(*args)

    @staticmethod
    def LastParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CurveTool_LastParameter(*args)

    @staticmethod
    def Line(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        gp_Lin2d

        """
        return _HLRBRep.HLRBRep_CurveTool_Line(*args)

    @staticmethod
    def NbIntervals(*args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_CurveTool_NbIntervals(*args)

    @staticmethod
    def NbSamples(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address
        U0: float
        U1: float

        Returns
        -------
        int
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_CurveTool_NbSamples(*args)

    @staticmethod
    def Parabola(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        gp_Parab2d

        """
        return _HLRBRep.HLRBRep_CurveTool_Parabola(*args)

    @staticmethod
    def Period(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CurveTool_Period(*args)

    @staticmethod
    def Resolution(*args):
        r"""
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        C: Standard_Address
        R3d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_CurveTool_Resolution(*args)

    @staticmethod
    def TheType(*args):
        r"""
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        GeomAbs_CurveType

        """
        return _HLRBRep.HLRBRep_CurveTool_TheType(*args)

    @staticmethod
    def Value(*args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        C: Standard_Address
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _HLRBRep.HLRBRep_CurveTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_CurveTool_swiginit(self, _HLRBRep.new_HLRBRep_CurveTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_CurveTool

# Register HLRBRep_CurveTool in _HLRBRep:
_HLRBRep.HLRBRep_CurveTool_swigregister(HLRBRep_CurveTool)

def HLRBRep_CurveTool_BSpline(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    opencascade::handle<Geom2d_BSplineCurve>

    """
    return _HLRBRep.HLRBRep_CurveTool_BSpline(*args)

def HLRBRep_CurveTool_Bezier(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    opencascade::handle<Geom2d_BezierCurve>

    """
    return _HLRBRep.HLRBRep_CurveTool_Bezier(*args)

def HLRBRep_CurveTool_Circle(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    gp_Circ2d

    """
    return _HLRBRep.HLRBRep_CurveTool_Circle(*args)

def HLRBRep_CurveTool_Continuity(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    GeomAbs_Shape

    """
    return _HLRBRep.HLRBRep_CurveTool_Continuity(*args)

def HLRBRep_CurveTool_D0(*args):
    r"""
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: Standard_Address
    U: float
    P: gp_Pnt2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CurveTool_D0(*args)

def HLRBRep_CurveTool_D1(*args):
    r"""
    Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

    Parameters
    ----------
    C: Standard_Address
    U: float
    P: gp_Pnt2d
    V: gp_Vec2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CurveTool_D1(*args)

def HLRBRep_CurveTool_D2(*args):
    r"""
    Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

    Parameters
    ----------
    C: Standard_Address
    U: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CurveTool_D2(*args)

def HLRBRep_CurveTool_D3(*args):
    r"""
    Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

    Parameters
    ----------
    C: Standard_Address
    U: float
    P: gp_Pnt2d
    V1: gp_Vec2d
    V2: gp_Vec2d
    V3: gp_Vec2d

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CurveTool_D3(*args)

def HLRBRep_CurveTool_DN(*args):
    r"""
    The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

    Parameters
    ----------
    C: Standard_Address
    U: float
    N: int

    Returns
    -------
    gp_Vec2d

    """
    return _HLRBRep.HLRBRep_CurveTool_DN(*args)

def HLRBRep_CurveTool_Degree(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_CurveTool_Degree(*args)

def HLRBRep_CurveTool_Ellipse(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    gp_Elips2d

    """
    return _HLRBRep.HLRBRep_CurveTool_Ellipse(*args)

def HLRBRep_CurveTool_EpsX(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_CurveTool_EpsX(*args)

def HLRBRep_CurveTool_FirstParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_CurveTool_FirstParameter(*args)

def HLRBRep_CurveTool_GetInterval(*args):
    r"""
    Output the bounds of interval of index <index> used if type == composite.

    Parameters
    ----------
    C: Standard_Address
    Index: int
    Tab: TColStd_Array1OfReal

    Returns
    -------
    U1: float
    U2: float

    """
    return _HLRBRep.HLRBRep_CurveTool_GetInterval(*args)

def HLRBRep_CurveTool_GetType(*args):
    r"""
    Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    GeomAbs_CurveType

    """
    return _HLRBRep.HLRBRep_CurveTool_GetType(*args)

def HLRBRep_CurveTool_Hyperbola(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    gp_Hypr2d

    """
    return _HLRBRep.HLRBRep_CurveTool_Hyperbola(*args)

def HLRBRep_CurveTool_Intervals(*args):
    r"""
    Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

    Parameters
    ----------
    C: Standard_Address
    T: TColStd_Array1OfReal

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_CurveTool_Intervals(*args)

def HLRBRep_CurveTool_IsClosed(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_CurveTool_IsClosed(*args)

def HLRBRep_CurveTool_IsPeriodic(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_CurveTool_IsPeriodic(*args)

def HLRBRep_CurveTool_LastParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_CurveTool_LastParameter(*args)

def HLRBRep_CurveTool_Line(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    gp_Lin2d

    """
    return _HLRBRep.HLRBRep_CurveTool_Line(*args)

def HLRBRep_CurveTool_NbIntervals(*args):
    r"""
    Returns the number of intervals for continuity <s>. may be one if continuity(myclass) >= <s>.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_CurveTool_NbIntervals(*args)

def HLRBRep_CurveTool_NbSamples(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address
    U0: float
    U1: float

    Returns
    -------
    int
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_CurveTool_NbSamples(*args)

def HLRBRep_CurveTool_Parabola(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    gp_Parab2d

    """
    return _HLRBRep.HLRBRep_CurveTool_Parabola(*args)

def HLRBRep_CurveTool_Period(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_CurveTool_Period(*args)

def HLRBRep_CurveTool_Resolution(*args):
    r"""
    Returns the parametric resolution corresponding to the real space resolution <r3d>.

    Parameters
    ----------
    C: Standard_Address
    R3d: float

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_CurveTool_Resolution(*args)

def HLRBRep_CurveTool_TheType(*args):
    r"""
    Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

    Parameters
    ----------
    C: Standard_Address

    Returns
    -------
    GeomAbs_CurveType

    """
    return _HLRBRep.HLRBRep_CurveTool_TheType(*args)

def HLRBRep_CurveTool_Value(*args):
    r"""
    Computes the point of parameter u on the curve.

    Parameters
    ----------
    C: Standard_Address
    U: float

    Returns
    -------
    gp_Pnt2d

    """
    return _HLRBRep.HLRBRep_CurveTool_Value(*args)

class HLRBRep_Data(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Create an empty data structure of <nv> vertices, <ne> edges and <nf> faces.

        Parameters
        ----------
        NV: int
        NE: int
        NF: int

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_Data_swiginit(self, _HLRBRep.new_HLRBRep_Data(*args))

    def AboveInterference(self, *args):
        r"""
        Returns true if the rejected interference is above the face.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_AboveInterference(self, *args)

    def Classify(self, *args):
        r"""
        Classification of an edge.

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData
        LevelFlag: bool
        param: float

        Returns
        -------
        Level: int

        """
        return _HLRBRep.HLRBRep_Data_Classify(self, *args)

    def Compare(self, *args):
        r"""
        Returns the state of the edge <ed> after classification.

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_Data_Compare(self, *args)

    def Destroy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_Destroy(self, *args)

    def EDataArray(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRBRep_Array1OfEData

        """
        return _HLRBRep.HLRBRep_Data_EDataArray(self, *args)

    def Edge(self, *args):
        r"""
        Returns the current edge.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Data_Edge(self, *args)

    def EdgeMap(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopTools_IndexedMapOfShape

        """
        return _HLRBRep.HLRBRep_Data_EdgeMap(self, *args)

    def EdgeOfTheHidingFace(self, *args):
        r"""
        Returns the true if the edge <ed> belongs to the hiding face.

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_EdgeOfTheHidingFace(self, *args)

    def EdgeState(self, *args):
        r"""
        Returns the local 3d state of the intersection between the current edge and the current face at the <p1> and <p2> parameters.

        Parameters
        ----------
        p1: float
        p2: float

        Returns
        -------
        stbef: TopAbs_State
        staf: TopAbs_State

        """
        return _HLRBRep.HLRBRep_Data_EdgeState(self, *args)

    def FDataArray(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRBRep_Array1OfFData

        """
        return _HLRBRep.HLRBRep_Data_FDataArray(self, *args)

    def FaceMap(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopTools_IndexedMapOfShape

        """
        return _HLRBRep.HLRBRep_Data_FaceMap(self, *args)

    def HidingStartLevel(self, *args):
        r"""
        Returns the number of levels of hiding face above the first point of the edge <ed>. the interferencelist is given to compute far away of the interferences and then come back.

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData
        IL: HLRAlgo_InterferenceList

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Data_HidingStartLevel(self, *args)

    def HidingTheFace(self, *args):
        r"""
        Returns true if the current edge to be hidden belongs to the hiding face.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_HidingTheFace(self, *args)

    def InitBoundSort(self, *args):
        r"""
        To compare with only non rejected edges.

        Parameters
        ----------
        MinMaxTot: HLRAlgo_EdgesBlock::MinMaxIndices
        e1: int
        e2: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_InitBoundSort(self, *args)

    def InitEdge(self, *args):
        r"""
        Begin an iteration only on visible edges crossing the face number <fi>.

        Parameters
        ----------
        FI: int
        MST: BRepTopAdaptor_MapOfShapeTool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_InitEdge(self, *args)

    def InitInterference(self, *args):
        r"""
        Intersect the current edge with the boundary of the hiding face. the interferences are given by the more, next, and value methods.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_InitInterference(self, *args)

    def Interference(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRAlgo_Interference

        """
        return _HLRBRep.HLRBRep_Data_Interference(self, *args)

    def IsBadFace(self, *args):
        r"""
        Returns true if the current face is bad.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_IsBadFace(self, *args)

    def LocalFEGeometry2D(self, *args):
        r"""
        Returns the local description of the projection of the current fedge at parameter <param>.

        Parameters
        ----------
        FE: int
        Param: float
        Tg: gp_Dir2d
        Nm: gp_Dir2d

        Returns
        -------
        Cu: float

        """
        return _HLRBRep.HLRBRep_Data_LocalFEGeometry2D(self, *args)

    def LocalLEGeometry2D(self, *args):
        r"""
        Returns the local description of the projection of the current ledge at parameter <param>.

        Parameters
        ----------
        Param: float
        Tg: gp_Dir2d
        Nm: gp_Dir2d

        Returns
        -------
        Cu: float

        """
        return _HLRBRep.HLRBRep_Data_LocalLEGeometry2D(self, *args)

    def MoreEdge(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_MoreEdge(self, *args)

    def MoreInterference(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_MoreInterference(self, *args)

    def NbEdges(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Data_NbEdges(self, *args)

    def NbFaces(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Data_NbFaces(self, *args)

    def NbVertices(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Data_NbVertices(self, *args)

    def NextEdge(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        skip: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_NextEdge(self, *args)

    def NextInterference(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_NextInterference(self, *args)

    def Projector(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRAlgo_Projector

        """
        return _HLRBRep.HLRBRep_Data_Projector(self, *args)

    def RejectedInterference(self, *args):
        r"""
        Returns true if the interference is rejected.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_RejectedInterference(self, *args)

    def SimplClassify(self, *args):
        r"""
        Simple classification of part of edge [p1, p2]. returns out if at least 1 of nbp points of edge is out; otherwise returns in. it is used to check 'suspicion' hidden part of edge.

        Parameters
        ----------
        E: int
        ED: HLRBRep_EdgeData
        Nbp: int
        p1: float
        p2: float

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_Data_SimplClassify(self, *args)

    def SimpleHidingFace(self, *args):
        r"""
        Returns true if the current hiding face is not an auto-intersected one.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Data_SimpleHidingFace(self, *args)

    def Tolerance(self, *args):
        r"""
        Set the tolerance for the rejections during the exploration.

        Parameters
        ----------
        tol: float

        Returns
        -------
        None
        Returns the tolerance for the rejections during the exploration.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_Data_Tolerance(self, *args)

    def Update(self, *args):
        r"""
        End of building of the data and updating all the information linked to the projection.

        Parameters
        ----------
        P: HLRAlgo_Projector

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_Update(self, *args)

    def Write(self, *args):
        r"""
        Write <ds> in me with a translation of <dv>,<de>,<df>.

        Parameters
        ----------
        DS: HLRBRep_Data
        dv: int
        de: int
        df: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Data_Write(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_Data_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Data

# Register HLRBRep_Data in _HLRBRep:
_HLRBRep.HLRBRep_Data_swigregister(HLRBRep_Data)

class HLRBRep_EdgeBuilder(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an edgebuilder algorithm. <vlist> describes the edge and the interferences. arealimits are created from the vertices. builds(in) is automatically called.

        Parameters
        ----------
        VList: HLRBRep_VertexList

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_EdgeBuilder_swiginit(self, _HLRBRep.new_HLRBRep_EdgeBuilder(*args))

    def AreaEdgeState(self, *args):
        r"""
        Returns the edge state of the current area.

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_AreaEdgeState(self, *args)

    def AreaState(self, *args):
        r"""
        Returns the state of the current area.

        Returns
        -------
        TopAbs_State

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_AreaState(self, *args)

    def Builds(self, *args):
        r"""
        Reinitialize the results iteration to the parts with state <tobuild>. if this method is not called after construction the default is <tobuild> = in.

        Parameters
        ----------
        ToBuild: TopAbs_State

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Builds(self, *args)

    def Current(self, *args):
        r"""
        Returns the current vertex of the current edge.

        Returns
        -------
        HLRAlgo_Intersection

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Current(self, *args)

    def Destroy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Destroy(self, *args)

    def HasArea(self, *args):
        r"""
        Returns true if there is a current area.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_HasArea(self, *args)

    def InitAreas(self, *args):
        r"""
        Initialize an iteration on the areas.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_InitAreas(self, *args)

    def IsBoundary(self, *args):
        r"""
        Returns true if the current vertex comes from the boundary of the edge.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_IsBoundary(self, *args)

    def IsInterference(self, *args):
        r"""
        Returns true if the current vertex was an interference.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_IsInterference(self, *args)

    def LeftLimit(self, *args):
        r"""
        Returns the arealimit beginning the current area. this is a null handle when the area is infinite on the left.

        Returns
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_LeftLimit(self, *args)

    def MoreEdges(self, *args):
        r"""
        Returns true if there are more new edges to build.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_MoreEdges(self, *args)

    def MoreVertices(self, *args):
        r"""
        True if there are more vertices in the current new edge.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_MoreVertices(self, *args)

    def NextArea(self, *args):
        r"""
        Set the current area to the next area.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_NextArea(self, *args)

    def NextEdge(self, *args):
        r"""
        Proceeds to the next edge to build. skip all remaining vertices on the current edge.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_NextEdge(self, *args)

    def NextVertex(self, *args):
        r"""
        Proceeds to the next vertex of the current edge.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_NextVertex(self, *args)

    def Orientation(self, *args):
        r"""
        Returns the new orientation of the current vertex.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_Orientation(self, *args)

    def PreviousArea(self, *args):
        r"""
        Set the current area to the previous area.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_PreviousArea(self, *args)

    def RightLimit(self, *args):
        r"""
        Returns the arealimit ending the current area. this is a null handle when the area is infinite on the right.

        Returns
        -------
        opencascade::handle<HLRBRep_AreaLimit>

        """
        return _HLRBRep.HLRBRep_EdgeBuilder_RightLimit(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeBuilder

# Register HLRBRep_EdgeBuilder in _HLRBRep:
_HLRBRep.HLRBRep_EdgeBuilder_swigregister(HLRBRep_EdgeBuilder)

class HLRBRep_EdgeData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_EdgeData_swiginit(self, _HLRBRep.new_HLRBRep_EdgeData(*args))

    def AutoIntersectionDone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_AutoIntersectionDone(self, *args)

    def ChangeGeometry(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRBRep_Curve

        """
        return _HLRBRep.HLRBRep_EdgeData_ChangeGeometry(self, *args)

    def Curve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRBRep_Curve *

        """
        return _HLRBRep.HLRBRep_EdgeData_Curve(self, *args)

    def CutAtEnd(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_CutAtEnd(self, *args)

    def CutAtSta(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_CutAtSta(self, *args)

    def Geometry(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRBRep_Curve

        """
        return _HLRBRep.HLRBRep_EdgeData_Geometry(self, *args)

    def HideCount(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_HideCount(self, *args)

    def MinMax(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRAlgo_EdgesBlock::MinMaxIndices

        """
        return _HLRBRep.HLRBRep_EdgeData_MinMax(self, *args)

    def OutLVEnd(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_OutLVEnd(self, *args)

    def OutLVSta(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_OutLVSta(self, *args)

    def Rg1Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_Rg1Line(self, *args)

    def RgNLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_RgNLine(self, *args)

    def Selected(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_Selected(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Reg1: bool
        RegN: bool
        EG: TopoDS_Edge
        V1: int
        V2: int
        Out1: bool
        Out2: bool
        Cut1: bool
        Cut2: bool
        Start: float
        TolStart: float
        End: float
        TolEnd: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_Set(self, *args)

    def Simple(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_Simple(self, *args)

    def Status(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRAlgo_EdgeStatus

        """
        return _HLRBRep.HLRBRep_EdgeData_Status(self, *args)

    def Tolerance(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_EdgeData_Tolerance(self, *args)

    def UpdateMinMax(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theTotMinMax: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_UpdateMinMax(self, *args)

    def Used(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_Used(self, *args)

    def VEnd(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_VEnd(self, *args)

    def VSta(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_VSta(self, *args)

    def VerAtEnd(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_VerAtEnd(self, *args)

    def VerAtSta(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_VerAtSta(self, *args)

    def Vertical(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeData_Vertical(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeData

# Register HLRBRep_EdgeData in _HLRBRep:
_HLRBRep.HLRBRep_EdgeData_swigregister(HLRBRep_EdgeData)

class HLRBRep_EdgeFaceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def CurvatureValue(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        F: Standard_Address
        U: float
        V: float
        Tg: gp_Dir

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_EdgeFaceTool_CurvatureValue(*args)

    @staticmethod
    def UVPoint(*args):
        r"""
        Return true if u and v are found.

        Parameters
        ----------
        Par: float
        E: Standard_Address
        F: Standard_Address

        Returns
        -------
        U: float
        V: float

        """
        return _HLRBRep.HLRBRep_EdgeFaceTool_UVPoint(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_EdgeFaceTool_swiginit(self, _HLRBRep.new_HLRBRep_EdgeFaceTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeFaceTool

# Register HLRBRep_EdgeFaceTool in _HLRBRep:
_HLRBRep.HLRBRep_EdgeFaceTool_swigregister(HLRBRep_EdgeFaceTool)

def HLRBRep_EdgeFaceTool_CurvatureValue(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    F: Standard_Address
    U: float
    V: float
    Tg: gp_Dir

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_EdgeFaceTool_CurvatureValue(*args)

def HLRBRep_EdgeFaceTool_UVPoint(*args):
    r"""
    Return true if u and v are found.

    Parameters
    ----------
    Par: float
    E: Standard_Address
    F: Standard_Address

    Returns
    -------
    U: float
    V: float

    """
    return _HLRBRep.HLRBRep_EdgeFaceTool_UVPoint(*args)

class HLRBRep_EdgeIList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AddInterference(*args):
        r"""
        Add the interference <i> to the list <il>.

        Parameters
        ----------
        IL: HLRAlgo_InterferenceList
        I: HLRAlgo_Interference
        T: HLRBRep_EdgeInterferenceTool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeIList_AddInterference(*args)

    @staticmethod
    def ProcessComplex(*args):
        r"""
        Process complex transitions on the list il.

        Parameters
        ----------
        IL: HLRAlgo_InterferenceList
        T: HLRBRep_EdgeInterferenceTool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeIList_ProcessComplex(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_EdgeIList_swiginit(self, _HLRBRep.new_HLRBRep_EdgeIList())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeIList

# Register HLRBRep_EdgeIList in _HLRBRep:
_HLRBRep.HLRBRep_EdgeIList_swigregister(HLRBRep_EdgeIList)

def HLRBRep_EdgeIList_AddInterference(*args):
    r"""
    Add the interference <i> to the list <il>.

    Parameters
    ----------
    IL: HLRAlgo_InterferenceList
    I: HLRAlgo_Interference
    T: HLRBRep_EdgeInterferenceTool

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_EdgeIList_AddInterference(*args)

def HLRBRep_EdgeIList_ProcessComplex(*args):
    r"""
    Process complex transitions on the list il.

    Parameters
    ----------
    IL: HLRAlgo_InterferenceList
    T: HLRBRep_EdgeInterferenceTool

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_EdgeIList_ProcessComplex(*args)

class HLRBRep_EdgeInterferenceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        DS: HLRBRep_Data

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_EdgeInterferenceTool_swiginit(self, _HLRBRep.new_HLRBRep_EdgeInterferenceTool(*args))

    def CurrentOrientation(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_CurrentOrientation(self, *args)

    def CurrentParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_CurrentParameter(self, *args)

    def CurrentVertex(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRAlgo_Intersection

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_CurrentVertex(self, *args)

    def EdgeGeometry(self, *args):
        r"""
        Returns local geometric description of the edge at parameter <para>. see method reset of class edgefacetransition from topcnx for other arguments.

        Parameters
        ----------
        Param: float
        Tgt: gp_Dir
        Nrm: gp_Dir

        Returns
        -------
        Curv: float

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_EdgeGeometry(self, *args)

    def InitVertices(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_InitVertices(self, *args)

    def InterferenceBoundaryGeometry(self, *args):
        r"""
        Returns the geometry of the boundary at the interference <i>. see the addinterference method of the class edgefacetransition from topcnx for the other arguments.

        Parameters
        ----------
        I: HLRAlgo_Interference
        Tang: gp_Dir
        Norm: gp_Dir

        Returns
        -------
        Curv: float

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_InterferenceBoundaryGeometry(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_IsPeriodic(self, *args)

    def LoadEdge(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_LoadEdge(self, *args)

    def MoreVertices(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_MoreVertices(self, *args)

    def NextVertex(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_NextVertex(self, *args)

    def ParameterOfInterference(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: HLRAlgo_Interference

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_ParameterOfInterference(self, *args)

    def SameInterferences(self, *args):
        r"""
        True if the two interferences are on the same geometric locus.

        Parameters
        ----------
        I1: HLRAlgo_Interference
        I2: HLRAlgo_Interference

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_SameInterferences(self, *args)

    def SameVertexAndInterference(self, *args):
        r"""
        True if the interference and the current vertex are on the same geometric locus.

        Parameters
        ----------
        I: HLRAlgo_Interference

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_EdgeInterferenceTool_SameVertexAndInterference(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_EdgeInterferenceTool

# Register HLRBRep_EdgeInterferenceTool in _HLRBRep:
_HLRBRep.HLRBRep_EdgeInterferenceTool_swigregister(HLRBRep_EdgeInterferenceTool)

class HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        C1: Standard_Address
        C2: Standard_Address
        Tol: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter(*args))

    def AnErrorOccurred(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_AnErrorOccurred(self, *args)

    def NbRoots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_NbRoots(self, *args)

    def Perform(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Poly1: HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter
        Poly2: HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter

        Returns
        -------
        NumSegOn1: int
        NumSegOn2: int
        ParamOnSeg1: float
        ParamOnSeg2: float
        No available documentation.

        Parameters
        ----------
        Uo: float
        Vo: float
        UInf: float
        VInf: float
        USup: float
        VSup: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_Perform(self, *args)

    def Roots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        U: float
        V: float

        """
        return _HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_Roots(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter

# Register HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter_swigregister(HLRBRep_ExactIntersectionPointOfTheIntPCurvePCurveOfCInter)

class HLRBRep_FaceData(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_FaceData_swiginit(self, _HLRBRep.new_HLRBRep_FaceData(*args))

    def Back(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Back(self, *args)

    def Closed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Closed(self, *args)

    def Cone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Cone(self, *args)

    def Cut(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Cut(self, *args)

    def Cylinder(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Cylinder(self, *args)

    def Geometry(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRBRep_Surface

        """
        return _HLRBRep.HLRBRep_FaceData_Geometry(self, *args)

    def Hiding(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Hiding(self, *args)

    def Orientation(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopAbs_Orientation
        No available documentation.

        Parameters
        ----------
        O: TopAbs_Orientation

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Orientation(self, *args)

    def Plane(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Plane(self, *args)

    def Selected(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Selected(self, *args)

    def Set(self, *args):
        r"""
        <or> is the orientation of the face. <cl> is true if the face belongs to a closed volume. <nw> is the number of wires ( or block of edges ) of the face.

        Parameters
        ----------
        FG: TopoDS_Face
        Or: TopAbs_Orientation
        Cl: bool
        NW: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Set(self, *args)

    def SetWEdge(self, *args):
        r"""
        Set the edge number <ewi> of the wire <wi>.

        Parameters
        ----------
        WI: int
        EWI: int
        EI: int
        Or: TopAbs_Orientation
        OutL: bool
        Inte: bool
        Dble: bool
        IsoL: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_SetWEdge(self, *args)

    def SetWire(self, *args):
        r"""
        Set <ne> the number of edges of the wire number <wi>.

        Parameters
        ----------
        WI: int
        NE: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_SetWire(self, *args)

    def Side(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Side(self, *args)

    def Simple(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Simple(self, *args)

    def Size(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float
        No available documentation.

        Parameters
        ----------
        S: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Size(self, *args)

    def Sphere(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Sphere(self, *args)

    def Tolerance(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_FaceData_Tolerance(self, *args)

    def Torus(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_Torus(self, *args)

    def Wires(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<HLRAlgo_WiresBlock>

        """
        return _HLRBRep.HLRBRep_FaceData_Wires(self, *args)

    def WithOutL(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceData_WithOutL(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_FaceData

# Register HLRBRep_FaceData in _HLRBRep:
_HLRBRep.HLRBRep_FaceData_swigregister(HLRBRep_FaceData)

class HLRBRep_FaceIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_FaceIterator_swiginit(self, _HLRBRep.new_HLRBRep_FaceIterator(*args))

    def BeginningOfWire(self, *args):
        r"""
        Returns true if the current edge is the first of a wire.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_FaceIterator_BeginningOfWire(self, *args)

    def Double(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_FaceIterator_Double(self, *args)

    def Edge(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_FaceIterator_Edge(self, *args)

    def EndOfWire(self, *args):
        r"""
        Returns true if the current edge is the last of a wire.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_FaceIterator_EndOfWire(self, *args)

    def InitEdge(self, *args):
        r"""
        Begin an exploration of the edges of the face <fd>.

        Parameters
        ----------
        fd: HLRBRep_FaceData

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceIterator_InitEdge(self, *args)

    def Internal(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_FaceIterator_Internal(self, *args)

    def IsoLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_FaceIterator_IsoLine(self, *args)

    def MoreEdge(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_FaceIterator_MoreEdge(self, *args)

    def NextEdge(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceIterator_NextEdge(self, *args)

    def Orientation(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRBRep.HLRBRep_FaceIterator_Orientation(self, *args)

    def OutLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_FaceIterator_OutLine(self, *args)

    def SkipWire(self, *args):
        r"""
        Skip the current wire in the exploration.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_FaceIterator_SkipWire(self, *args)

    def Wire(self, *args):
        r"""
        Returns the edges of the current wire.

        Returns
        -------
        opencascade::handle<HLRAlgo_EdgesBlock>

        """
        return _HLRBRep.HLRBRep_FaceIterator_Wire(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_FaceIterator

# Register HLRBRep_FaceIterator in _HLRBRep:
_HLRBRep.HLRBRep_FaceIterator_swigregister(HLRBRep_FaceIterator)

class HLRBRep_HLRToShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs a framework for filtering the results of the hlrbrep_algo algorithm, a. use the extraction filters to obtain the results you want for a.

        Parameters
        ----------
        A: HLRBRep_Algo

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_HLRToShape_swiginit(self, _HLRBRep.new_HLRBRep_HLRToShape(*args))

    def CompoundOfEdges(self, *args):
        r"""
        Returns compound of resulting edges of required type and visibility, taking into account the kind of space (2d or 3d).

        Parameters
        ----------
        type: HLRBRep_TypeOfResultingEdge
        visible: bool
        In3d: bool

        Returns
        -------
        TopoDS_Shape
        For specified shape returns compound of resulting edges of required type and visibility, taking into account the kind of space (2d or 3d).

        Parameters
        ----------
        S: TopoDS_Shape
        type: HLRBRep_TypeOfResultingEdge
        visible: bool
        In3d: bool

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_CompoundOfEdges(self, *args)

    def HCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_HCompound(self, *args)

    def IsoLineHCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_IsoLineHCompound(self, *args)

    def IsoLineVCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_IsoLineVCompound(self, *args)

    def OutLineHCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_OutLineHCompound(self, *args)

    def OutLineVCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_OutLineVCompound(self, *args)

    def OutLineVCompound3d(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_OutLineVCompound3d(self, *args)

    def Rg1LineHCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_Rg1LineHCompound(self, *args)

    def Rg1LineVCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_Rg1LineVCompound(self, *args)

    def RgNLineHCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_RgNLineHCompound(self, *args)

    def RgNLineVCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_RgNLineVCompound(self, *args)

    def VCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_HLRToShape_VCompound(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_HLRToShape

# Register HLRBRep_HLRToShape in _HLRBRep:
_HLRBRep.HLRBRep_HLRToShape_swigregister(HLRBRep_HLRToShape)

class HLRBRep_Hider(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a hider processing the set of edges and hiding faces described by <ds>. stores the hidden parts in <ds>.

        Parameters
        ----------
        DS: HLRBRep_Data

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_Hider_swiginit(self, _HLRBRep.new_HLRBRep_Hider(*args))

    def Hide(self, *args):
        r"""
        Removes from the edges, the parts hidden by the hiding face number <fi>.

        Parameters
        ----------
        FI: int
        MST: BRepTopAdaptor_MapOfShapeTool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Hider_Hide(self, *args)

    def OwnHiding(self, *args):
        r"""
        Own hiding the side face number <fi>.

        Parameters
        ----------
        FI: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Hider_OwnHiding(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Hider

# Register HLRBRep_Hider in _HLRBRep:
_HLRBRep.HLRBRep_Hider_swigregister(HLRBRep_Hider)

class HLRBRep_IntConicCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor.

        Returns
        -------
        None
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between the main branch of an hyperbola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_IntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_IntConicCurveOfCInter(*args))

    def Perform(self, *args):
        r"""
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between the main branch of an hyperbola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_IntConicCurveOfCInter_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_IntConicCurveOfCInter

# Register HLRBRep_IntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_IntConicCurveOfCInter_swigregister(HLRBRep_IntConicCurveOfCInter)

class HLRBRep_InterCSurf(OCC.Core.IntCurveSurface.IntCurveSurface_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_InterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_InterCSurf(*args))

    def Perform(self, *args):
        r"""
        Compute the intersection between the curve and the surface.

        Parameters
        ----------
        Curve: gp_Lin
        Surface: Standard_Address

        Returns
        -------
        None
        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon : <polygon> is given.

        Parameters
        ----------
        Curve: gp_Lin
        Polygon: HLRBRep_ThePolygonOfInterCSurf
        Surface: Standard_Address

        Returns
        -------
        None
        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon : <polygon> is given. the surface is also sampled and <polyhedron> is given.

        Parameters
        ----------
        Curve: gp_Lin
        ThePolygon: HLRBRep_ThePolygonOfInterCSurf
        Surface: Standard_Address
        Polyhedron: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None
        Compute the intersection between the curve and the surface. the curve is already sampled and its polygon : <polygon> is given. the surface is also sampled and <polyhedron> is given.

        Parameters
        ----------
        Curve: gp_Lin
        ThePolygon: HLRBRep_ThePolygonOfInterCSurf
        Surface: Standard_Address
        Polyhedron: HLRBRep_ThePolyhedronOfInterCSurf
        BndBSB: Bnd_BoundSortBox

        Returns
        -------
        None
        Compute the intersection between the curve and the surface. the surface is already sampled and its polyhedron : <polyhedron> is given.

        Parameters
        ----------
        Curve: gp_Lin
        Surface: Standard_Address
        Polyhedron: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InterCSurf_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_InterCSurf

# Register HLRBRep_InterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_InterCSurf_swigregister(HLRBRep_InterCSurf)

class HLRBRep_InternalAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        A: HLRBRep_InternalAlgo

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_InternalAlgo_swiginit(self, _HLRBRep.new_HLRBRep_InternalAlgo(*args))

    def DataStructure(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<HLRBRep_Data>

        """
        return _HLRBRep.HLRBRep_InternalAlgo_DataStructure(self, *args)

    def Debug(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        deb: bool

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Debug(self, *args)

    def Hide(self, *args):
        r"""
        Hide all the datastructure.

        Returns
        -------
        None
        Hide the shape <s> by itself.

        Parameters
        ----------
        I: int

        Returns
        -------
        None
        Hide the shape <s1> by the shape <s2>.

        Parameters
        ----------
        I: int
        J: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Hide(self, *args)

    def HideAll(self, *args):
        r"""
        Set to hide all the edges.

        Returns
        -------
        None
        Set to hide all the edges of the shape <s>.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_HideAll(self, *args)

    def Index(self, *args):
        r"""
        Return the index of the shape <s> and return 0 if the shape <s> is not found.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Index(self, *args)

    def InitEdgeStatus(self, *args):
        r"""
        Init the status of the selected edges depending of the back faces of a closed shell.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_InitEdgeStatus(self, *args)

    def Load(self, *args):
        r"""
        Add the shape <s>.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        SData: Standard_Transient
        nbIso: int,optional
        	default value is 0

        Returns
        -------
        None
        Add the shape <s>.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        nbIso: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Load(self, *args)

    def NbShapes(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_InternalAlgo_NbShapes(self, *args)

    def PartialHide(self, *args):
        r"""
        Own hiding of all the shapes of the datastructure without hiding by each other.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_PartialHide(self, *args)

    def Projector(self, *args):
        r"""
        Set the projector.

        Parameters
        ----------
        P: HLRAlgo_Projector

        Returns
        -------
        None
        Set the projector.

        Returns
        -------
        HLRAlgo_Projector

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Projector(self, *args)

    def Remove(self, *args):
        r"""
        Remove the shape of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Remove(self, *args)

    def Select(self, *args):
        r"""
        Select all the datastructure.

        Returns
        -------
        None
        Select only the shape of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Select(self, *args)

    def SelectEdge(self, *args):
        r"""
        Select only the edges of the shape <s>.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_SelectEdge(self, *args)

    def SelectFace(self, *args):
        r"""
        Select only the faces of the shape <s>.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_SelectFace(self, *args)

    def SeqOfShapeBounds(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRBRep_SeqOfShapeBounds

        """
        return _HLRBRep.HLRBRep_InternalAlgo_SeqOfShapeBounds(self, *args)

    def ShapeBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        HLRBRep_ShapeBounds

        """
        return _HLRBRep.HLRBRep_InternalAlgo_ShapeBounds(self, *args)

    def ShapeData(self, *args):
        r"""
        Change the shape data of the shape of index <i>.

        Parameters
        ----------
        I: int
        SData: Standard_Transient

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_ShapeData(self, *args)

    def ShowAll(self, *args):
        r"""
        Set to visible all the edges.

        Returns
        -------
        None
        Set to visible all the edges of the shape <s>.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_ShowAll(self, *args)

    def Update(self, *args):
        r"""
        Update the datastructure.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_InternalAlgo_Update(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_InternalAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_InternalAlgo

# Register HLRBRep_InternalAlgo in _HLRBRep:
_HLRBRep.HLRBRep_InternalAlgo_swigregister(HLRBRep_InternalAlgo)

class HLRBRep_Intersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_Intersector_swiginit(self, _HLRBRep.new_HLRBRep_Intersector(*args))

    def CSPoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        N: int

        Returns
        -------
        IntCurveSurface_IntersectionPoint

        """
        return _HLRBRep.HLRBRep_Intersector_CSPoint(self, *args)

    def CSSegment(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        N: int

        Returns
        -------
        IntCurveSurface_IntersectionSegment

        """
        return _HLRBRep.HLRBRep_Intersector_CSSegment(self, *args)

    def Destroy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Intersector_Destroy(self, *args)

    def IsDone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_Intersector_IsDone(self, *args)

    def Load(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        A: Standard_Address

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Intersector_Load(self, *args)

    def NbPoints(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Intersector_NbPoints(self, *args)

    def NbSegments(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Intersector_NbSegments(self, *args)

    def Perform(self, *args):
        r"""
        Performs the auto intersection of an edge. the edge domain is cut at start with da1*(b-a) and at end with db1*(b-a).

        Parameters
        ----------
        A1: Standard_Address
        da1: float
        db1: float

        Returns
        -------
        None
        Performs the intersection between the two edges. the edges domains are cut at start with da*(b-a) and at end with db*(b-a).

        Parameters
        ----------
        nA: int
        A1: Standard_Address
        da1: float
        db1: float
        nB: int
        A2: Standard_Address
        da2: float
        db2: float
        NoBound: bool

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        L: gp_Lin
        P: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Intersector_Perform(self, *args)

    def Point(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        N: int

        Returns
        -------
        IntRes2d_IntersectionPoint

        """
        return _HLRBRep.HLRBRep_Intersector_Point(self, *args)

    def Segment(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        N: int

        Returns
        -------
        IntRes2d_IntersectionSegment

        """
        return _HLRBRep.HLRBRep_Intersector_Segment(self, *args)

    def SimulateOnePoint(self, *args):
        r"""
        Create a single intersectionpoint (u on a1) (v on a2) the point is middle on both curves.

        Parameters
        ----------
        A1: Standard_Address
        U: float
        A2: Standard_Address
        V: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Intersector_SimulateOnePoint(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Intersector

# Register HLRBRep_Intersector in _HLRBRep:
_HLRBRep.HLRBRep_Intersector_swigregister(HLRBRep_Intersector)

class HLRBRep_LineTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BSpline(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _HLRBRep.HLRBRep_LineTool_BSpline(*args)

    @staticmethod
    def Bezier(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _HLRBRep.HLRBRep_LineTool_Bezier(*args)

    @staticmethod
    def Circle(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        gp_Circ

        """
        return _HLRBRep.HLRBRep_LineTool_Circle(*args)

    @staticmethod
    def Continuity(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        GeomAbs_Shape

        """
        return _HLRBRep.HLRBRep_LineTool_Continuity(*args)

    @staticmethod
    def D0(*args):
        r"""
        Computes the point of parameter u on the line.

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""
        Computes the point of parameter u on the line with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        C: gp_Lin
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        C: gp_Lin
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_LineTool_DN(*args)

    @staticmethod
    def Degree(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_LineTool_Degree(*args)

    @staticmethod
    def Ellipse(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        gp_Elips

        """
        return _HLRBRep.HLRBRep_LineTool_Ellipse(*args)

    @staticmethod
    def FirstParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_LineTool_FirstParameter(*args)

    @staticmethod
    def GetType(*args):
        r"""
        Returns the type of the line in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        GeomAbs_CurveType

        """
        return _HLRBRep.HLRBRep_LineTool_GetType(*args)

    @staticmethod
    def Hyperbola(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        gp_Hypr

        """
        return _HLRBRep.HLRBRep_LineTool_Hyperbola(*args)

    @staticmethod
    def IntervalContinuity(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        GeomAbs_Shape

        """
        return _HLRBRep.HLRBRep_LineTool_IntervalContinuity(*args)

    @staticmethod
    def IntervalFirst(*args):
        r"""
        Returns the first parameter of the current interval.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_LineTool_IntervalFirst(*args)

    @staticmethod
    def IntervalLast(*args):
        r"""
        Returns the last parameter of the current interval.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_LineTool_IntervalLast(*args)

    @staticmethod
    def Intervals(*args):
        r"""
        Sets the current working interval.

        Parameters
        ----------
        C: gp_Lin
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_Intervals(*args)

    @staticmethod
    def IsClosed(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_LineTool_IsClosed(*args)

    @staticmethod
    def IsPeriodic(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_LineTool_IsPeriodic(*args)

    @staticmethod
    def IsRational(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_LineTool_IsRational(*args)

    @staticmethod
    def KnotsAndMultiplicities(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin
        TK: TColStd_Array1OfReal
        TM: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_KnotsAndMultiplicities(*args)

    @staticmethod
    def LastParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_LineTool_LastParameter(*args)

    @staticmethod
    def Line(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        gp_Lin

        """
        return _HLRBRep.HLRBRep_LineTool_Line(*args)

    @staticmethod
    def NbIntervals(*args):
        r"""
        If necessary, breaks the line in intervals of continuity <s>. and returns the number of intervals.

        Parameters
        ----------
        C: gp_Lin
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_LineTool_NbIntervals(*args)

    @staticmethod
    def NbKnots(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_LineTool_NbKnots(*args)

    @staticmethod
    def NbPoles(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_LineTool_NbPoles(*args)

    @staticmethod
    def NbSamples(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin
        U0: float
        U1: float

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_LineTool_NbSamples(*args)

    @staticmethod
    def Parabola(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        gp_Parab

        """
        return _HLRBRep.HLRBRep_LineTool_Parabola(*args)

    @staticmethod
    def Period(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_LineTool_Period(*args)

    @staticmethod
    def Poles(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin
        TP: TColgp_Array1OfPnt

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_Poles(*args)

    @staticmethod
    def PolesAndWeights(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin
        TP: TColgp_Array1OfPnt
        TW: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_PolesAndWeights(*args)

    @staticmethod
    def Resolution(*args):
        r"""
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        C: gp_Lin
        R3d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_LineTool_Resolution(*args)

    @staticmethod
    def SamplePars(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: gp_Lin
        U0: float
        U1: float
        Defl: float
        NbMin: int
        Pars: TColStd_HArray1OfReal

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_LineTool_SamplePars(*args)

    @staticmethod
    def Value(*args):
        r"""
        Computes the point of parameter u on the line.

        Parameters
        ----------
        C: gp_Lin
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_LineTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_LineTool_swiginit(self, _HLRBRep.new_HLRBRep_LineTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_LineTool

# Register HLRBRep_LineTool in _HLRBRep:
_HLRBRep.HLRBRep_LineTool_swigregister(HLRBRep_LineTool)

def HLRBRep_LineTool_BSpline(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    opencascade::handle<Geom_BSplineCurve>

    """
    return _HLRBRep.HLRBRep_LineTool_BSpline(*args)

def HLRBRep_LineTool_Bezier(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    opencascade::handle<Geom_BezierCurve>

    """
    return _HLRBRep.HLRBRep_LineTool_Bezier(*args)

def HLRBRep_LineTool_Circle(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    gp_Circ

    """
    return _HLRBRep.HLRBRep_LineTool_Circle(*args)

def HLRBRep_LineTool_Continuity(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    GeomAbs_Shape

    """
    return _HLRBRep.HLRBRep_LineTool_Continuity(*args)

def HLRBRep_LineTool_D0(*args):
    r"""
    Computes the point of parameter u on the line.

    Parameters
    ----------
    C: gp_Lin
    U: float
    P: gp_Pnt

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_D0(*args)

def HLRBRep_LineTool_D1(*args):
    r"""
    Computes the point of parameter u on the line with its first derivative. raised if the continuity of the current interval is not c1.

    Parameters
    ----------
    C: gp_Lin
    U: float
    P: gp_Pnt
    V: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_D1(*args)

def HLRBRep_LineTool_D2(*args):
    r"""
    Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

    Parameters
    ----------
    C: gp_Lin
    U: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_D2(*args)

def HLRBRep_LineTool_D3(*args):
    r"""
    Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

    Parameters
    ----------
    C: gp_Lin
    U: float
    P: gp_Pnt
    V1: gp_Vec
    V2: gp_Vec
    V3: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_D3(*args)

def HLRBRep_LineTool_DN(*args):
    r"""
    The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

    Parameters
    ----------
    C: gp_Lin
    U: float
    N: int

    Returns
    -------
    gp_Vec

    """
    return _HLRBRep.HLRBRep_LineTool_DN(*args)

def HLRBRep_LineTool_Degree(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_LineTool_Degree(*args)

def HLRBRep_LineTool_Ellipse(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    gp_Elips

    """
    return _HLRBRep.HLRBRep_LineTool_Ellipse(*args)

def HLRBRep_LineTool_FirstParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_LineTool_FirstParameter(*args)

def HLRBRep_LineTool_GetType(*args):
    r"""
    Returns the type of the line in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    GeomAbs_CurveType

    """
    return _HLRBRep.HLRBRep_LineTool_GetType(*args)

def HLRBRep_LineTool_Hyperbola(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    gp_Hypr

    """
    return _HLRBRep.HLRBRep_LineTool_Hyperbola(*args)

def HLRBRep_LineTool_IntervalContinuity(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    GeomAbs_Shape

    """
    return _HLRBRep.HLRBRep_LineTool_IntervalContinuity(*args)

def HLRBRep_LineTool_IntervalFirst(*args):
    r"""
    Returns the first parameter of the current interval.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_LineTool_IntervalFirst(*args)

def HLRBRep_LineTool_IntervalLast(*args):
    r"""
    Returns the last parameter of the current interval.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_LineTool_IntervalLast(*args)

def HLRBRep_LineTool_Intervals(*args):
    r"""
    Sets the current working interval.

    Parameters
    ----------
    C: gp_Lin
    T: TColStd_Array1OfReal
    Sh: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_Intervals(*args)

def HLRBRep_LineTool_IsClosed(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_LineTool_IsClosed(*args)

def HLRBRep_LineTool_IsPeriodic(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_LineTool_IsPeriodic(*args)

def HLRBRep_LineTool_IsRational(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_LineTool_IsRational(*args)

def HLRBRep_LineTool_KnotsAndMultiplicities(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin
    TK: TColStd_Array1OfReal
    TM: TColStd_Array1OfInteger

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_KnotsAndMultiplicities(*args)

def HLRBRep_LineTool_LastParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_LineTool_LastParameter(*args)

def HLRBRep_LineTool_Line(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    gp_Lin

    """
    return _HLRBRep.HLRBRep_LineTool_Line(*args)

def HLRBRep_LineTool_NbIntervals(*args):
    r"""
    If necessary, breaks the line in intervals of continuity <s>. and returns the number of intervals.

    Parameters
    ----------
    C: gp_Lin
    S: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_LineTool_NbIntervals(*args)

def HLRBRep_LineTool_NbKnots(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_LineTool_NbKnots(*args)

def HLRBRep_LineTool_NbPoles(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_LineTool_NbPoles(*args)

def HLRBRep_LineTool_NbSamples(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin
    U0: float
    U1: float

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_LineTool_NbSamples(*args)

def HLRBRep_LineTool_Parabola(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    gp_Parab

    """
    return _HLRBRep.HLRBRep_LineTool_Parabola(*args)

def HLRBRep_LineTool_Period(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_LineTool_Period(*args)

def HLRBRep_LineTool_Poles(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin
    TP: TColgp_Array1OfPnt

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_Poles(*args)

def HLRBRep_LineTool_PolesAndWeights(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin
    TP: TColgp_Array1OfPnt
    TW: TColStd_Array1OfReal

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_PolesAndWeights(*args)

def HLRBRep_LineTool_Resolution(*args):
    r"""
    Returns the parametric resolution corresponding to the real space resolution <r3d>.

    Parameters
    ----------
    C: gp_Lin
    R3d: float

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_LineTool_Resolution(*args)

def HLRBRep_LineTool_SamplePars(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    C: gp_Lin
    U0: float
    U1: float
    Defl: float
    NbMin: int
    Pars: TColStd_HArray1OfReal

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_LineTool_SamplePars(*args)

def HLRBRep_LineTool_Value(*args):
    r"""
    Computes the point of parameter u on the line.

    Parameters
    ----------
    C: gp_Lin
    U: float

    Returns
    -------
    gp_Pnt

    """
    return _HLRBRep.HLRBRep_LineTool_Value(*args)

class HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructor of the class.

        Parameters
        ----------
        IT: IntCurve_IConicTool
        PC: Standard_Address

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter(*args))

    def Derivative(self, *args):
        r"""
        Computes the derivative of the previous function at parameter param.

        Parameters
        ----------
        Param: float

        Returns
        -------
        D: float

        """
        return _HLRBRep.HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter_Derivative(self, *args)

    def Value(self, *args):
        r"""
        Computes the value of the signed distance between the implicit curve and the point at parameter param on the parametrised curve.

        Parameters
        ----------
        Param: float

        Returns
        -------
        F: float

        """
        return _HLRBRep.HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter_Value(self, *args)

    def Values(self, *args):
        r"""
        Computes the value and the derivative of the function.

        Parameters
        ----------
        Param: float

        Returns
        -------
        F: float
        D: float

        """
        return _HLRBRep.HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter

# Register HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter_swigregister(HLRBRep_MyImpParToolOfTheIntersectorOfTheIntConicCurveOfCInter)

class HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        C: Standard_Address

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter(*args))

    def Derivative(self, *args):
        r"""
        Calculation of f'(u).

        Parameters
        ----------
        U: float

        Returns
        -------
        DF: float

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_Derivative(self, *args)

    def GetStateNumber(self, *args):
        r"""
        Save the found extremum.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_GetStateNumber(self, *args)

    def Initialize(self, *args):
        r"""
        Sets the field mycurve of the function.

        Parameters
        ----------
        C: Standard_Address

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_Initialize(self, *args)

    def IsMin(self, *args):
        r"""
        Shows if the nth distance is a minimum.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_IsMin(self, *args)

    def NbExt(self, *args):
        r"""
        Return the number of found extrema.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_NbExt(self, *args)

    def Point(self, *args):
        r"""
        Returns the nth extremum.

        Parameters
        ----------
        N: int

        Returns
        -------
        Extrema_POnCurv2d

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_Point(self, *args)

    def SearchOfTolerance(self, *args):
        r"""
        Computes a tol value. if 1st derivative of curve |d1|<tol, it is considered d1=0.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SearchOfTolerance(self, *args)

    def SetPoint(self, *args):
        r"""
        Sets the field p of the function.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SetPoint(self, *args)

    def SquareDistance(self, *args):
        r"""
        Returns the nth distance.

        Parameters
        ----------
        N: int

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SquareDistance(self, *args)

    def SubIntervalInitialize(self, *args):
        r"""
        Determines boundaries of subinterval for find of root.

        Parameters
        ----------
        theUfirst: float
        theUlast: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_SubIntervalInitialize(self, *args)

    def Value(self, *args):
        r"""
        Calculation of f(u).

        Parameters
        ----------
        U: float

        Returns
        -------
        F: float

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_Value(self, *args)

    def Values(self, *args):
        r"""
        Calculation of f(u) and f'(u).

        Parameters
        ----------
        U: float

        Returns
        -------
        F: float
        DF: float

        """
        return _HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter

# Register HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter_swigregister(HLRBRep_PCLocFOfTheLocateExtPCOfTheProjPCurOfCInter)

class HLRBRep_PolyAlgo(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an empty framework for the calculation of the visible and hidden lines of a shape in a projection. use the functions: - projector to define the point of view - load to select the shape or shapes to be visualized - update to compute the visible and hidden lines of the shape. warning the shape or shapes to be visualized must have already been triangulated.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        A: HLRBRep_PolyAlgo

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_PolyAlgo_swiginit(self, _HLRBRep.new_HLRBRep_PolyAlgo(*args))

    def Algo(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<HLRAlgo_PolyAlgo>

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Algo(self, *args)

    def Debug(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        theDebug: bool

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Debug(self, *args)

    def Hide(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        status: HLRAlgo_EdgeStatus
        S: TopoDS_Shape

        Returns
        -------
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Hide(self, *args)

    def Index(self, *args):
        r"""
        Return the index of the shape <s> and return 0 if the shape <s> is not found.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Index(self, *args)

    def InitHide(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_InitHide(self, *args)

    def InitShow(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_InitShow(self, *args)

    def Load(self, *args):
        r"""
        Loads the shape s into this framework. warning s must have already been triangulated.

        Parameters
        ----------
        theShape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Load(self, *args)

    def MoreHide(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_PolyAlgo_MoreHide(self, *args)

    def MoreShow(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_PolyAlgo_MoreShow(self, *args)

    def NbShapes(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_PolyAlgo_NbShapes(self, *args)

    def NextHide(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_NextHide(self, *args)

    def NextShow(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_NextShow(self, *args)

    def OutLinedShape(self, *args):
        r"""
        Make a shape with the internal outlines in each face.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyAlgo_OutLinedShape(self, *args)

    def Projector(self, *args):
        r"""
        Sets the parameters of the view for this framework. these parameters are defined by an hlralgo_projector object, which is returned by the projector function on a prs3d_projector object.

        Returns
        -------
        HLRAlgo_Projector
        No available documentation.

        Parameters
        ----------
        theProj: HLRAlgo_Projector

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Projector(self, *args)

    def Remove(self, *args):
        r"""
        Remove the shape of index <i>.

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Remove(self, *args)

    def Shape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Shape(self, *args)

    def Show(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        reg1: bool
        regn: bool
        outl: bool
        intl: bool

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Show(self, *args)

    def TolAngular(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float
        No available documentation.

        Parameters
        ----------
        theTol: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_TolAngular(self, *args)

    def TolCoef(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float
        No available documentation.

        Parameters
        ----------
        theTol: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_TolCoef(self, *args)

    def Update(self, *args):
        r"""
        Launches calculation of outlines of the shape visualized by this framework. used after setting the point of view and defining the shape or shapes to be visualized.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyAlgo_Update(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_PolyAlgo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_PolyAlgo

# Register HLRBRep_PolyAlgo in _HLRBRep:
_HLRBRep.HLRBRep_PolyAlgo_swigregister(HLRBRep_PolyAlgo)

class HLRBRep_PolyHLRToShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs a framework for filtering the results of the hlrbrep_algo algorithm, a. use the extraction filters to obtain the results you want for a.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_PolyHLRToShape_swiginit(self, _HLRBRep.new_HLRBRep_PolyHLRToShape(*args))

    def HCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_HCompound(self, *args)

    def Hide(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Hide(self, *args)

    def OutLineHCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        Sets the extraction filter for hidden outlines. hidden outlines occur, for instance, in tori. in this case, the inner outlines of the torus seen on its side are hidden.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_OutLineHCompound(self, *args)

    def OutLineVCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        Sets the extraction filter for visible outlines.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_OutLineVCompound(self, *args)

    def Rg1LineHCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        Sets the extraction filter for hidden smooth edges.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Rg1LineHCompound(self, *args)

    def Rg1LineVCompound(self, *args):
        r"""
        Sets the extraction filter for visible smooth edges.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Rg1LineVCompound(self, *args)

    def RgNLineHCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        Sets the extraction filter for hidden sewn edges.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_RgNLineHCompound(self, *args)

    def RgNLineVCompound(self, *args):
        r"""
        Sets the extraction filter for visible sewn edges.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_RgNLineVCompound(self, *args)

    def Show(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Show(self, *args)

    def Update(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        A: HLRBRep_PolyAlgo

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_Update(self, *args)

    def VCompound(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _HLRBRep.HLRBRep_PolyHLRToShape_VCompound(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_PolyHLRToShape

# Register HLRBRep_PolyHLRToShape in _HLRBRep:
_HLRBRep.HLRBRep_PolyHLRToShape_swigregister(HLRBRep_PolyHLRToShape)

class HLRBRep_SLProps(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Initializes the local properties of the surface <s> for the parameter values (<u>, <v>). the current point and the derivatives are computed at the same time, which allows an optimization of the computation time. <n> indicates the maximum number of derivations to be done (0, 1, or 2). for example, to compute only the tangent, n should be equal to 1. <resolution> is the linear tolerance (it is used to test if a vector is null).

        Parameters
        ----------
        S: Standard_Address
        U: float
        V: float
        N: int
        Resolution: float

        Returns
        -------
        None
        Idem as previous constructor but without setting the value of parameters <u> and <v>.

        Parameters
        ----------
        S: Standard_Address
        N: int
        Resolution: float

        Returns
        -------
        None
        Idem as previous constructor but without setting the value of parameters <u> and <v> and the surface. the surface can have an empty constructor.

        Parameters
        ----------
        N: int
        Resolution: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_SLProps_swiginit(self, _HLRBRep.new_HLRBRep_SLProps(*args))

    def CurvatureDirections(self, *args):
        r"""
        Returns the direction of the maximum and minimum curvature <maxd> and <mind>.

        Parameters
        ----------
        MaxD: gp_Dir
        MinD: gp_Dir

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLProps_CurvatureDirections(self, *args)

    def D1U(self, *args):
        r"""
        Returns the first u derivative. the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_SLProps_D1U(self, *args)

    def D1V(self, *args):
        r"""
        Returns the first v derivative. the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_SLProps_D1V(self, *args)

    def D2U(self, *args):
        r"""
        Returns the second u derivatives the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_SLProps_D2U(self, *args)

    def D2V(self, *args):
        r"""
        Returns the second v derivative. the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_SLProps_D2V(self, *args)

    def DUV(self, *args):
        r"""
        Returns the second uv cross-derivative. the derivative is computed if it has not been yet.

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_SLProps_DUV(self, *args)

    def GaussianCurvature(self, *args):
        r"""
        Returns the gaussian curvature.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SLProps_GaussianCurvature(self, *args)

    def IsCurvatureDefined(self, *args):
        r"""
        Returns true if the curvature is defined.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SLProps_IsCurvatureDefined(self, *args)

    def IsNormalDefined(self, *args):
        r"""
        Tells if the normal is defined.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SLProps_IsNormalDefined(self, *args)

    def IsTangentUDefined(self, *args):
        r"""
        Returns true if the u tangent is defined. for example, the tangent is not defined if the two first u derivatives are null.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SLProps_IsTangentUDefined(self, *args)

    def IsTangentVDefined(self, *args):
        r"""
        Returns if the v tangent is defined. for example, the tangent is not defined if the two first v derivatives are null.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SLProps_IsTangentVDefined(self, *args)

    def IsUmbilic(self, *args):
        r"""
        Returns true if the point is umbilic (i.e. if the curvature is constant).

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SLProps_IsUmbilic(self, *args)

    def MaxCurvature(self, *args):
        r"""
        Returns the maximum curvature.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SLProps_MaxCurvature(self, *args)

    def MeanCurvature(self, *args):
        r"""
        Returns the mean curvature.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SLProps_MeanCurvature(self, *args)

    def MinCurvature(self, *args):
        r"""
        Returns the minimum curvature.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SLProps_MinCurvature(self, *args)

    def Normal(self, *args):
        r"""
        Returns the normal direction.

        Returns
        -------
        gp_Dir

        """
        return _HLRBRep.HLRBRep_SLProps_Normal(self, *args)

    def SetParameters(self, *args):
        r"""
        Initializes the local properties of the surface s for the new parameter values (<u>, <v>).

        Parameters
        ----------
        U: float
        V: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLProps_SetParameters(self, *args)

    def SetSurface(self, *args):
        r"""
        Initializes the local properties of the surface s for the new surface.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLProps_SetSurface(self, *args)

    def TangentU(self, *args):
        r"""
        Returns the tangent direction <d> on the iso-v.

        Parameters
        ----------
        D: gp_Dir

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLProps_TangentU(self, *args)

    def TangentV(self, *args):
        r"""
        Returns the tangent direction <d> on the iso-v.

        Parameters
        ----------
        D: gp_Dir

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLProps_TangentV(self, *args)

    def Value(self, *args):
        r"""
        Returns the point.

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_SLProps_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SLProps

# Register HLRBRep_SLProps in _HLRBRep:
_HLRBRep.HLRBRep_SLProps_swigregister(HLRBRep_SLProps)

class HLRBRep_SLPropsATool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Bounds(*args):
        r"""
        Returns the bounds of the surface.

        Parameters
        ----------
        A: Standard_Address

        Returns
        -------
        U1: float
        V1: float
        U2: float
        V2: float

        """
        return _HLRBRep.HLRBRep_SLPropsATool_Bounds(*args)

    @staticmethod
    def Continuity(*args):
        r"""
        Returns the order of continuity of the surface <a>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable.

        Parameters
        ----------
        A: Standard_Address

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_SLPropsATool_Continuity(*args)

    @staticmethod
    def D1(*args):
        r"""
        Computes the point <p> and first derivative <d1*> of parameter <u> and <v> on the surface <a>.

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLPropsATool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""
        Computes the point <p>, the first derivative <d1*> and second derivative <d2*> of parameter <u> and <v> on the surface <a>.

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        DUV: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLPropsATool_D2(*args)

    @staticmethod
    def DN(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        Nu: int
        Nv: int

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_SLPropsATool_DN(*args)

    @staticmethod
    def Value(*args):
        r"""
        Computes the point <p> of 	parameter <u> and <v> on the surface <a>.

        Parameters
        ----------
        A: Standard_Address
        U: float
        V: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SLPropsATool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_SLPropsATool_swiginit(self, _HLRBRep.new_HLRBRep_SLPropsATool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SLPropsATool

# Register HLRBRep_SLPropsATool in _HLRBRep:
_HLRBRep.HLRBRep_SLPropsATool_swigregister(HLRBRep_SLPropsATool)

def HLRBRep_SLPropsATool_Bounds(*args):
    r"""
    Returns the bounds of the surface.

    Parameters
    ----------
    A: Standard_Address

    Returns
    -------
    U1: float
    V1: float
    U2: float
    V2: float

    """
    return _HLRBRep.HLRBRep_SLPropsATool_Bounds(*args)

def HLRBRep_SLPropsATool_Continuity(*args):
    r"""
    Returns the order of continuity of the surface <a>. returns 1 : first derivative only is computable returns 2 : first and second derivative only are computable.

    Parameters
    ----------
    A: Standard_Address

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_SLPropsATool_Continuity(*args)

def HLRBRep_SLPropsATool_D1(*args):
    r"""
    Computes the point <p> and first derivative <d1*> of parameter <u> and <v> on the surface <a>.

    Parameters
    ----------
    A: Standard_Address
    U: float
    V: float
    P: gp_Pnt
    D1U: gp_Vec
    D1V: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SLPropsATool_D1(*args)

def HLRBRep_SLPropsATool_D2(*args):
    r"""
    Computes the point <p>, the first derivative <d1*> and second derivative <d2*> of parameter <u> and <v> on the surface <a>.

    Parameters
    ----------
    A: Standard_Address
    U: float
    V: float
    P: gp_Pnt
    D1U: gp_Vec
    D1V: gp_Vec
    D2U: gp_Vec
    D2V: gp_Vec
    DUV: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SLPropsATool_D2(*args)

def HLRBRep_SLPropsATool_DN(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    A: Standard_Address
    U: float
    V: float
    Nu: int
    Nv: int

    Returns
    -------
    gp_Vec

    """
    return _HLRBRep.HLRBRep_SLPropsATool_DN(*args)

def HLRBRep_SLPropsATool_Value(*args):
    r"""
    Computes the point <p> of 	parameter <u> and <v> on the surface <a>.

    Parameters
    ----------
    A: Standard_Address
    U: float
    V: float
    P: gp_Pnt

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SLPropsATool_Value(*args)

class HLRBRep_ShapeBounds(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        SData: Standard_Transient
        nbIso: int
        V1: int
        V2: int
        E1: int
        E2: int
        F1: int
        F2: int

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        nbIso: int
        V1: int
        V2: int
        E1: int
        E2: int
        F1: int
        F2: int

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_ShapeBounds_swiginit(self, _HLRBRep.new_HLRBRep_ShapeBounds(*args))

    def Bounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        V1: int
        V2: int
        E1: int
        E2: int
        F1: int
        F2: int

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Bounds(self, *args)

    def MinMax(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        HLRAlgo_EdgesBlock::MinMaxIndices

        """
        return _HLRBRep.HLRBRep_ShapeBounds_MinMax(self, *args)

    def NbOfIso(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        nbIso: int

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_ShapeBounds_NbOfIso(self, *args)

    def Shape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        opencascade::handle<HLRTopoBRep_OutLiner>

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Shape(self, *args)

    def ShapeData(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        SD: Standard_Transient

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        opencascade::handle<Standard_Transient>

        """
        return _HLRBRep.HLRBRep_ShapeBounds_ShapeData(self, *args)

    def Sizes(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NV: int
        NE: int
        NF: int

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Sizes(self, *args)

    def Translate(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        NV: int
        NE: int
        NF: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ShapeBounds_Translate(self, *args)

    def UpdateMinMax(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theTotMinMax: HLRAlgo_EdgesBlock::MinMaxIndices

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ShapeBounds_UpdateMinMax(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ShapeBounds

# Register HLRBRep_ShapeBounds in _HLRBRep:
_HLRBRep.HLRBRep_ShapeBounds_swigregister(HLRBRep_ShapeBounds)

class HLRBRep_ShapeToHLR(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Load(*args):
        r"""
        Creates a datastructure containing the outliner <s> depending on the projector <p> and nbiso.

        Parameters
        ----------
        S: HLRTopoBRep_OutLiner
        P: HLRAlgo_Projector
        MST: BRepTopAdaptor_MapOfShapeTool
        nbIso: int,optional
        	default value is 0

        Returns
        -------
        opencascade::handle<HLRBRep_Data>

        """
        return _HLRBRep.HLRBRep_ShapeToHLR_Load(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_ShapeToHLR_swiginit(self, _HLRBRep.new_HLRBRep_ShapeToHLR())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ShapeToHLR

# Register HLRBRep_ShapeToHLR in _HLRBRep:
_HLRBRep.HLRBRep_ShapeToHLR_swigregister(HLRBRep_ShapeToHLR)

def HLRBRep_ShapeToHLR_Load(*args):
    r"""
    Creates a datastructure containing the outliner <s> depending on the projector <p> and nbiso.

    Parameters
    ----------
    S: HLRTopoBRep_OutLiner
    P: HLRAlgo_Projector
    MST: BRepTopAdaptor_MapOfShapeTool
    nbIso: int,optional
    	default value is 0

    Returns
    -------
    opencascade::handle<HLRBRep_Data>

    """
    return _HLRBRep.HLRBRep_ShapeToHLR_Load(*args)

class HLRBRep_SurfaceTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def AxeOfRevolution(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        gp_Ax1

        """
        return _HLRBRep.HLRBRep_SurfaceTool_AxeOfRevolution(*args)

    @staticmethod
    def BSpline(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _HLRBRep.HLRBRep_SurfaceTool_BSpline(*args)

    @staticmethod
    def BasisCurve(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _HLRBRep.HLRBRep_SurfaceTool_BasisCurve(*args)

    @staticmethod
    def BasisSurface(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _HLRBRep.HLRBRep_SurfaceTool_BasisSurface(*args)

    @staticmethod
    def Bezier(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Bezier(*args)

    @staticmethod
    def Cone(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        gp_Cone

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Cone(*args)

    @staticmethod
    def Cylinder(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        gp_Cylinder

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Cylinder(*args)

    @staticmethod
    def D0(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D0(*args)

    @staticmethod
    def D1(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt
        D1u: gp_Vec
        D1v: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D1(*args)

    @staticmethod
    def D2(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D2(*args)

    @staticmethod
    def D3(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec
        D3U: gp_Vec
        D3V: gp_Vec
        D3UUV: gp_Vec
        D3UVV: gp_Vec

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SurfaceTool_D3(*args)

    @staticmethod
    def DN(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float
        Nu: int
        Nv: int

        Returns
        -------
        gp_Vec

        """
        return _HLRBRep.HLRBRep_SurfaceTool_DN(*args)

    @staticmethod
    def Direction(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        gp_Dir

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Direction(*args)

    @staticmethod
    def FirstUParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_FirstUParameter(*args)

    @staticmethod
    def FirstVParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_FirstVParameter(*args)

    @staticmethod
    def GetType(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _HLRBRep.HLRBRep_SurfaceTool_GetType(*args)

    @staticmethod
    def IsUClosed(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsUClosed(*args)

    @staticmethod
    def IsUPeriodic(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsUPeriodic(*args)

    @staticmethod
    def IsVClosed(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsVClosed(*args)

    @staticmethod
    def IsVPeriodic(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_SurfaceTool_IsVPeriodic(*args)

    @staticmethod
    def LastUParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_LastUParameter(*args)

    @staticmethod
    def LastVParameter(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_LastVParameter(*args)

    @staticmethod
    def NbSamplesU(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        int
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u1: float
        u2: float

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbSamplesU(*args)

    @staticmethod
    def NbSamplesV(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        int
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        v1: float
        v2: float

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbSamplesV(*args)

    @staticmethod
    def NbUIntervals(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        Sh: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbUIntervals(*args)

    @staticmethod
    def NbVIntervals(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        Sh: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_SurfaceTool_NbVIntervals(*args)

    @staticmethod
    def OffsetValue(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_OffsetValue(*args)

    @staticmethod
    def Plane(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        gp_Pln

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Plane(*args)

    @staticmethod
    def Sphere(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        gp_Sphere

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Sphere(*args)

    @staticmethod
    def Torus(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        gp_Torus

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Torus(*args)

    @staticmethod
    def UIntervals(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UIntervals(*args)

    @staticmethod
    def UPeriod(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UPeriod(*args)

    @staticmethod
    def UResolution(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        R3d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UResolution(*args)

    @staticmethod
    def UTrim(*args):
        r"""
        If <first> >= <last>.

        Parameters
        ----------
        S: Standard_Address
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _HLRBRep.HLRBRep_SurfaceTool_UTrim(*args)

    @staticmethod
    def VIntervals(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        T: TColStd_Array1OfReal
        Sh: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VIntervals(*args)

    @staticmethod
    def VPeriod(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VPeriod(*args)

    @staticmethod
    def VResolution(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        R3d: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VResolution(*args)

    @staticmethod
    def VTrim(*args):
        r"""
        If <first> >= <last>.

        Parameters
        ----------
        S: Standard_Address
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _HLRBRep.HLRBRep_SurfaceTool_VTrim(*args)

    @staticmethod
    def Value(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        u: float
        v: float

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_SurfaceTool_Value(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_SurfaceTool_swiginit(self, _HLRBRep.new_HLRBRep_SurfaceTool())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_SurfaceTool

# Register HLRBRep_SurfaceTool in _HLRBRep:
_HLRBRep.HLRBRep_SurfaceTool_swigregister(HLRBRep_SurfaceTool)

def HLRBRep_SurfaceTool_AxeOfRevolution(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    gp_Ax1

    """
    return _HLRBRep.HLRBRep_SurfaceTool_AxeOfRevolution(*args)

def HLRBRep_SurfaceTool_BSpline(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    opencascade::handle<Geom_BSplineSurface>

    """
    return _HLRBRep.HLRBRep_SurfaceTool_BSpline(*args)

def HLRBRep_SurfaceTool_BasisCurve(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    opencascade::handle<Adaptor3d_Curve>

    """
    return _HLRBRep.HLRBRep_SurfaceTool_BasisCurve(*args)

def HLRBRep_SurfaceTool_BasisSurface(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    opencascade::handle<Adaptor3d_Surface>

    """
    return _HLRBRep.HLRBRep_SurfaceTool_BasisSurface(*args)

def HLRBRep_SurfaceTool_Bezier(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    opencascade::handle<Geom_BezierSurface>

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Bezier(*args)

def HLRBRep_SurfaceTool_Cone(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    gp_Cone

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Cone(*args)

def HLRBRep_SurfaceTool_Cylinder(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    gp_Cylinder

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Cylinder(*args)

def HLRBRep_SurfaceTool_D0(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    u: float
    v: float
    P: gp_Pnt

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SurfaceTool_D0(*args)

def HLRBRep_SurfaceTool_D1(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    u: float
    v: float
    P: gp_Pnt
    D1u: gp_Vec
    D1v: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SurfaceTool_D1(*args)

def HLRBRep_SurfaceTool_D2(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    u: float
    v: float
    P: gp_Pnt
    D1U: gp_Vec
    D1V: gp_Vec
    D2U: gp_Vec
    D2V: gp_Vec
    D2UV: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SurfaceTool_D2(*args)

def HLRBRep_SurfaceTool_D3(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    u: float
    v: float
    P: gp_Pnt
    D1U: gp_Vec
    D1V: gp_Vec
    D2U: gp_Vec
    D2V: gp_Vec
    D2UV: gp_Vec
    D3U: gp_Vec
    D3V: gp_Vec
    D3UUV: gp_Vec
    D3UVV: gp_Vec

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SurfaceTool_D3(*args)

def HLRBRep_SurfaceTool_DN(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    u: float
    v: float
    Nu: int
    Nv: int

    Returns
    -------
    gp_Vec

    """
    return _HLRBRep.HLRBRep_SurfaceTool_DN(*args)

def HLRBRep_SurfaceTool_Direction(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    gp_Dir

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Direction(*args)

def HLRBRep_SurfaceTool_FirstUParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_FirstUParameter(*args)

def HLRBRep_SurfaceTool_FirstVParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_FirstVParameter(*args)

def HLRBRep_SurfaceTool_GetType(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    GeomAbs_SurfaceType

    """
    return _HLRBRep.HLRBRep_SurfaceTool_GetType(*args)

def HLRBRep_SurfaceTool_IsUClosed(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_SurfaceTool_IsUClosed(*args)

def HLRBRep_SurfaceTool_IsUPeriodic(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_SurfaceTool_IsUPeriodic(*args)

def HLRBRep_SurfaceTool_IsVClosed(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_SurfaceTool_IsVClosed(*args)

def HLRBRep_SurfaceTool_IsVPeriodic(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_SurfaceTool_IsVPeriodic(*args)

def HLRBRep_SurfaceTool_LastUParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_LastUParameter(*args)

def HLRBRep_SurfaceTool_LastVParameter(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_LastVParameter(*args)

def HLRBRep_SurfaceTool_NbSamplesU(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    int
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    u1: float
    u2: float

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_SurfaceTool_NbSamplesU(*args)

def HLRBRep_SurfaceTool_NbSamplesV(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    int
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    v1: float
    v2: float

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_SurfaceTool_NbSamplesV(*args)

def HLRBRep_SurfaceTool_NbUIntervals(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    Sh: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_SurfaceTool_NbUIntervals(*args)

def HLRBRep_SurfaceTool_NbVIntervals(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    Sh: GeomAbs_Shape

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_SurfaceTool_NbVIntervals(*args)

def HLRBRep_SurfaceTool_OffsetValue(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_OffsetValue(*args)

def HLRBRep_SurfaceTool_Plane(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    gp_Pln

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Plane(*args)

def HLRBRep_SurfaceTool_Sphere(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    gp_Sphere

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Sphere(*args)

def HLRBRep_SurfaceTool_Torus(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    gp_Torus

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Torus(*args)

def HLRBRep_SurfaceTool_UIntervals(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    T: TColStd_Array1OfReal
    Sh: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SurfaceTool_UIntervals(*args)

def HLRBRep_SurfaceTool_UPeriod(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_UPeriod(*args)

def HLRBRep_SurfaceTool_UResolution(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    R3d: float

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_UResolution(*args)

def HLRBRep_SurfaceTool_UTrim(*args):
    r"""
    If <first> >= <last>.

    Parameters
    ----------
    S: Standard_Address
    First: float
    Last: float
    Tol: float

    Returns
    -------
    opencascade::handle<Adaptor3d_Surface>

    """
    return _HLRBRep.HLRBRep_SurfaceTool_UTrim(*args)

def HLRBRep_SurfaceTool_VIntervals(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    T: TColStd_Array1OfReal
    Sh: GeomAbs_Shape

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_SurfaceTool_VIntervals(*args)

def HLRBRep_SurfaceTool_VPeriod(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_VPeriod(*args)

def HLRBRep_SurfaceTool_VResolution(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    R3d: float

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_SurfaceTool_VResolution(*args)

def HLRBRep_SurfaceTool_VTrim(*args):
    r"""
    If <first> >= <last>.

    Parameters
    ----------
    S: Standard_Address
    First: float
    Last: float
    Tol: float

    Returns
    -------
    opencascade::handle<Adaptor3d_Surface>

    """
    return _HLRBRep.HLRBRep_SurfaceTool_VTrim(*args)

def HLRBRep_SurfaceTool_Value(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    S: Standard_Address
    u: float
    v: float

    Returns
    -------
    gp_Pnt

    """
    return _HLRBRep.HLRBRep_SurfaceTool_Value(*args)

class HLRBRep_TheCSFunctionOfInterCSurf(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Standard_Address
        C: gp_Lin

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheCSFunctionOfInterCSurf(*args))

    def AuxillarCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_AuxillarCurve(self, *args)

    def AuxillarSurface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        Standard_Address

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_AuxillarSurface(self, *args)

    def Derivatives(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_Derivatives(self, *args)

    def NbEquations(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_NbEquations(self, *args)

    def NbVariables(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_NbVariables(self, *args)

    def Point(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_Point(self, *args)

    def Root(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_Root(self, *args)

    def Value(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_Value(self, *args)

    def Values(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheCSFunctionOfInterCSurf

# Register HLRBRep_TheCSFunctionOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheCSFunctionOfInterCSurf_swigregister(HLRBRep_TheCSFunctionOfInterCSurf)

class HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        curve1: Standard_Address
        curve2: Standard_Address

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_Derivatives(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns 2.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_NbEquations(self, *args)

    def NbVariables(self, *args):
        r"""
        Returns 2.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_NbVariables(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter

# Register HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter_swigregister(HLRBRep_TheDistBetweenPCurvesOfTheIntPCurvePCurveOfCInter)

class HLRBRep_TheExactInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Compute the solution point with the close point margincoef is the coefficient for extension of uv bounds. ex., ufirst -= margincoef*(ulast-ufirst).

        Parameters
        ----------
        U: float
        V: float
        W: float
        F: HLRBRep_TheCSFunctionOfInterCSurf
        TolTangency: float
        MarginCoef: float,optional
        	default value is 0.0

        Returns
        -------
        None
        Initialize the parameters to compute the solution.

        Parameters
        ----------
        F: HLRBRep_TheCSFunctionOfInterCSurf
        TolTangency: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheExactInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheExactInterCSurf(*args))

    def Function(self, *args):
        r"""
        Return the math function which is used to compute the intersection.

        Returns
        -------
        HLRBRep_TheCSFunctionOfInterCSurf

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_Function(self, *args)

    def IsDone(self, *args):
        r"""
        Returns true if the creation completed without failure.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_IsDone(self, *args)

    def IsEmpty(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_IsEmpty(self, *args)

    def ParameterOnCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_ParameterOnCurve(self, *args)

    def ParameterOnSurface(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        U: float
        V: float

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_ParameterOnSurface(self, *args)

    def Perform(self, *args):
        r"""
        Compute the solution it's possible to write to optimize: intimp_intcs inter(s1,c1,toltangency) math_functionsetroot rsnld(inter.function()) while ...{ u=... v=... w=... inter.perform(u,v,w,rsnld) } or intimp_intcs inter(toltangency) inter.setsurface(s); math_functionsetroot rsnld(inter.function()) while ...{ c=... inter.setcurve(c); u=... v=... w=... inter.perform(u,v,w,rsnld) }.

        Parameters
        ----------
        U: float
        V: float
        W: float
        Rsnld: math_FunctionSetRoot
        u0: float
        v0: float
        u1: float
        v1: float
        w0: float
        w1: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_Perform(self, *args)

    def Point(self, *args):
        r"""
        Returns the intersection point the exception notdone is raised if isdone is false. the exception domainerror is raised if isempty is true.

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_TheExactInterCSurf_Point(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheExactInterCSurf

# Register HLRBRep_TheExactInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheExactInterCSurf_swigregister(HLRBRep_TheExactInterCSurf)

class HLRBRep_TheIntConicCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor.

        Returns
        -------
        None
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between the main branch of an hyperbola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheIntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheIntConicCurveOfCInter(*args))

    def Perform(self, *args):
        r"""
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        L: gp_Lin2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a line and a parametric curve.

        Parameters
        ----------
        C: gp_Circ2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between an ellipse and a parametric curve.

        Parameters
        ----------
        E: gp_Elips2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between a parabola and a parametric curve.

        Parameters
        ----------
        Prb: gp_Parab2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        Intersection between the main branch of an hyperbola and a parametric curve.

        Parameters
        ----------
        H: gp_Hypr2d
        D1: IntRes2d_Domain
        PCurve: Standard_Address
        D2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheIntConicCurveOfCInter_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheIntConicCurveOfCInter

# Register HLRBRep_TheIntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheIntConicCurveOfCInter_swigregister(HLRBRep_TheIntConicCurveOfCInter)

class HLRBRep_TheIntPCurvePCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheIntPCurvePCurveOfCInter(*args))

    def GetMinNbSamples(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_GetMinNbSamples(self, *args)

    def Perform(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Curve1: Standard_Address
        Domain1: IntRes2d_Domain
        Curve2: Standard_Address
        Domain2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Curve1: Standard_Address
        Domain1: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_Perform(self, *args)

    def SetMinNbSamples(self, *args):
        r"""
        Set / get minimum number of points in polygon for intersection.

        Parameters
        ----------
        theMinNbSamples: int

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_SetMinNbSamples(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheIntPCurvePCurveOfCInter

# Register HLRBRep_TheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheIntPCurvePCurveOfCInter_swigregister(HLRBRep_TheIntPCurvePCurveOfCInter)

class HLRBRep_TheInterferenceOfInterCSurf(OCC.Core.Intf.Intf_Interference):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an empty interference between polygon and polyhedron.

        Returns
        -------
        None
        Constructs and computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None
        Constructs and computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None
        Constructs and computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None
        Constructs and computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None
        Constructs and computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None
        Constructs and computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheInterferenceOfInterCSurf(*args))

    def Interference(self, *args):
        r"""
        Compares the boundings between the segment of <thepolyg> and the facets of <thepolyh>.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None
        Compares the boundings between the segment of <thepolyg> and the facets of <thepolyh>.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_Interference(self, *args)

    def Perform(self, *args):
        r"""
        Computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None
        Computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None
        Computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None
        Computes an interference between the polygon and the polyhedron.

        Parameters
        ----------
        thePolyg: HLRBRep_ThePolygonOfInterCSurf
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None
        Computes an interference between the straight line and the polyhedron.

        Parameters
        ----------
        theLin: gp_Lin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None
        Computes an interference between the straight lines and the polyhedron.

        Parameters
        ----------
        theLins: Intf_Array1OfLin
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        theBoundSB: Bnd_BoundSortBox

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheInterferenceOfInterCSurf

# Register HLRBRep_TheInterferenceOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheInterferenceOfInterCSurf_swigregister(HLRBRep_TheInterferenceOfInterCSurf)

class HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter(OCC.Core.IntRes2d.IntRes2d_Intersection):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor.

        Returns
        -------
        None
        Intersection between an implicit curve and a parametrised curve. the exception constructionerror is raised if the domain of the parametrised curve does not verify hasfirstpoint and haslastpoint return true.

        Parameters
        ----------
        ITool: IntCurve_IConicTool
        Dom1: IntRes2d_Domain
        PCurve: Standard_Address
        Dom2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter(*args))

    def And_Domaine_Objet1_Intersections(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TheImpTool: IntCurve_IConicTool
        TheParCurve: Standard_Address
        TheImpCurveDomain: IntRes2d_Domain
        TheParCurveDomain: IntRes2d_Domain
        Inter2_And_Domain2: TColStd_Array1OfReal
        Inter1: TColStd_Array1OfReal
        Resultat1: TColStd_Array1OfReal
        Resultat2: TColStd_Array1OfReal
        EpsNul: float

        Returns
        -------
        NbResultats: int

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_And_Domaine_Objet1_Intersections(self, *args)

    def FindU(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        parameter: float
        point: gp_Pnt2d
        TheParCurev: Standard_Address
        TheImpTool: IntCurve_IConicTool

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_FindU(self, *args)

    def FindV(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        parameter: float
        point: gp_Pnt2d
        TheImpTool: IntCurve_IConicTool
        ParCurve: Standard_Address
        TheParCurveDomain: IntRes2d_Domain
        V0: float
        V1: float
        Tolerance: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_FindV(self, *args)

    def Perform(self, *args):
        r"""
        Intersection between an implicit curve and a parametrised curve. the exception constructionerror is raised if the domain of the parametrised curve does not verify hasfirstpoint and haslastpoint return true.

        Parameters
        ----------
        ITool: IntCurve_IConicTool
        Dom1: IntRes2d_Domain
        PCurve: Standard_Address
        Dom2: IntRes2d_Domain
        TolConf: float
        Tol: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter

# Register HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter_swigregister(HLRBRep_TheIntersectorOfTheIntConicCurveOfCInter)

class HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        Calculates the distance with a close point. the close point is defined by the parameter value u0. the function f(u)=distance(p,c(u)) has an extremum when g(u)=df/du=0. the algorithm searches a zero near the close point. tolu is used to decide to stop the iterations. at the nth iteration, the criteria is: abs(un - un-1) < tolu.

        Parameters
        ----------
        P: gp_Pnt2d
        C: Standard_Address
        U0: float
        TolU: float

        Returns
        -------
        None
        Calculates the distance with a close point. the close point is defined by the parameter value u0. the function f(u)=distance(p,c(u)) has an extremum when g(u)=df/du=0. the algorithm searches a zero near the close point. zeros are searched between umin and usup. tolu is used to decide to stop the iterations. at the nth iteration, the criteria is: abs(un - un-1) < tolu.

        Parameters
        ----------
        P: gp_Pnt2d
        C: Standard_Address
        U0: float
        Umin: float
        Usup: float
        TolU: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter(*args))

    def Initialize(self, *args):
        r"""
        Sets the fields of the algorithm.

        Parameters
        ----------
        C: Standard_Address
        Umin: float
        Usup: float
        TolU: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_Initialize(self, *args)

    def IsDone(self, *args):
        r"""
        Returns true if the distance is found.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_IsDone(self, *args)

    def IsMin(self, *args):
        r"""
        Returns true if the extremum distance is a minimum.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_IsMin(self, *args)

    def Perform(self, *args):
        r"""
        The algorithm is done with the point p. an exception is raised if the fields have not been initialized.

        Parameters
        ----------
        P: gp_Pnt2d
        U0: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_Perform(self, *args)

    def Point(self, *args):
        r"""
        Returns the point of the extremum distance.

        Returns
        -------
        Extrema_POnCurv2d

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_Point(self, *args)

    def SquareDistance(self, *args):
        r"""
        Returns the value of the extremum square distance.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_SquareDistance(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter

# Register HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter_swigregister(HLRBRep_TheLocateExtPCOfTheProjPCurOfCInter)

class HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter(OCC.Core.Intf.Intf_Polygon2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Compute a polygon on the domain of the curve.

        Parameters
        ----------
        Curve: Standard_Address
        NbPnt: int
        Domain: IntRes2d_Domain
        Tol: float

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter(*args))

    def ApproxParamOnCurve(self, *args):
        r"""
        Give an approximation of the parameter on the curve according to the discretization of the curve.

        Parameters
        ----------
        Index: int
        ParamOnLine: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_ApproxParamOnCurve(self, *args)

    def AutoIntersectionIsPossible(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_AutoIntersectionIsPossible(self, *args)

    def CalculRegion(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        x: float
        y: float
        x1: float
        x2: float
        y1: float
        y2: float

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_CalculRegion(self, *args)

    def Closed(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        clos: bool

        Returns
        -------
        None
        Returns true if the polyline is closed.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_Closed(self, *args)

    def ComputeWithBox(self, *args):
        r"""
        The current polygon is modified if most of the points of the polygon are outside the box <otherbox>. in this situation, bounds are computed to build a polygon inside or near the otherbox.

        Parameters
        ----------
        Curve: Standard_Address
        OtherBox: Bnd_Box2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_ComputeWithBox(self, *args)

    def DeflectionOverEstimation(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_DeflectionOverEstimation(self, *args)

    def Dump(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_Dump(self, *args)

    def InfParameter(self, *args):
        r"""
        Returns the parameter (on the curve) of the first point of the polygon.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_InfParameter(self, *args)

    def NbSegments(self, *args):
        r"""
        Give the number of segments in the polyline.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_NbSegments(self, *args)

    def Segment(self, *args):
        r"""
        Returns the points of the segment <index> in the polygon.

        Parameters
        ----------
        theIndex: int
        theBegin: gp_Pnt2d
        theEnd: gp_Pnt2d

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_Segment(self, *args)

    def SetDeflectionOverEstimation(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        x: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_SetDeflectionOverEstimation(self, *args)

    def SupParameter(self, *args):
        r"""
        Returns the parameter (on the curve) of the last point of the polygon.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_SupParameter(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter

# Register HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter_swigregister(HLRBRep_ThePolygon2dOfTheIntPCurvePCurveOfCInter)

class HLRBRep_ThePolygonOfInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Curve: gp_Lin
        NbPnt: int

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Curve: gp_Lin
        U1: float
        U2: float
        NbPnt: int

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Curve: gp_Lin
        Upars: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_ThePolygonOfInterCSurf(*args))

    def ApproxParamOnCurve(self, *args):
        r"""
        Give an approximation of the parameter on the curve according to the discretization of the curve.

        Parameters
        ----------
        Index: int
        ParamOnLine: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_ApproxParamOnCurve(self, *args)

    def BeginOfSeg(self, *args):
        r"""
        Give the point of range index in the polygon.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_BeginOfSeg(self, *args)

    def Bounding(self, *args):
        r"""
        Give the bounding box of the polygon.

        Returns
        -------
        Bnd_Box

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_Bounding(self, *args)

    def Closed(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        flag: bool

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_Closed(self, *args)

    def DeflectionOverEstimation(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_DeflectionOverEstimation(self, *args)

    def Dump(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_Dump(self, *args)

    def EndOfSeg(self, *args):
        r"""
        Give the point of range index in the polygon.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_EndOfSeg(self, *args)

    def InfParameter(self, *args):
        r"""
        Returns the parameter (on the curve) of the first point of the polygon.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_InfParameter(self, *args)

    def NbSegments(self, *args):
        r"""
        Give the number of segments in the polyline.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_NbSegments(self, *args)

    def SetDeflectionOverEstimation(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        x: float

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_SetDeflectionOverEstimation(self, *args)

    def SupParameter(self, *args):
        r"""
        Returns the parameter (on the curve) of the last point of the polygon.

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygonOfInterCSurf_SupParameter(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolygonOfInterCSurf

# Register HLRBRep_ThePolygonOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_ThePolygonOfInterCSurf_swigregister(HLRBRep_ThePolygonOfInterCSurf)

class HLRBRep_ThePolygonToolOfInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def BeginOfSeg(*args):
        r"""
        Give the point of range index in the polygon.

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_BeginOfSeg(*args)

    @staticmethod
    def Bounding(*args):
        r"""
        Give the bounding box of the polygon.

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Returns
        -------
        Bnd_Box

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Bounding(*args)

    @staticmethod
    def Closed(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Closed(*args)

    @staticmethod
    def DeflectionOverEstimation(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_DeflectionOverEstimation(*args)

    @staticmethod
    def Dump(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Dump(*args)

    @staticmethod
    def EndOfSeg(*args):
        r"""
        Give the point of range index in the polygon.

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_EndOfSeg(*args)

    @staticmethod
    def NbSegments(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        thePolygon: HLRBRep_ThePolygonOfInterCSurf

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_NbSegments(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_ThePolygonToolOfInterCSurf())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolygonToolOfInterCSurf

# Register HLRBRep_ThePolygonToolOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_swigregister(HLRBRep_ThePolygonToolOfInterCSurf)

def HLRBRep_ThePolygonToolOfInterCSurf_BeginOfSeg(*args):
    r"""
    Give the point of range index in the polygon.

    Parameters
    ----------
    thePolygon: HLRBRep_ThePolygonOfInterCSurf
    Index: int

    Returns
    -------
    gp_Pnt

    """
    return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_BeginOfSeg(*args)

def HLRBRep_ThePolygonToolOfInterCSurf_Bounding(*args):
    r"""
    Give the bounding box of the polygon.

    Parameters
    ----------
    thePolygon: HLRBRep_ThePolygonOfInterCSurf

    Returns
    -------
    Bnd_Box

    """
    return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Bounding(*args)

def HLRBRep_ThePolygonToolOfInterCSurf_Closed(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    thePolygon: HLRBRep_ThePolygonOfInterCSurf

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Closed(*args)

def HLRBRep_ThePolygonToolOfInterCSurf_DeflectionOverEstimation(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    thePolygon: HLRBRep_ThePolygonOfInterCSurf

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_DeflectionOverEstimation(*args)

def HLRBRep_ThePolygonToolOfInterCSurf_Dump(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    thePolygon: HLRBRep_ThePolygonOfInterCSurf

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_Dump(*args)

def HLRBRep_ThePolygonToolOfInterCSurf_EndOfSeg(*args):
    r"""
    Give the point of range index in the polygon.

    Parameters
    ----------
    thePolygon: HLRBRep_ThePolygonOfInterCSurf
    Index: int

    Returns
    -------
    gp_Pnt

    """
    return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_EndOfSeg(*args)

def HLRBRep_ThePolygonToolOfInterCSurf_NbSegments(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    thePolygon: HLRBRep_ThePolygonOfInterCSurf

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_ThePolygonToolOfInterCSurf_NbSegments(*args)

class HLRBRep_ThePolyhedronToolOfInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def Bounding(*args):
        r"""
        Give the bounding box of the polyhedrontool.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        Bnd_Box

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Bounding(*args)

    @staticmethod
    def ComponentsBounding(*args):
        r"""
        Give the array of boxes. the box <n> corresponding to the triangle <n>.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        opencascade::handle<Bnd_HArray1OfBox>

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_ComponentsBounding(*args)

    @staticmethod
    def DeflectionOverEstimation(*args):
        r"""
        Give the tolerance of the polygon.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_DeflectionOverEstimation(*args)

    @staticmethod
    def Dump(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Dump(*args)

    @staticmethod
    def GetBorderDeflection(*args):
        r"""
        This method returns a border deflection of the polyhedron.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_GetBorderDeflection(*args)

    @staticmethod
    def IsOnBound(*args):
        r"""
        This method returns true if the edge based on points with indices index1 and index2 represents a boundary edge. it is necessary to take into account the boundary deflection for this edge.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Index1: int
        Index2: int

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_IsOnBound(*args)

    @staticmethod
    def NbTriangles(*args):
        r"""
        Give the number of triangles in this polyhedral surface.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_NbTriangles(*args)

    @staticmethod
    def Point(*args):
        r"""
        Give the point of index i in the polyhedral surface.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Index: int

        Returns
        -------
        gp_Pnt

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Point(*args)

    @staticmethod
    def TriConnex(*args):
        r"""
        Give the address tricon of the triangle connexe to the triangle of address triang by the edge pivot pedge and the third point of this connexe triangle. when we are on a free edge tricon==0 but the function return the value of the triangle in the other side of pivot on the free edge. used to turn around a vertex.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Triang: int
        Pivot: int
        Pedge: int

        Returns
        -------
        TriCon: int
        OtherP: int

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_TriConnex(*args)

    @staticmethod
    def Triangle(*args):
        r"""
        Give the indices of the 3 points of the triangle of address index in the polyhedrontool.

        Parameters
        ----------
        thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
        Index: int

        Returns
        -------
        P1: int
        P2: int
        P3: int

        """
        return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Triangle(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_ThePolyhedronToolOfInterCSurf())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_ThePolyhedronToolOfInterCSurf

# Register HLRBRep_ThePolyhedronToolOfInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_swigregister(HLRBRep_ThePolyhedronToolOfInterCSurf)

def HLRBRep_ThePolyhedronToolOfInterCSurf_Bounding(*args):
    r"""
    Give the bounding box of the polyhedrontool.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

    Returns
    -------
    Bnd_Box

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Bounding(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_ComponentsBounding(*args):
    r"""
    Give the array of boxes. the box <n> corresponding to the triangle <n>.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

    Returns
    -------
    opencascade::handle<Bnd_HArray1OfBox>

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_ComponentsBounding(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_DeflectionOverEstimation(*args):
    r"""
    Give the tolerance of the polygon.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_DeflectionOverEstimation(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_Dump(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

    Returns
    -------
    None

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Dump(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_GetBorderDeflection(*args):
    r"""
    This method returns a border deflection of the polyhedron.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_GetBorderDeflection(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_IsOnBound(*args):
    r"""
    This method returns true if the edge based on points with indices index1 and index2 represents a boundary edge. it is necessary to take into account the boundary deflection for this edge.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
    Index1: int
    Index2: int

    Returns
    -------
    bool

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_IsOnBound(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_NbTriangles(*args):
    r"""
    Give the number of triangles in this polyhedral surface.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf

    Returns
    -------
    int

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_NbTriangles(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_Point(*args):
    r"""
    Give the point of index i in the polyhedral surface.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
    Index: int

    Returns
    -------
    gp_Pnt

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Point(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_TriConnex(*args):
    r"""
    Give the address tricon of the triangle connexe to the triangle of address triang by the edge pivot pedge and the third point of this connexe triangle. when we are on a free edge tricon==0 but the function return the value of the triangle in the other side of pivot on the free edge. used to turn around a vertex.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
    Triang: int
    Pivot: int
    Pedge: int

    Returns
    -------
    TriCon: int
    OtherP: int

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_TriConnex(*args)

def HLRBRep_ThePolyhedronToolOfInterCSurf_Triangle(*args):
    r"""
    Give the indices of the 3 points of the triangle of address index in the polyhedrontool.

    Parameters
    ----------
    thePolyh: HLRBRep_ThePolyhedronOfInterCSurf
    Index: int

    Returns
    -------
    P1: int
    P2: int
    P3: int

    """
    return _HLRBRep.HLRBRep_ThePolyhedronToolOfInterCSurf_Triangle(*args)

class HLRBRep_TheProjPCurOfCInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def FindParameter(*args):
        r"""
        Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. in that case, no bounds are given. the research of the right parameter has to be made on the natural parametric domain of the curve.

        Parameters
        ----------
        C: Standard_Address
        Pnt: gp_Pnt2d
        Tol: float

        Returns
        -------
        float
        Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. lowparameter and highparameter give the boundaries of the interval in which the parameter certainly lies. these parameters are given to implement a more efficient algorithm. so, it is not necessary to check that the returned value verifies lowparameter <= value <= highparameter.

        Parameters
        ----------
        C: Standard_Address
        Pnt: gp_Pnt2d
        LowParameter: float
        HighParameter: float
        Tol: float

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_TheProjPCurOfCInter_FindParameter(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _HLRBRep.HLRBRep_TheProjPCurOfCInter_swiginit(self, _HLRBRep.new_HLRBRep_TheProjPCurOfCInter())
    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheProjPCurOfCInter

# Register HLRBRep_TheProjPCurOfCInter in _HLRBRep:
_HLRBRep.HLRBRep_TheProjPCurOfCInter_swigregister(HLRBRep_TheProjPCurOfCInter)

def HLRBRep_TheProjPCurOfCInter_FindParameter(*args):
    r"""
    Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. in that case, no bounds are given. the research of the right parameter has to be made on the natural parametric domain of the curve.

    Parameters
    ----------
    C: Standard_Address
    Pnt: gp_Pnt2d
    Tol: float

    Returns
    -------
    float
    Returns the parameter v of the point on the parametric curve corresponding to the point pnt. the correspondence between pnt and the point p(v) on the parametric curve must be coherent with the way of determination of the signed distance between a point and the implicit curve. tol is the tolerance on the distance between a point and the parametrised curve. lowparameter and highparameter give the boundaries of the interval in which the parameter certainly lies. these parameters are given to implement a more efficient algorithm. so, it is not necessary to check that the returned value verifies lowparameter <= value <= highparameter.

    Parameters
    ----------
    C: Standard_Address
    Pnt: gp_Pnt2d
    LowParameter: float
    HighParameter: float
    Tol: float

    Returns
    -------
    float

    """
    return _HLRBRep.HLRBRep_TheProjPCurOfCInter_FindParameter(*args)

class HLRBRep_TheQuadCurvExactInterCSurf(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Provides the signed distance function : q(w) and its first derivative dq(w)/dw.

        Parameters
        ----------
        S: Standard_Address
        C: gp_Lin

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheQuadCurvExactInterCSurf(*args))

    def Intervals(self, *args):
        r"""
        U1 and u2 are the parameters of a segment on the curve.

        Parameters
        ----------
        Index: int

        Returns
        -------
        U1: float
        U2: float

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_Intervals(self, *args)

    def IsDone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_IsDone(self, *args)

    def NbIntervals(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_NbIntervals(self, *args)

    def NbRoots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_NbRoots(self, *args)

    def Root(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_Root(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheQuadCurvExactInterCSurf

# Register HLRBRep_TheQuadCurvExactInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheQuadCurvExactInterCSurf_swigregister(HLRBRep_TheQuadCurvExactInterCSurf)

class HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf(OCC.Core.math.math_FunctionWithDerivative):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Create the function.

        Parameters
        ----------
        Q: IntSurf_Quadric
        C: gp_Lin

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf_swiginit(self, _HLRBRep.new_HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf(*args))

    def Derivative(self, *args):
        r"""
        Computes the derivative of the previous function at parameter param. derivative always returns true.

        Parameters
        ----------
        Param: float

        Returns
        -------
        D: float

        """
        return _HLRBRep.HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf_Derivative(self, *args)

    def Value(self, *args):
        r"""
        Computes the value of the signed distance between the implicit surface and the point at parameter param on the parametrised curve. value always returns true.

        Parameters
        ----------
        Param: float

        Returns
        -------
        F: float

        """
        return _HLRBRep.HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf_Value(self, *args)

    def Values(self, *args):
        r"""
        Computes the value and the derivative of the function. returns true.

        Parameters
        ----------
        Param: float

        Returns
        -------
        F: float
        D: float

        """
        return _HLRBRep.HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf

# Register HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf in _HLRBRep:
_HLRBRep.HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf_swigregister(HLRBRep_TheQuadCurvFuncOfTheQuadCurvExactInterCSurf)

class HLRBRep_VertexList(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        T: HLRBRep_EdgeInterferenceTool
        I: HLRAlgo_ListIteratorOfInterferenceList

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_VertexList_swiginit(self, _HLRBRep.new_HLRBRep_VertexList(*args))

    def BoundaryTransition(self, *args):
        r"""
        Returns the transition of the current vertex relative to the boundary if it is an interference.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRBRep.HLRBRep_VertexList_BoundaryTransition(self, *args)

    def Current(self, *args):
        r"""
        Returns the current vertex.

        Returns
        -------
        HLRAlgo_Intersection

        """
        return _HLRBRep.HLRBRep_VertexList_Current(self, *args)

    def IsBoundary(self, *args):
        r"""
        Returns true if the current vertex is on the boundary of the edge.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_VertexList_IsBoundary(self, *args)

    def IsInterference(self, *args):
        r"""
        Returns true if the current vertex is an interference.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_VertexList_IsInterference(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Returns true when the curve is periodic.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_VertexList_IsPeriodic(self, *args)

    def More(self, *args):
        r"""
        Returns true when there are more vertices.

        Returns
        -------
        bool

        """
        return _HLRBRep.HLRBRep_VertexList_More(self, *args)

    def Next(self, *args):
        r"""
        Proceeds to the next vertex.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_VertexList_Next(self, *args)

    def Orientation(self, *args):
        r"""
        Returns the orientation of the current vertex if it is on the boundary of the edge.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRBRep.HLRBRep_VertexList_Orientation(self, *args)

    def Transition(self, *args):
        r"""
        Returns the transition of the current vertex if it is an interference.

        Returns
        -------
        TopAbs_Orientation

        """
        return _HLRBRep.HLRBRep_VertexList_Transition(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_VertexList

# Register HLRBRep_VertexList in _HLRBRep:
_HLRBRep.HLRBRep_VertexList_swigregister(HLRBRep_VertexList)

class HLRBRep_Algo(HLRBRep_InternalAlgo):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an empty framework for the calculation of visible and hidden lines of a shape in a projection. use the function: - projector to define the point of view - add to select the shape or shapes to be visualized - update to compute the outlines of the shape, and - hide to compute the visible and hidden lines of the shape.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        A: HLRBRep_Algo

        Returns
        -------
        None

        """
        _HLRBRep.HLRBRep_Algo_swiginit(self, _HLRBRep.new_HLRBRep_Algo(*args))

    def Add(self, *args):
        r"""
        Add the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape
        SData: Standard_Transient
        nbIso: int,optional
        	default value is 0

        Returns
        -------
        None
        Adds the shape s to this framework, and specifies the number of isoparameters nbiso desired in visualizing s. you may add as many shapes as you wish. use the function add once for each shape.

        Parameters
        ----------
        S: TopoDS_Shape
        nbIso: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Algo_Add(self, *args)

    def Index(self, *args):
        r"""
        Return the index of the shape <s> and return 0 if the shape <s> is not found.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        int

        """
        return _HLRBRep.HLRBRep_Algo_Index(self, *args)

    def OutLinedShapeNullify(self, *args):
        r"""
        Nullify all the results of outliner from hlrtopobrep.

        Returns
        -------
        None

        """
        return _HLRBRep.HLRBRep_Algo_OutLinedShapeNullify(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_HLRBRep_Algo_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _HLRBRep.delete_HLRBRep_Algo

# Register HLRBRep_Algo in _HLRBRep:
_HLRBRep.HLRBRep_Algo_swigregister(HLRBRep_Algo)


@classnotwrapped
class HLRBRep_ThePolyhedronOfInterCSurf:
	pass

@classnotwrapped
class HLRBRep_BSurfaceTool:
	pass

@classnotwrapped
class HLRBRep_Surface:
	pass

@classnotwrapped
class HLRBRep_TheCurveLocatorOfTheProjPCurOfCInter:
	pass





@deprecated
def hlrbrep_MakeEdge(*args):
	return hlrbrep.MakeEdge(*args)

@deprecated
def hlrbrep_MakeEdge3d(*args):
	return hlrbrep.MakeEdge3d(*args)

@deprecated
def hlrbrep_PolyHLRAngleAndDeflection(*args):
	return hlrbrep.PolyHLRAngleAndDeflection(*args)

@deprecated
def HLRBRep_BCurveTool_BSpline(*args):
	return HLRBRep_BCurveTool.BSpline(*args)

@deprecated
def HLRBRep_BCurveTool_Bezier(*args):
	return HLRBRep_BCurveTool.Bezier(*args)

@deprecated
def HLRBRep_BCurveTool_Circle(*args):
	return HLRBRep_BCurveTool.Circle(*args)

@deprecated
def HLRBRep_BCurveTool_Continuity(*args):
	return HLRBRep_BCurveTool.Continuity(*args)

@deprecated
def HLRBRep_BCurveTool_D0(*args):
	return HLRBRep_BCurveTool.D0(*args)

@deprecated
def HLRBRep_BCurveTool_D1(*args):
	return HLRBRep_BCurveTool.D1(*args)

@deprecated
def HLRBRep_BCurveTool_D2(*args):
	return HLRBRep_BCurveTool.D2(*args)

@deprecated
def HLRBRep_BCurveTool_D3(*args):
	return HLRBRep_BCurveTool.D3(*args)

@deprecated
def HLRBRep_BCurveTool_DN(*args):
	return HLRBRep_BCurveTool.DN(*args)

@deprecated
def HLRBRep_BCurveTool_Degree(*args):
	return HLRBRep_BCurveTool.Degree(*args)

@deprecated
def HLRBRep_BCurveTool_Ellipse(*args):
	return HLRBRep_BCurveTool.Ellipse(*args)

@deprecated
def HLRBRep_BCurveTool_FirstParameter(*args):
	return HLRBRep_BCurveTool.FirstParameter(*args)

@deprecated
def HLRBRep_BCurveTool_GetType(*args):
	return HLRBRep_BCurveTool.GetType(*args)

@deprecated
def HLRBRep_BCurveTool_Hyperbola(*args):
	return HLRBRep_BCurveTool.Hyperbola(*args)

@deprecated
def HLRBRep_BCurveTool_Intervals(*args):
	return HLRBRep_BCurveTool.Intervals(*args)

@deprecated
def HLRBRep_BCurveTool_IsClosed(*args):
	return HLRBRep_BCurveTool.IsClosed(*args)

@deprecated
def HLRBRep_BCurveTool_IsPeriodic(*args):
	return HLRBRep_BCurveTool.IsPeriodic(*args)

@deprecated
def HLRBRep_BCurveTool_IsRational(*args):
	return HLRBRep_BCurveTool.IsRational(*args)

@deprecated
def HLRBRep_BCurveTool_LastParameter(*args):
	return HLRBRep_BCurveTool.LastParameter(*args)

@deprecated
def HLRBRep_BCurveTool_Line(*args):
	return HLRBRep_BCurveTool.Line(*args)

@deprecated
def HLRBRep_BCurveTool_NbIntervals(*args):
	return HLRBRep_BCurveTool.NbIntervals(*args)

@deprecated
def HLRBRep_BCurveTool_NbKnots(*args):
	return HLRBRep_BCurveTool.NbKnots(*args)

@deprecated
def HLRBRep_BCurveTool_NbPoles(*args):
	return HLRBRep_BCurveTool.NbPoles(*args)

@deprecated
def HLRBRep_BCurveTool_NbSamples(*args):
	return HLRBRep_BCurveTool.NbSamples(*args)

@deprecated
def HLRBRep_BCurveTool_Parabola(*args):
	return HLRBRep_BCurveTool.Parabola(*args)

@deprecated
def HLRBRep_BCurveTool_Period(*args):
	return HLRBRep_BCurveTool.Period(*args)

@deprecated
def HLRBRep_BCurveTool_Poles(*args):
	return HLRBRep_BCurveTool.Poles(*args)

@deprecated
def HLRBRep_BCurveTool_PolesAndWeights(*args):
	return HLRBRep_BCurveTool.PolesAndWeights(*args)

@deprecated
def HLRBRep_BCurveTool_Resolution(*args):
	return HLRBRep_BCurveTool.Resolution(*args)

@deprecated
def HLRBRep_BCurveTool_Value(*args):
	return HLRBRep_BCurveTool.Value(*args)

@deprecated
def HLRBRep_CLPropsATool_Continuity(*args):
	return HLRBRep_CLPropsATool.Continuity(*args)

@deprecated
def HLRBRep_CLPropsATool_D1(*args):
	return HLRBRep_CLPropsATool.D1(*args)

@deprecated
def HLRBRep_CLPropsATool_D2(*args):
	return HLRBRep_CLPropsATool.D2(*args)

@deprecated
def HLRBRep_CLPropsATool_D3(*args):
	return HLRBRep_CLPropsATool.D3(*args)

@deprecated
def HLRBRep_CLPropsATool_FirstParameter(*args):
	return HLRBRep_CLPropsATool.FirstParameter(*args)

@deprecated
def HLRBRep_CLPropsATool_LastParameter(*args):
	return HLRBRep_CLPropsATool.LastParameter(*args)

@deprecated
def HLRBRep_CLPropsATool_Value(*args):
	return HLRBRep_CLPropsATool.Value(*args)

@deprecated
def HLRBRep_CurveTool_BSpline(*args):
	return HLRBRep_CurveTool.BSpline(*args)

@deprecated
def HLRBRep_CurveTool_Bezier(*args):
	return HLRBRep_CurveTool.Bezier(*args)

@deprecated
def HLRBRep_CurveTool_Circle(*args):
	return HLRBRep_CurveTool.Circle(*args)

@deprecated
def HLRBRep_CurveTool_Continuity(*args):
	return HLRBRep_CurveTool.Continuity(*args)

@deprecated
def HLRBRep_CurveTool_D0(*args):
	return HLRBRep_CurveTool.D0(*args)

@deprecated
def HLRBRep_CurveTool_D1(*args):
	return HLRBRep_CurveTool.D1(*args)

@deprecated
def HLRBRep_CurveTool_D2(*args):
	return HLRBRep_CurveTool.D2(*args)

@deprecated
def HLRBRep_CurveTool_D3(*args):
	return HLRBRep_CurveTool.D3(*args)

@deprecated
def HLRBRep_CurveTool_DN(*args):
	return HLRBRep_CurveTool.DN(*args)

@deprecated
def HLRBRep_CurveTool_Degree(*args):
	return HLRBRep_CurveTool.Degree(*args)

@deprecated
def HLRBRep_CurveTool_Ellipse(*args):
	return HLRBRep_CurveTool.Ellipse(*args)

@deprecated
def HLRBRep_CurveTool_EpsX(*args):
	return HLRBRep_CurveTool.EpsX(*args)

@deprecated
def HLRBRep_CurveTool_FirstParameter(*args):
	return HLRBRep_CurveTool.FirstParameter(*args)

@deprecated
def HLRBRep_CurveTool_GetInterval(*args):
	return HLRBRep_CurveTool.GetInterval(*args)

@deprecated
def HLRBRep_CurveTool_GetType(*args):
	return HLRBRep_CurveTool.GetType(*args)

@deprecated
def HLRBRep_CurveTool_Hyperbola(*args):
	return HLRBRep_CurveTool.Hyperbola(*args)

@deprecated
def HLRBRep_CurveTool_Intervals(*args):
	return HLRBRep_CurveTool.Intervals(*args)

@deprecated
def HLRBRep_CurveTool_IsClosed(*args):
	return HLRBRep_CurveTool.IsClosed(*args)

@deprecated
def HLRBRep_CurveTool_IsPeriodic(*args):
	return HLRBRep_CurveTool.IsPeriodic(*args)

@deprecated
def HLRBRep_CurveTool_LastParameter(*args):
	return HLRBRep_CurveTool.LastParameter(*args)

@deprecated
def HLRBRep_CurveTool_Line(*args):
	return HLRBRep_CurveTool.Line(*args)

@deprecated
def HLRBRep_CurveTool_NbIntervals(*args):
	return HLRBRep_CurveTool.NbIntervals(*args)

@deprecated
def HLRBRep_CurveTool_NbSamples(*args):
	return HLRBRep_CurveTool.NbSamples(*args)

@deprecated
def HLRBRep_CurveTool_NbSamples(*args):
	return HLRBRep_CurveTool.NbSamples(*args)

@deprecated
def HLRBRep_CurveTool_Parabola(*args):
	return HLRBRep_CurveTool.Parabola(*args)

@deprecated
def HLRBRep_CurveTool_Period(*args):
	return HLRBRep_CurveTool.Period(*args)

@deprecated
def HLRBRep_CurveTool_Resolution(*args):
	return HLRBRep_CurveTool.Resolution(*args)

@deprecated
def HLRBRep_CurveTool_TheType(*args):
	return HLRBRep_CurveTool.TheType(*args)

@deprecated
def HLRBRep_CurveTool_Value(*args):
	return HLRBRep_CurveTool.Value(*args)

@deprecated
def HLRBRep_EdgeFaceTool_CurvatureValue(*args):
	return HLRBRep_EdgeFaceTool.CurvatureValue(*args)

@deprecated
def HLRBRep_EdgeFaceTool_UVPoint(*args):
	return HLRBRep_EdgeFaceTool.UVPoint(*args)

@deprecated
def HLRBRep_EdgeIList_AddInterference(*args):
	return HLRBRep_EdgeIList.AddInterference(*args)

@deprecated
def HLRBRep_EdgeIList_ProcessComplex(*args):
	return HLRBRep_EdgeIList.ProcessComplex(*args)

@deprecated
def HLRBRep_LineTool_BSpline(*args):
	return HLRBRep_LineTool.BSpline(*args)

@deprecated
def HLRBRep_LineTool_Bezier(*args):
	return HLRBRep_LineTool.Bezier(*args)

@deprecated
def HLRBRep_LineTool_Circle(*args):
	return HLRBRep_LineTool.Circle(*args)

@deprecated
def HLRBRep_LineTool_Continuity(*args):
	return HLRBRep_LineTool.Continuity(*args)

@deprecated
def HLRBRep_LineTool_D0(*args):
	return HLRBRep_LineTool.D0(*args)

@deprecated
def HLRBRep_LineTool_D1(*args):
	return HLRBRep_LineTool.D1(*args)

@deprecated
def HLRBRep_LineTool_D2(*args):
	return HLRBRep_LineTool.D2(*args)

@deprecated
def HLRBRep_LineTool_D3(*args):
	return HLRBRep_LineTool.D3(*args)

@deprecated
def HLRBRep_LineTool_DN(*args):
	return HLRBRep_LineTool.DN(*args)

@deprecated
def HLRBRep_LineTool_Degree(*args):
	return HLRBRep_LineTool.Degree(*args)

@deprecated
def HLRBRep_LineTool_Ellipse(*args):
	return HLRBRep_LineTool.Ellipse(*args)

@deprecated
def HLRBRep_LineTool_FirstParameter(*args):
	return HLRBRep_LineTool.FirstParameter(*args)

@deprecated
def HLRBRep_LineTool_GetType(*args):
	return HLRBRep_LineTool.GetType(*args)

@deprecated
def HLRBRep_LineTool_Hyperbola(*args):
	return HLRBRep_LineTool.Hyperbola(*args)

@deprecated
def HLRBRep_LineTool_IntervalContinuity(*args):
	return HLRBRep_LineTool.IntervalContinuity(*args)

@deprecated
def HLRBRep_LineTool_IntervalFirst(*args):
	return HLRBRep_LineTool.IntervalFirst(*args)

@deprecated
def HLRBRep_LineTool_IntervalLast(*args):
	return HLRBRep_LineTool.IntervalLast(*args)

@deprecated
def HLRBRep_LineTool_Intervals(*args):
	return HLRBRep_LineTool.Intervals(*args)

@deprecated
def HLRBRep_LineTool_IsClosed(*args):
	return HLRBRep_LineTool.IsClosed(*args)

@deprecated
def HLRBRep_LineTool_IsPeriodic(*args):
	return HLRBRep_LineTool.IsPeriodic(*args)

@deprecated
def HLRBRep_LineTool_IsRational(*args):
	return HLRBRep_LineTool.IsRational(*args)

@deprecated
def HLRBRep_LineTool_KnotsAndMultiplicities(*args):
	return HLRBRep_LineTool.KnotsAndMultiplicities(*args)

@deprecated
def HLRBRep_LineTool_LastParameter(*args):
	return HLRBRep_LineTool.LastParameter(*args)

@deprecated
def HLRBRep_LineTool_Line(*args):
	return HLRBRep_LineTool.Line(*args)

@deprecated
def HLRBRep_LineTool_NbIntervals(*args):
	return HLRBRep_LineTool.NbIntervals(*args)

@deprecated
def HLRBRep_LineTool_NbKnots(*args):
	return HLRBRep_LineTool.NbKnots(*args)

@deprecated
def HLRBRep_LineTool_NbPoles(*args):
	return HLRBRep_LineTool.NbPoles(*args)

@deprecated
def HLRBRep_LineTool_NbSamples(*args):
	return HLRBRep_LineTool.NbSamples(*args)

@deprecated
def HLRBRep_LineTool_Parabola(*args):
	return HLRBRep_LineTool.Parabola(*args)

@deprecated
def HLRBRep_LineTool_Period(*args):
	return HLRBRep_LineTool.Period(*args)

@deprecated
def HLRBRep_LineTool_Poles(*args):
	return HLRBRep_LineTool.Poles(*args)

@deprecated
def HLRBRep_LineTool_PolesAndWeights(*args):
	return HLRBRep_LineTool.PolesAndWeights(*args)

@deprecated
def HLRBRep_LineTool_Resolution(*args):
	return HLRBRep_LineTool.Resolution(*args)

@deprecated
def HLRBRep_LineTool_SamplePars(*args):
	return HLRBRep_LineTool.SamplePars(*args)

@deprecated
def HLRBRep_LineTool_Value(*args):
	return HLRBRep_LineTool.Value(*args)

@deprecated
def HLRBRep_SLPropsATool_Bounds(*args):
	return HLRBRep_SLPropsATool.Bounds(*args)

@deprecated
def HLRBRep_SLPropsATool_Continuity(*args):
	return HLRBRep_SLPropsATool.Continuity(*args)

@deprecated
def HLRBRep_SLPropsATool_D1(*args):
	return HLRBRep_SLPropsATool.D1(*args)

@deprecated
def HLRBRep_SLPropsATool_D2(*args):
	return HLRBRep_SLPropsATool.D2(*args)

@deprecated
def HLRBRep_SLPropsATool_DN(*args):
	return HLRBRep_SLPropsATool.DN(*args)

@deprecated
def HLRBRep_SLPropsATool_Value(*args):
	return HLRBRep_SLPropsATool.Value(*args)

@deprecated
def HLRBRep_ShapeToHLR_Load(*args):
	return HLRBRep_ShapeToHLR.Load(*args)

@deprecated
def HLRBRep_SurfaceTool_AxeOfRevolution(*args):
	return HLRBRep_SurfaceTool.AxeOfRevolution(*args)

@deprecated
def HLRBRep_SurfaceTool_BSpline(*args):
	return HLRBRep_SurfaceTool.BSpline(*args)

@deprecated
def HLRBRep_SurfaceTool_BasisCurve(*args):
	return HLRBRep_SurfaceTool.BasisCurve(*args)

@deprecated
def HLRBRep_SurfaceTool_BasisSurface(*args):
	return HLRBRep_SurfaceTool.BasisSurface(*args)

@deprecated
def HLRBRep_SurfaceTool_Bezier(*args):
	return HLRBRep_SurfaceTool.Bezier(*args)

@deprecated
def HLRBRep_SurfaceTool_Cone(*args):
	return HLRBRep_SurfaceTool.Cone(*args)

@deprecated
def HLRBRep_SurfaceTool_Cylinder(*args):
	return HLRBRep_SurfaceTool.Cylinder(*args)

@deprecated
def HLRBRep_SurfaceTool_D0(*args):
	return HLRBRep_SurfaceTool.D0(*args)

@deprecated
def HLRBRep_SurfaceTool_D1(*args):
	return HLRBRep_SurfaceTool.D1(*args)

@deprecated
def HLRBRep_SurfaceTool_D2(*args):
	return HLRBRep_SurfaceTool.D2(*args)

@deprecated
def HLRBRep_SurfaceTool_D3(*args):
	return HLRBRep_SurfaceTool.D3(*args)

@deprecated
def HLRBRep_SurfaceTool_DN(*args):
	return HLRBRep_SurfaceTool.DN(*args)

@deprecated
def HLRBRep_SurfaceTool_Direction(*args):
	return HLRBRep_SurfaceTool.Direction(*args)

@deprecated
def HLRBRep_SurfaceTool_FirstUParameter(*args):
	return HLRBRep_SurfaceTool.FirstUParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_FirstVParameter(*args):
	return HLRBRep_SurfaceTool.FirstVParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_GetType(*args):
	return HLRBRep_SurfaceTool.GetType(*args)

@deprecated
def HLRBRep_SurfaceTool_IsUClosed(*args):
	return HLRBRep_SurfaceTool.IsUClosed(*args)

@deprecated
def HLRBRep_SurfaceTool_IsUPeriodic(*args):
	return HLRBRep_SurfaceTool.IsUPeriodic(*args)

@deprecated
def HLRBRep_SurfaceTool_IsVClosed(*args):
	return HLRBRep_SurfaceTool.IsVClosed(*args)

@deprecated
def HLRBRep_SurfaceTool_IsVPeriodic(*args):
	return HLRBRep_SurfaceTool.IsVPeriodic(*args)

@deprecated
def HLRBRep_SurfaceTool_LastUParameter(*args):
	return HLRBRep_SurfaceTool.LastUParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_LastVParameter(*args):
	return HLRBRep_SurfaceTool.LastVParameter(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesU(*args):
	return HLRBRep_SurfaceTool.NbSamplesU(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesU(*args):
	return HLRBRep_SurfaceTool.NbSamplesU(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesV(*args):
	return HLRBRep_SurfaceTool.NbSamplesV(*args)

@deprecated
def HLRBRep_SurfaceTool_NbSamplesV(*args):
	return HLRBRep_SurfaceTool.NbSamplesV(*args)

@deprecated
def HLRBRep_SurfaceTool_NbUIntervals(*args):
	return HLRBRep_SurfaceTool.NbUIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_NbVIntervals(*args):
	return HLRBRep_SurfaceTool.NbVIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_OffsetValue(*args):
	return HLRBRep_SurfaceTool.OffsetValue(*args)

@deprecated
def HLRBRep_SurfaceTool_Plane(*args):
	return HLRBRep_SurfaceTool.Plane(*args)

@deprecated
def HLRBRep_SurfaceTool_Sphere(*args):
	return HLRBRep_SurfaceTool.Sphere(*args)

@deprecated
def HLRBRep_SurfaceTool_Torus(*args):
	return HLRBRep_SurfaceTool.Torus(*args)

@deprecated
def HLRBRep_SurfaceTool_UIntervals(*args):
	return HLRBRep_SurfaceTool.UIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_UPeriod(*args):
	return HLRBRep_SurfaceTool.UPeriod(*args)

@deprecated
def HLRBRep_SurfaceTool_UResolution(*args):
	return HLRBRep_SurfaceTool.UResolution(*args)

@deprecated
def HLRBRep_SurfaceTool_UTrim(*args):
	return HLRBRep_SurfaceTool.UTrim(*args)

@deprecated
def HLRBRep_SurfaceTool_VIntervals(*args):
	return HLRBRep_SurfaceTool.VIntervals(*args)

@deprecated
def HLRBRep_SurfaceTool_VPeriod(*args):
	return HLRBRep_SurfaceTool.VPeriod(*args)

@deprecated
def HLRBRep_SurfaceTool_VResolution(*args):
	return HLRBRep_SurfaceTool.VResolution(*args)

@deprecated
def HLRBRep_SurfaceTool_VTrim(*args):
	return HLRBRep_SurfaceTool.VTrim(*args)

@deprecated
def HLRBRep_SurfaceTool_Value(*args):
	return HLRBRep_SurfaceTool.Value(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_BeginOfSeg(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.BeginOfSeg(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_Bounding(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.Bounding(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_Closed(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.Closed(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_DeflectionOverEstimation(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.DeflectionOverEstimation(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_Dump(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.Dump(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_EndOfSeg(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.EndOfSeg(*args)

@deprecated
def HLRBRep_ThePolygonToolOfInterCSurf_NbSegments(*args):
	return HLRBRep_ThePolygonToolOfInterCSurf.NbSegments(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Bounding(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Bounding(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_ComponentsBounding(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.ComponentsBounding(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_DeflectionOverEstimation(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.DeflectionOverEstimation(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Dump(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Dump(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_GetBorderDeflection(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.GetBorderDeflection(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_IsOnBound(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.IsOnBound(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_NbTriangles(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.NbTriangles(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Point(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Point(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_TriConnex(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.TriConnex(*args)

@deprecated
def HLRBRep_ThePolyhedronToolOfInterCSurf_Triangle(*args):
	return HLRBRep_ThePolyhedronToolOfInterCSurf.Triangle(*args)

@deprecated
def HLRBRep_TheProjPCurOfCInter_FindParameter(*args):
	return HLRBRep_TheProjPCurOfCInter.FindParameter(*args)

@deprecated
def HLRBRep_TheProjPCurOfCInter_FindParameter(*args):
	return HLRBRep_TheProjPCurOfCInter.FindParameter(*args)




