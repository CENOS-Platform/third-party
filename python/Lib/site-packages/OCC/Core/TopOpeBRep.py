# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
TopOpeBRep module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_topopebrep.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _TopOpeBRep
else:
    import _TopOpeBRep

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _TopOpeBRep.delete_SwigPyIterator

    def value(self):
        return _TopOpeBRep.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _TopOpeBRep.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _TopOpeBRep.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _TopOpeBRep.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _TopOpeBRep.SwigPyIterator_equal(self, x)

    def copy(self):
        return _TopOpeBRep.SwigPyIterator_copy(self)

    def next(self):
        return _TopOpeBRep.SwigPyIterator_next(self)

    def __next__(self):
        return _TopOpeBRep.SwigPyIterator___next__(self)

    def previous(self):
        return _TopOpeBRep.SwigPyIterator_previous(self)

    def advance(self, n):
        return _TopOpeBRep.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _TopOpeBRep.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _TopOpeBRep.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _TopOpeBRep.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _TopOpeBRep.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _TopOpeBRep.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _TopOpeBRep.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _TopOpeBRep:
_TopOpeBRep.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _TopOpeBRep.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BRepTopAdaptor
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.gp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.IntRes2d
import OCC.Core.IntSurf
import OCC.Core.IntPatch
import OCC.Core.Intf
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.IntAna
import OCC.Core.TopOpeBRepDS
import OCC.Core.TopOpeBRepTool
import OCC.Core.BRepClass3d
import OCC.Core.IntCurveSurface
import OCC.Core.TopTools
import OCC.Core.IntCurvesFace
import OCC.Core.TopExp
import OCC.Core.Extrema

from enum import IntEnum
from OCC.Core.Exception import *

TopOpeBRep_P2DUNK = _TopOpeBRep.TopOpeBRep_P2DUNK
TopOpeBRep_P2DINT = _TopOpeBRep.TopOpeBRep_P2DINT
TopOpeBRep_P2DSGF = _TopOpeBRep.TopOpeBRep_P2DSGF
TopOpeBRep_P2DSGL = _TopOpeBRep.TopOpeBRep_P2DSGL
TopOpeBRep_P2DNEW = _TopOpeBRep.TopOpeBRep_P2DNEW
TopOpeBRep_ANALYTIC = _TopOpeBRep.TopOpeBRep_ANALYTIC
TopOpeBRep_RESTRICTION = _TopOpeBRep.TopOpeBRep_RESTRICTION
TopOpeBRep_WALKING = _TopOpeBRep.TopOpeBRep_WALKING
TopOpeBRep_LINE = _TopOpeBRep.TopOpeBRep_LINE
TopOpeBRep_CIRCLE = _TopOpeBRep.TopOpeBRep_CIRCLE
TopOpeBRep_ELLIPSE = _TopOpeBRep.TopOpeBRep_ELLIPSE
TopOpeBRep_PARABOLA = _TopOpeBRep.TopOpeBRep_PARABOLA
TopOpeBRep_HYPERBOLA = _TopOpeBRep.TopOpeBRep_HYPERBOLA
TopOpeBRep_OTHERTYPE = _TopOpeBRep.TopOpeBRep_OTHERTYPE


class TopOpeBRep_P2Dstatus(IntEnum):
	TopOpeBRep_P2DUNK = 0
	TopOpeBRep_P2DINT = 1
	TopOpeBRep_P2DSGF = 2
	TopOpeBRep_P2DSGL = 3
	TopOpeBRep_P2DNEW = 4
TopOpeBRep_P2DUNK = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DUNK
TopOpeBRep_P2DINT = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DINT
TopOpeBRep_P2DSGF = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DSGF
TopOpeBRep_P2DSGL = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DSGL
TopOpeBRep_P2DNEW = TopOpeBRep_P2Dstatus.TopOpeBRep_P2DNEW

class TopOpeBRep_TypeLineCurve(IntEnum):
	TopOpeBRep_ANALYTIC = 0
	TopOpeBRep_RESTRICTION = 1
	TopOpeBRep_WALKING = 2
	TopOpeBRep_LINE = 3
	TopOpeBRep_CIRCLE = 4
	TopOpeBRep_ELLIPSE = 5
	TopOpeBRep_PARABOLA = 6
	TopOpeBRep_HYPERBOLA = 7
	TopOpeBRep_OTHERTYPE = 8
TopOpeBRep_ANALYTIC = TopOpeBRep_TypeLineCurve.TopOpeBRep_ANALYTIC
TopOpeBRep_RESTRICTION = TopOpeBRep_TypeLineCurve.TopOpeBRep_RESTRICTION
TopOpeBRep_WALKING = TopOpeBRep_TypeLineCurve.TopOpeBRep_WALKING
TopOpeBRep_LINE = TopOpeBRep_TypeLineCurve.TopOpeBRep_LINE
TopOpeBRep_CIRCLE = TopOpeBRep_TypeLineCurve.TopOpeBRep_CIRCLE
TopOpeBRep_ELLIPSE = TopOpeBRep_TypeLineCurve.TopOpeBRep_ELLIPSE
TopOpeBRep_PARABOLA = TopOpeBRep_TypeLineCurve.TopOpeBRep_PARABOLA
TopOpeBRep_HYPERBOLA = TopOpeBRep_TypeLineCurve.TopOpeBRep_HYPERBOLA
TopOpeBRep_OTHERTYPE = TopOpeBRep_TypeLineCurve.TopOpeBRep_OTHERTYPE


def Handle_TopOpeBRep_FFDumper_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_Create()

def Handle_TopOpeBRep_FFDumper_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_DownCast(t)

def Handle_TopOpeBRep_FFDumper_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_FFDumper_IsNull(t)

def Handle_TopOpeBRep_Hctxee2d_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_Create()

def Handle_TopOpeBRep_Hctxee2d_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_DownCast(t)

def Handle_TopOpeBRep_Hctxee2d_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxee2d_IsNull(t)

def Handle_TopOpeBRep_Hctxff2d_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_Create()

def Handle_TopOpeBRep_Hctxff2d_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_DownCast(t)

def Handle_TopOpeBRep_Hctxff2d_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_Hctxff2d_IsNull(t)

def Handle_TopOpeBRep_HArray1OfLineInter_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_Create()

def Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t)

def Handle_TopOpeBRep_HArray1OfLineInter_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfLineInter_IsNull(t)

def Handle_TopOpeBRep_HArray1OfVPointInter_Create():
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_Create()

def Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t)

def Handle_TopOpeBRep_HArray1OfVPointInter_IsNull(t):
    return _TopOpeBRep.Handle_TopOpeBRep_HArray1OfVPointInter_IsNull(t)
class TopOpeBRep_Array1OfLineInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_Array1OfLineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Array1OfLineInter(*args))

    def Init(self, theValue):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Init(self, theValue)

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Size(self)

    def Length(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Length(self)

    def IsEmpty(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsEmpty(self)

    def Lower(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Lower(self)

    def Upper(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Upper(self)

    def IsDeletable(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsDeletable(self)

    def IsAllocated(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_IsAllocated(self)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Assign(self, theOther)

    def Move(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Move(self, theOther)

    def Set(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Set(self, *args)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_First(self)

    def ChangeFirst(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeFirst(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Last(self)

    def ChangeLast(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeLast(self)

    def Value(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TopOpeBRep.TopOpeBRep_Array1OfLineInter_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Array1OfLineInter

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TopOpeBRep_Array1OfLineInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Array1OfLineInter_swigregister(TopOpeBRep_Array1OfLineInter)

class TopOpeBRep_Array1OfVPointInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Array1OfVPointInter(*args))

    def Init(self, theValue):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Init(self, theValue)

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Size(self)

    def Length(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Length(self)

    def IsEmpty(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsEmpty(self)

    def Lower(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Lower(self)

    def Upper(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Upper(self)

    def IsDeletable(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsDeletable(self)

    def IsAllocated(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_IsAllocated(self)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Assign(self, theOther)

    def Move(self, theOther):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Move(self, theOther)

    def Set(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Set(self, *args)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_First(self)

    def ChangeFirst(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeFirst(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Last(self)

    def ChangeLast(self):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeLast(self)

    def Value(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _TopOpeBRep.TopOpeBRep_Array1OfVPointInter_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Array1OfVPointInter

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register TopOpeBRep_Array1OfVPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Array1OfVPointInter_swigregister(TopOpeBRep_Array1OfVPointInter)

class TopOpeBRep_DataMapOfTopolTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_DataMapOfTopolTool(*args))

    def Exchange(self, theOther):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Exchange(self, theOther)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Assign(self, theOther)

    def Set(self, theOther):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Set(self, theOther)

    def ReSize(self, N):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ReSize(self, N)

    def Bind(self, theKey, theItem):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Bind(self, theKey, theItem)

    def Bound(self, theKey, theItem):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Bound(self, theKey, theItem)

    def IsBound(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_IsBound(self, theKey)

    def UnBind(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_UnBind(self, theKey)

    def Seek(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Seek(self, theKey)

    def Find(self, *args):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Find(self, *args)

    def ChangeSeek(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ChangeSeek(self, theKey)

    def ChangeFind(self, theKey):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_ChangeFind(self, theKey)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool___call__(self, *args)

    def Clear(self, *args):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Clear(self, *args)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_DataMapOfTopolTool

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_Size(self)

# Register TopOpeBRep_DataMapOfTopolTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_DataMapOfTopolTool_swigregister(TopOpeBRep_DataMapOfTopolTool)

class TopOpeBRep_ListIteratorOfListOfBipoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ListIteratorOfListOfBipoint(*args))

    def More(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_More(self)

    def Next(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_Next(self)

    def Value(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_Value(self)

    def ChangeValue(self):
        return _TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_ChangeValue(self)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ListIteratorOfListOfBipoint

# Register TopOpeBRep_ListIteratorOfListOfBipoint in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ListIteratorOfListOfBipoint_swigregister(TopOpeBRep_ListIteratorOfListOfBipoint)

class TopOpeBRep_ListOfBipoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_ListOfBipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ListOfBipoint(*args))

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Size(self)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Assign(self, theOther)

    def Set(self, theOther):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Set(self, theOther)

    def Clear(self, theAllocator=0):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Clear(self, theAllocator)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_First(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Last(self)

    def Append(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Append(self, *args)

    def Prepend(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Prepend(self, *args)

    def RemoveFirst(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_RemoveFirst(self)

    def Remove(self, theIter):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Remove(self, theIter)

    def InsertBefore(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_InsertAfter(self, *args)

    def Reverse(self):
        return _TopOpeBRep.TopOpeBRep_ListOfBipoint_Reverse(self)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ListOfBipoint

    def __len__(self):
        return self.Size()


# Register TopOpeBRep_ListOfBipoint in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ListOfBipoint_swigregister(TopOpeBRep_ListOfBipoint)

class TopOpeBRep_SequenceOfPoint2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_begin(self)

    def end(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_end(self)

    def cbegin(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_cbegin(self)

    def cend(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_cend(self)

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_SequenceOfPoint2d(*args))

    def Size(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Size(self)

    def Length(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Length(self)

    def Lower(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Lower(self)

    def Upper(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Upper(self)

    def IsEmpty(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_IsEmpty(self)

    def Reverse(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Reverse(self)

    def Exchange(self, I, J):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Assign(self, theOther)

    def Set(self, theOther):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Set(self, theOther)

    def Remove(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Remove(self, *args)

    def Append(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Append(self, *args)

    def Prepend(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Split(self, theIndex, theSeq)

    def First(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_First(self)

    def ChangeFirst(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeFirst(self)

    def Last(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Last(self)

    def ChangeLast(self):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeLast(self)

    def Value(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_SequenceOfPoint2d

    def __len__(self):
        return self.Size()


# Register TopOpeBRep_SequenceOfPoint2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_swigregister(TopOpeBRep_SequenceOfPoint2d)

def TopOpeBRep_SequenceOfPoint2d_delNode(theNode, theAl):
    return _TopOpeBRep.TopOpeBRep_SequenceOfPoint2d_delNode(theNode, theAl)

class topopebrep(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.topopebrep_swiginit(self, _TopOpeBRep.new_topopebrep())
    __swig_destroy__ = _TopOpeBRep.delete_topopebrep

# Register topopebrep in _TopOpeBRep:
_TopOpeBRep.topopebrep_swigregister(topopebrep)

class TopOpeBRep_Bipoint(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        I1: int
        I2: int

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_Bipoint_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Bipoint(*args))

    def I1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_Bipoint_I1(self, *args)

    def I2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_Bipoint_I2(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Bipoint

# Register TopOpeBRep_Bipoint in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Bipoint_swigregister(TopOpeBRep_Bipoint)

class TopOpeBRep_DSFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_DSFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_DSFiller(*args))

    def ChangeEdgesFiller(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_EdgesFiller

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeEdgesFiller(self, *args)

    def ChangeFaceEdgeFiller(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_FaceEdgeFiller

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeFaceEdgeFiller(self, *args)

    def ChangeFacesFiller(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_FacesFiller

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeFacesFiller(self, *args)

    def ChangeShapeIntersector(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_ShapeIntersector

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector(self, *args)

    def ChangeShapeIntersector2d(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_ShapeIntersector2d

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_ChangeShapeIntersector2d(self, *args)

    def Checker(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Checker(self, *args)

    def Complete(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Complete(self, *args)

    def CompleteDS(self, *args):
        r"""
        Update the data structure with relevant information deduced from the intersections. //! shells containing an intersected face. wires containing an intersected edge.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS(self, *args)

    def CompleteDS2d(self, *args):
        r"""
        Update the data structure with relevant information deduced from the intersections 2d. //! shells containing an intersected face. wires containing an intersected edge. //! search for interference identity using edge connexity //nyi.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_CompleteDS2d(self, *args)

    def Filter(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Filter(self, *args)

    def GapFiller(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_GapFiller(self, *args)

    def Insert(self, *args):
        r"""
        Stores in <ds> the intersections of <s1> and <s2>. if orientforward = true s forward,reversed --> forward s external,internal --> external,internal.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure
        orientFORWARD: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert(self, *args)

    def Insert1d(self, *args):
        r"""
        Stores in <ds> the intersections of <s1> and <s2>. s1 and s2 are edges or wires. s1 edges have a 2d representation in face f1 s2 edges have a 2d representation in face f2 f1 is the face which surface is taken as reference for 2d description of s1 and s2 edges. if orientforward = true s forward,reversed --> forward s external,internal --> external,internal.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        F1: TopoDS_Face
        F2: TopoDS_Face
        HDS: TopOpeBRepDS_HDataStructure
        orientFORWARD: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert1d(self, *args)

    def Insert2d(self, *args):
        r"""
        Stores in <ds> the intersections of <s1> and <s2>. s1 et s2 contain only samedomain face.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Insert2d(self, *args)

    def InsertIntersection(self, *args):
        r"""
        Stores in <ds> the intersections of <s1> and <s2>. if orientforward = true s forwar,reversed --> forward s external,internal --> external,internal.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure
        orientFORWARD: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection(self, *args)

    def InsertIntersection2d(self, *args):
        r"""
        S1, s2 set of tangent face lance les intersections 2d pour coder correctement les faces samedomain.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_InsertIntersection2d(self, *args)

    def IsContext1d(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_IsContext1d(self, *args)

    def IsMadeOf1d(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_IsMadeOf1d(self, *args)

    def PShapeClassifier(self, *args):
        r"""
        Return field mypshapeclassifier. set field mypshapeclassifier.

        Returns
        -------
        TopOpeBRepTool_PShapeClassifier

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_PShapeClassifier(self, *args)

    def Reducer(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_Reducer(self, *args)

    def RemoveUnsharedGeometry(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_DSFiller_RemoveUnsharedGeometry(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_DSFiller

# Register TopOpeBRep_DSFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_DSFiller_swigregister(TopOpeBRep_DSFiller)

class TopOpeBRep_EdgesFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_EdgesFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_EdgesFiller(*args))

    def Face(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int
        F: TopoDS_Shape

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_EdgesFiller_Face(self, *args)

    def Insert(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        E1: TopoDS_Shape
        E2: TopoDS_Shape
        EI: TopOpeBRep_EdgesIntersector
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_EdgesFiller_Insert(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_EdgesFiller

# Register TopOpeBRep_EdgesFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_EdgesFiller_swigregister(TopOpeBRep_EdgesFiller)

class TopOpeBRep_EdgesIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_EdgesIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_EdgesIntersector(*args))

    def Curve(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Geom2dAdaptor_Curve

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Curve(self, *args)

    def Dimension(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        D: int

        Returns
        -------
        None
        Set working space dimension d = 1 for e &|| w, 2 for e in f.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Dimension(self, *args)

    def Dump(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        str: str
        ie1: int,optional
        	default value is 0
        ie2: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Dump(self, *args)

    def Edge(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Edge(self, *args)

    def Face(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Face(self, *args)

    def FacesSameOriented(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_FacesSameOriented(self, *args)

    def ForceTolerances(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tol1: float
        Tol2: float

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ForceTolerances(self, *args)

    def HasSegment(self, *args):
        r"""
        True if at least one intersection segment.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_HasSegment(self, *args)

    def InitPoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        selectkeep: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_InitPoint(self, *args)

    def IsEmpty(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_IsEmpty(self, *args)

    def MorePoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_MorePoint(self, *args)

    def NbPoints(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NbPoints(self, *args)

    def NbSegments(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NbSegments(self, *args)

    def NextPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_NextPoint(self, *args)

    def Perform(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        E1: TopoDS_Shape
        E2: TopoDS_Shape
        ReduceSegments: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Perform(self, *args)

    def Point(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_Point2d
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRep_Point2d

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Point(self, *args)

    def Points(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_SequenceOfPoint2d

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Points(self, *args)

    def ReduceSegment(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P1: TopOpeBRep_Point2d
        P2: TopOpeBRep_Point2d
        Pn: TopOpeBRep_Point2d

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ReduceSegment(self, *args)

    def SameDomain(self, *args):
        r"""
        = mysamedomain.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SameDomain(self, *args)

    def SetFaces(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        F1: TopoDS_Shape
        F2: TopoDS_Shape

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        F1: TopoDS_Shape
        F2: TopoDS_Shape
        B1: Bnd_Box
        B2: Bnd_Box

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SetFaces(self, *args)

    def Status1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_P2Dstatus

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Status1(self, *args)

    def Surface(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Index: int

        Returns
        -------
        BRepAdaptor_Surface

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Surface(self, *args)

    def SurfacesSameOriented(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_SurfacesSameOriented(self, *args)

    def ToleranceMax(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_ToleranceMax(self, *args)

    def Tolerances(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        tol1: float
        tol2: float

        """
        return _TopOpeBRep.TopOpeBRep_EdgesIntersector_Tolerances(self, *args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def Tolerance2(self):
    	pass

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_EdgesIntersector

# Register TopOpeBRep_EdgesIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_EdgesIntersector_swigregister(TopOpeBRep_EdgesIntersector)

class TopOpeBRep_FFDumper(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        PFF: TopOpeBRep_PFacesFiller

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_FFDumper_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FFDumper(*args))

    def DumpDSP(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        GK: TopOpeBRepDS_Kind
        G: int
        newinDS: bool

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpDSP(self, *args)

    def DumpLine(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpLine(self, *args)

    def DumpVP(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        ISI: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_DumpVP(self, *args)

    def ExploreIndex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape
        ISI: int

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_ExploreIndex(self, *args)

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        PFF: TopOpeBRep_PFacesFiller

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_Init(self, *args)

    def PFacesFillerDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PFacesFiller

        """
        return _TopOpeBRep.TopOpeBRep_FFDumper_PFacesFillerDummy(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_FFDumper_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FFDumper

# Register TopOpeBRep_FFDumper in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FFDumper_swigregister(TopOpeBRep_FFDumper)

class TopOpeBRep_FFTransitionTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ProcessEdgeONTransition(*args):
        r"""
        Compute transition on 'intpatch_restriction line' edge <r> when crossing edge <e> of face <f> at point <vp>. vp is given on edge <e> of face <f> of index <index> (1 or 2). <vp> has been classified by facesfiller as topabs_on an edge <r> of the other face than <f> of current (face/face) intersection. transition depends on the orientation of e in f. this method should be provided by intpatch_line (nyi).

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        Index: int
        R: TopoDS_Shape
        E: TopoDS_Shape
        F: TopoDS_Shape

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args)

    @staticmethod
    def ProcessEdgeTransition(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: TopOpeBRep_VPointInter
        Index: int
        LineOrientation: TopAbs_Orientation

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args)

    @staticmethod
    def ProcessFaceTransition(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        Index: int
        FaceOrientation: TopAbs_Orientation

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args)

    @staticmethod
    def ProcessLineTransition(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: TopOpeBRep_VPointInter
        Index: int
        EdgeOrientation: TopAbs_Orientation

        Returns
        -------
        TopOpeBRepDS_Transition
        No available documentation.

        Parameters
        ----------
        P: TopOpeBRep_VPointInter
        L: TopOpeBRep_LineInter

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_FFTransitionTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FFTransitionTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FFTransitionTool

# Register TopOpeBRep_FFTransitionTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FFTransitionTool_swigregister(TopOpeBRep_FFTransitionTool)

def TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args):
    r"""
    Compute transition on 'intpatch_restriction line' edge <r> when crossing edge <e> of face <f> at point <vp>. vp is given on edge <e> of face <f> of index <index> (1 or 2). <vp> has been classified by facesfiller as topabs_on an edge <r> of the other face than <f> of current (face/face) intersection. transition depends on the orientation of e in f. this method should be provided by intpatch_line (nyi).

    Parameters
    ----------
    VP: TopOpeBRep_VPointInter
    Index: int
    R: TopoDS_Shape
    E: TopoDS_Shape
    F: TopoDS_Shape

    Returns
    -------
    TopOpeBRepDS_Transition

    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args)

def TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    P: TopOpeBRep_VPointInter
    Index: int
    LineOrientation: TopAbs_Orientation

    Returns
    -------
    TopOpeBRepDS_Transition

    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args)

def TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    L: TopOpeBRep_LineInter
    Index: int
    FaceOrientation: TopAbs_Orientation

    Returns
    -------
    TopOpeBRepDS_Transition

    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args)

def TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    P: TopOpeBRep_VPointInter
    Index: int
    EdgeOrientation: TopAbs_Orientation

    Returns
    -------
    TopOpeBRepDS_Transition
    No available documentation.

    Parameters
    ----------
    P: TopOpeBRep_VPointInter
    L: TopOpeBRep_LineInter

    Returns
    -------
    TopOpeBRepDS_Transition

    """
    return _TopOpeBRep.TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args)

class TopOpeBRep_FaceEdgeFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_FaceEdgeFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FaceEdgeFiller(*args))

    def Insert(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        F: TopoDS_Shape
        E: TopoDS_Shape
        FEINT: TopOpeBRep_FaceEdgeIntersector
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeFiller_Insert(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FaceEdgeFiller

# Register TopOpeBRep_FaceEdgeFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FaceEdgeFiller_swigregister(TopOpeBRep_FaceEdgeFiller)

class TopOpeBRep_FaceEdgeIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FaceEdgeIntersector(*args))

    def ForceTolerance(self, *args):
        r"""
        Force the tolerance values used by the next perform(s1,s2) call.

        Parameters
        ----------
        tol: float

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_ForceTolerance(self, *args)

    def Index(self, *args):
        r"""
        Trace only.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Index(self, *args)

    def InitPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_InitPoint(self, *args)

    def IsEmpty(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsEmpty(self, *args)

    def IsVertex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape
        P: gp_Pnt
        Tol: float
        V: TopoDS_Vertex

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        I: int
        V: TopoDS_Vertex

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_IsVertex(self, *args)

    def MorePoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_MorePoint(self, *args)

    def NbPoints(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NbPoints(self, *args)

    def NextPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_NextPoint(self, *args)

    def Parameter(self, *args):
        r"""
        Parametre de value() sur l'arete.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Parameter(self, *args)

    def Perform(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        F: TopoDS_Shape
        E: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Perform(self, *args)

    def Shape(self, *args):
        r"""
        Returns intersected face or edge according to value of <index> = 1 or 2.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Shape(self, *args)

    def State(self, *args):
        r"""
        In ou on / a la face. les points out ne sont pas retournes.

        Returns
        -------
        TopAbs_State

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_State(self, *args)

    def Tolerance(self, *args):
        r"""
        Return the tolerance value used in the last perform() call if forcetolerance() has been called, return the given value. if not, return value extracted from shapes.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Tolerance(self, *args)

    def Transition(self, *args):
        r"""
        Index = 1 transition par rapport a la face, en cheminant sur l'arete.

        Parameters
        ----------
        Index: int
        FaceOrientation: TopAbs_Orientation

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Transition(self, *args)

    def UVPoint(self, *args):
        r"""
        Parametre de value() sur la face.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_UVPoint(self, *args)

    def Value(self, *args):
        r"""
        Return the 3d point of the current intersection point.

        Returns
        -------
        gp_Pnt

        """
        return _TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FaceEdgeIntersector

# Register TopOpeBRep_FaceEdgeIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FaceEdgeIntersector_swigregister(TopOpeBRep_FaceEdgeIntersector)

class TopOpeBRep_FacesFiller(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_FacesFiller_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FacesFiller(*args))

    def AddShapesLine(self, *args):
        r"""
        Compute 3d curve, pcurves and face/curve interferences for current ndsc. add them to the ds.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_AddShapesLine(self, *args)

    def ChangeDataStructure(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRepDS_DataStructure

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangeDataStructure(self, *args)

    def ChangeFacesIntersector(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_FacesIntersector

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangeFacesIntersector(self, *args)

    def ChangePointClassifier(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PointClassifier

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ChangePointClassifier(self, *args)

    def CheckLine(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_CheckLine(self, *args)

    @staticmethod
    def EqualpPonR(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        Lrest: TopOpeBRep_LineInter
        VP1: TopOpeBRep_VPointInter
        VP2: TopOpeBRep_VPointInter

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_EqualpPonR(*args)

    def Face(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Face

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Face(self, *args)

    def FaceFaceTransition(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        I: int

        Returns
        -------
        TopOpeBRepDS_Transition
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FaceFaceTransition(self, *args)

    def FillLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FillLine(self, *args)

    def FillLineVPonR(self, *args):
        r"""
        Vp processing for restriction line and line sharing same domain with section edges : - if restriction : adds restriction edges as section edges and compute face/edge interference. - if same domain : if line share same domain with section edges, compute parts of line in/in the two faces, and compute curve/point interference for vp boundaries.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_FillLineVPonR(self, *args)

    def GetESL(self, *args):
        r"""
        Get map <mapes > of restriction edges having parts in one of the 2 faces.

        Parameters
        ----------
        LES: TopTools_ListOfShape

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetESL(self, *args)

    def GetFFGeometry(self, *args):
        r"""
        Search for g = geometry of point which is identical to <dsp> among the ds points created in the current face/face intersection ( current insert() call).

        Parameters
        ----------
        DSP: TopOpeBRepDS_Point
        K: TopOpeBRepDS_Kind

        Returns
        -------
        G: int
        Search for g = geometry of point which is identical to <vp> among the ds points created in the current face/face intersection ( current insert() call).

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        K: TopOpeBRepDS_Kind

        Returns
        -------
        G: int

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetFFGeometry(self, *args)

    def GetGeometry(self, *args):
        r"""
        Get the geometry of a ds point <dsp>. search for it with scaninterflist (previous method). if found, set <g> to the geometry of the interference found. else, add the point <dsp> in the <ds> and set <g> to the value of the new geometry such created. returns the value of scaninterflist().

        Parameters
        ----------
        IT: TopOpeBRepDS_ListIteratorOfListOfInterference
        VP: TopOpeBRep_VPointInter
        K: TopOpeBRepDS_Kind

        Returns
        -------
        G: int

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetGeometry(self, *args)

    def GetTraceIndex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        exF1: int
        exF2: int

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_GetTraceIndex(self, *args)

    def HDataStructure(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<TopOpeBRepDS_HDataStructure>

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_HDataStructure(self, *args)

    def Insert(self, *args):
        r"""
        Stores in <ds> the intersections of <s1> and <s2>.

        Parameters
        ----------
        F1: TopoDS_Shape
        F2: TopoDS_Shape
        FACINT: TopOpeBRep_FacesIntersector
        HDS: TopOpeBRepDS_HDataStructure

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Insert(self, *args)

    @staticmethod
    def IsVPtransLok(*args):
        r"""
        Computes the transition <t> of the vpoint <ivp> on the edge of <si12>. returns <false> if the status is unknown.

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        iVP: int
        SI12: int
        T: TopOpeBRepDS_Transition

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_IsVPtransLok(*args)

    @staticmethod
    def LSameDomainERL(*args):
        r"""
        Returns <true> if <l> shares a same geometric domain with at least one of the section edges of <erl>.

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        ERL: TopTools_ListOfShape

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_LSameDomainERL(*args)

    @staticmethod
    def Lminmax(*args):
        r"""
        Computes <pmin> and <pmax> the upper and lower bounds of <l> enclosing all vpoints.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        pmin: float
        pmax: float

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_Lminmax(*args)

    def LoadLine(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_LoadLine(self, *args)

    def MakeGeometry(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        ShapeIndex: int
        K: TopOpeBRepDS_Kind

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_MakeGeometry(self, *args)

    def PDataStructureDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRepDS_PDataStructure

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PDataStructureDummy(self, *args)

    def PFacesIntersectorDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PFacesIntersector

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PFacesIntersectorDummy(self, *args)

    def PLineInterDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PLineInter

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PLineInterDummy(self, *args)

    def PShapeClassifier(self, *args):
        r"""
        Return field mypshapeclassifier.

        Returns
        -------
        TopOpeBRepTool_PShapeClassifier

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_PShapeClassifier(self, *args)

    def ProcessLine(self, *args):
        r"""
        Process current intersection line (set by loadline).

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessLine(self, *args)

    def ProcessRLine(self, *args):
        r"""
        Process current restriction line, adding restriction edge and computing face/edge interference.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessRLine(self, *args)

    def ProcessSectionEdges(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessSectionEdges(self, *args)

    def ProcessVPInotonR(self, *args):
        r"""
        Processing processvpnotonr for vpi.

        Parameters
        ----------
        VPI: TopOpeBRep_VPointInterIterator

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPInotonR(self, *args)

    def ProcessVPIonR(self, *args):
        r"""
        Processing processvponr for vpi.

        Parameters
        ----------
        VPI: TopOpeBRep_VPointInterIterator
        trans1: TopOpeBRepDS_Transition
        F1: TopoDS_Shape
        ShapeIndex: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPIonR(self, *args)

    def ProcessVPR(self, *args):
        r"""
        Calling the following processvpionr and processvponr.

        Parameters
        ----------
        FF: TopOpeBRep_FacesFiller
        VP: TopOpeBRep_VPointInter

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPR(self, *args)

    def ProcessVPnotonR(self, *args):
        r"""
        Adds <vp>'s geometrical point to the ds (if not stored) and computes curve point interference.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPnotonR(self, *args)

    def ProcessVPonR(self, *args):
        r"""
        Adds <vp>'s geometric point (if not stored) and computes (curve or edge)/(point or vertex) interference.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        trans1: TopOpeBRepDS_Transition
        F1: TopoDS_Shape
        ShapeIndex: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonR(self, *args)

    def ProcessVPonclosingR(self, *args):
        r"""
        Vp processing on closing arc.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        F1: TopoDS_Shape
        ShapeIndex: int
        transEdge: TopOpeBRepDS_Transition
        PVKind: TopOpeBRepDS_Kind
        PVIndex: int
        EPIfound: bool
        IEPI: TopOpeBRepDS_Interference

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPonclosingR(self, *args)

    def ProcessVPondgE(self, *args):
        r"""
        Vp processing on degenerated arc.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        ShapeIndex: int
        PVKind: TopOpeBRepDS_Kind
        IEPI: TopOpeBRepDS_Interference
        ICPI: TopOpeBRepDS_Interference

        Returns
        -------
        PVIndex: int
        EPIfound: bool
        CPIfound: bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ProcessVPondgE(self, *args)

    def ResetDSC(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_ResetDSC(self, *args)

    def SetPShapeClassifier(self, *args):
        r"""
        Set field mypshapeclassifier.

        Parameters
        ----------
        PSC: TopOpeBRepTool_PShapeClassifier

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_SetPShapeClassifier(self, *args)

    def SetTraceIndex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        exF1: int
        exF2: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_SetTraceIndex(self, *args)

    def StoreCurveInterference(self, *args):
        r"""
        Add interference <i> to list mydscil. on a given line, at first call, add a new ds curve.

        Parameters
        ----------
        I: TopOpeBRepDS_Interference

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_StoreCurveInterference(self, *args)

    @staticmethod
    def TransvpOK(*args):
        r"""
        Computes transition on line for vp<ivp> on edge restriction of <si>. if <isinout> : returns <true> if transition computed is in/out else : returns <true> if transition computed is out/in.

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        iVP: int
        SI: int
        isINOUT: bool

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_TransvpOK(*args)

    @staticmethod
    def VPParamOnER(*args):
        r"""
        Returns parameter u of vp on the restriction edge.

        Parameters
        ----------
        vp: TopOpeBRep_VPointInter
        Lrest: TopOpeBRep_LineInter

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VPParamOnER(*args)

    def VP_Position(self, *args):
        r"""
        Compute position of vpoints of lines.

        Parameters
        ----------
        FACINT: TopOpeBRep_FacesIntersector

        Returns
        -------
        None
        Compute position of vpoints of line l.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        None
        Compute position of vp with current faces, according to vp.shapeindex() .

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter
        VPC: TopOpeBRep_VPointInterClassifier

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_Position(self, *args)

    def VP_PositionOnL(self, *args):
        r"""
        Compute position of vpoints of non-restriction line l.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnL(self, *args)

    def VP_PositionOnR(self, *args):
        r"""
        Compute position of vpoints of restriction line l.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesFiller_VP_PositionOnR(self, *args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def EqualpP(self):
    	pass

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FacesFiller

# Register TopOpeBRep_FacesFiller in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FacesFiller_swigregister(TopOpeBRep_FacesFiller)

def TopOpeBRep_FacesFiller_EqualpPonR(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    Lrest: TopOpeBRep_LineInter
    VP1: TopOpeBRep_VPointInter
    VP2: TopOpeBRep_VPointInter

    Returns
    -------
    bool

    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_EqualpPonR(*args)

def TopOpeBRep_FacesFiller_IsVPtransLok(*args):
    r"""
    Computes the transition <t> of the vpoint <ivp> on the edge of <si12>. returns <false> if the status is unknown.

    Parameters
    ----------
    L: TopOpeBRep_LineInter
    iVP: int
    SI12: int
    T: TopOpeBRepDS_Transition

    Returns
    -------
    bool

    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_IsVPtransLok(*args)

def TopOpeBRep_FacesFiller_LSameDomainERL(*args):
    r"""
    Returns <true> if <l> shares a same geometric domain with at least one of the section edges of <erl>.

    Parameters
    ----------
    L: TopOpeBRep_LineInter
    ERL: TopTools_ListOfShape

    Returns
    -------
    bool

    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_LSameDomainERL(*args)

def TopOpeBRep_FacesFiller_Lminmax(*args):
    r"""
    Computes <pmin> and <pmax> the upper and lower bounds of <l> enclosing all vpoints.

    Parameters
    ----------
    L: TopOpeBRep_LineInter

    Returns
    -------
    pmin: float
    pmax: float

    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_Lminmax(*args)

def TopOpeBRep_FacesFiller_TransvpOK(*args):
    r"""
    Computes transition on line for vp<ivp> on edge restriction of <si>. if <isinout> : returns <true> if transition computed is in/out else : returns <true> if transition computed is out/in.

    Parameters
    ----------
    L: TopOpeBRep_LineInter
    iVP: int
    SI: int
    isINOUT: bool

    Returns
    -------
    bool

    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_TransvpOK(*args)

def TopOpeBRep_FacesFiller_VPParamOnER(*args):
    r"""
    Returns parameter u of vp on the restriction edge.

    Parameters
    ----------
    vp: TopOpeBRep_VPointInter
    Lrest: TopOpeBRep_LineInter

    Returns
    -------
    float

    """
    return _TopOpeBRep.TopOpeBRep_FacesFiller_VPParamOnER(*args)

class TopOpeBRep_FacesIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_FacesIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_FacesIntersector(*args))

    def ChangeLine(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IL: int

        Returns
        -------
        TopOpeBRep_LineInter

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_ChangeLine(self, *args)

    def CurrentLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_LineInter

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLine(self, *args)

    def CurrentLineIndex(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_CurrentLineIndex(self, *args)

    def Face(self, *args):
        r"""
        Returns first or second intersected face.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Face(self, *args)

    def ForceTolerances(self, *args):
        r"""
        Force the tolerance values used by the next perform(s1,s2) call.

        Parameters
        ----------
        tolarc: float
        toltang: float

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_ForceTolerances(self, *args)

    def GetTolerances(self, *args):
        r"""
        Return the tolerance values used in the last perform() call if forcetolerances() has been called, return the given values. if not, return values extracted from shapes.

        Parameters
        ----------

        Returns
        -------
        tolarc: float
        toltang: float

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_GetTolerances(self, *args)

    def InitLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_InitLine(self, *args)

    def IsDone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsDone(self, *args)

    def IsEmpty(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsEmpty(self, *args)

    def IsRestriction(self, *args):
        r"""
        Returns true if edge <e> is found as same as the edge associated with a restriction line.

        Parameters
        ----------
        E: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_IsRestriction(self, *args)

    def Lines(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<TopOpeBRep_HArray1OfLineInter>

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Lines(self, *args)

    def MoreLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_MoreLine(self, *args)

    def NbLines(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_NbLines(self, *args)

    def NextLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_NextLine(self, *args)

    def Perform(self, *args):
        r"""
        Computes the intersection of faces s1 and s2.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Returns
        -------
        None
        Computes the intersection of faces s1 and s2.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        B1: Bnd_Box
        B2: Bnd_Box

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Perform(self, *args)

    def PrepareLines(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_PrepareLines(self, *args)

    def Restrictions(self, *args):
        r"""
        Returns the map of edges found as topebrepbrep_restriction.

        Returns
        -------
        TopTools_IndexedMapOfShape

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_Restrictions(self, *args)

    def SameDomain(self, *args):
        r"""
        Returns true if perform() arguments are two faces with the same surface.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_SameDomain(self, *args)

    def SurfacesSameOriented(self, *args):
        r"""
        Returns true if perform() arguments are two faces samedomain() and normals on both side. raise if samedomain is false.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_FacesIntersector_SurfacesSameOriented(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_FacesIntersector

# Register TopOpeBRep_FacesIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_FacesIntersector_swigregister(TopOpeBRep_FacesIntersector)

class TopOpeBRep_GeomTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def MakeBSpline1fromWALKING2d(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter
        SI: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args)

    @staticmethod
    def MakeBSpline1fromWALKING3d(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: TopOpeBRep_LineInter

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args)

    @staticmethod
    def MakeCurve(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        min: float
        max: float
        L: TopOpeBRep_LineInter
        C: Geom_Curve

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurve(*args)

    @staticmethod
    def MakeCurves(*args):
        r"""
        Make the ds curve <c> and the pcurves <pc1,pc2> from intersection line <l> lying on shapes <s1,s2>. <min,max> = <l> bounds.

        Parameters
        ----------
        min: float
        max: float
        L: TopOpeBRep_LineInter
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        C: TopOpeBRepDS_Curve
        PC1: Geom2d_Curve
        PC2: Geom2d_Curve

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurves(*args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def MakePrivateCurves(self):
    	pass


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_GeomTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_GeomTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_GeomTool

# Register TopOpeBRep_GeomTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_GeomTool_swigregister(TopOpeBRep_GeomTool)

def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    L: TopOpeBRep_LineInter
    SI: int

    Returns
    -------
    opencascade::handle<Geom2d_Curve>

    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args)

def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    L: TopOpeBRep_LineInter

    Returns
    -------
    opencascade::handle<Geom_Curve>

    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args)

def TopOpeBRep_GeomTool_MakeCurve(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    min: float
    max: float
    L: TopOpeBRep_LineInter
    C: Geom_Curve

    Returns
    -------
    None

    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurve(*args)

def TopOpeBRep_GeomTool_MakeCurves(*args):
    r"""
    Make the ds curve <c> and the pcurves <pc1,pc2> from intersection line <l> lying on shapes <s1,s2>. <min,max> = <l> bounds.

    Parameters
    ----------
    min: float
    max: float
    L: TopOpeBRep_LineInter
    S1: TopoDS_Shape
    S2: TopoDS_Shape
    C: TopOpeBRepDS_Curve
    PC1: Geom2d_Curve
    PC2: Geom2d_Curve

    Returns
    -------
    None

    """
    return _TopOpeBRep.TopOpeBRep_GeomTool_MakeCurves(*args)

class TopOpeBRep_Hctxee2d(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_Hctxee2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Hctxee2d(*args))

    def Curve(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        Geom2dAdaptor_Curve

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Curve(self, *args)

    def Domain(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        IntRes2d_Domain

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Domain(self, *args)

    def Edge(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_Edge(self, *args)

    def SetEdges(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        E1: TopoDS_Edge
        E2: TopoDS_Edge
        BAS1: BRepAdaptor_Surface
        BAS2: BRepAdaptor_Surface

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Hctxee2d_SetEdges(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_Hctxee2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Hctxee2d

# Register TopOpeBRep_Hctxee2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Hctxee2d_swigregister(TopOpeBRep_Hctxee2d)

class TopOpeBRep_Hctxff2d(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_Hctxff2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Hctxff2d(*args))

    def Face(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Face

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_Face(self, *args)

    def FaceSameOrientedWithRef(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_FaceSameOrientedWithRef(self, *args)

    def FacesSameOriented(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_FacesSameOriented(self, *args)

    def GetMaxTolerance(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_GetMaxTolerance(self, *args)

    def GetTolerances(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        Tol1: float
        Tol2: float

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_GetTolerances(self, *args)

    def HSurface(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        opencascade::handle<BRepAdaptor_Surface>

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_HSurface(self, *args)

    def SetFaces(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        F1: TopoDS_Face
        F2: TopoDS_Face

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetFaces(self, *args)

    def SetHSurfaces(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: BRepAdaptor_Surface
        S2: BRepAdaptor_Surface

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetHSurfaces(self, *args)

    def SetTolerances(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tol1: float
        Tol2: float

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SetTolerances(self, *args)

    def SurfacesSameOriented(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_Hctxff2d_SurfacesSameOriented(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_Hctxff2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Hctxff2d

# Register TopOpeBRep_Hctxff2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Hctxff2d_swigregister(TopOpeBRep_Hctxff2d)

class TopOpeBRep_LineInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_LineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_LineInter(*args))

    def Arc(self, *args):
        r"""
        Returns the edge of a restriction line (or a null edge).

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Arc(self, *args)

    def ArcIsEdge(self, *args):
        r"""
        Returns true if arc() edge (of a restriction line) is an edge of the original face <index> (1 or 2).

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ArcIsEdge(self, *args)

    def Bounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        f: float
        l: float

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Bounds(self, *args)

    def ChangeVPoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRep_VPointInter

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ChangeVPoint(self, *args)

    def ComputeFaceFaceTransition(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_ComputeFaceFaceTransition(self, *args)

    def Curve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Curve>
        No available documentation.

        Parameters
        ----------
        parmin: float
        parmax: float

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Curve(self, *args)

    def DumpBipoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        B: TopOpeBRep_Bipoint
        s1: str
        s2: str

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpBipoint(self, *args)

    def DumpLineTransitionsToString(self):
        r"""DumpLineTransitionsToString(TopOpeBRep_LineInter self) -> std::string"""
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpLineTransitionsToString(self)

    def DumpType(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpType(self, *args)

    def DumpVPoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int
        s1: str
        s2: str

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_DumpVPoint(self, *args)

    def FaceFaceTransition(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_FaceFaceTransition(self, *args)

    def GetTraceIndex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        exF1: int
        exF2: int

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_GetTraceIndex(self, *args)

    def HasFirstPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasFirstPoint(self, *args)

    def HasLastPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasLastPoint(self, *args)

    def HasVInternal(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasVInternal(self, *args)

    def HasVPonR(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_HasVPonR(self, *args)

    def INL(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_INL(self, *args)

    def Index(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Index(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_IsPeriodic(self, *args)

    def IsVClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_IsVClosed(self, *args)

    def LineG(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<IntPatch_GLine>

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_LineG(self, *args)

    def LineR(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<IntPatch_RLine>

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_LineR(self, *args)

    def LineW(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<IntPatch_WLine>

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_LineW(self, *args)

    def NbVPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_NbVPoint(self, *args)

    def NbWPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_NbWPoint(self, *args)

    def OK(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_OK(self, *args)

    def Period(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_Period(self, *args)

    def SetFaces(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        F1: TopoDS_Face
        F2: TopoDS_Face

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetFaces(self, *args)

    def SetHasVPonR(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetHasVPonR(self, *args)

    def SetINL(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetINL(self, *args)

    def SetIsVClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetIsVClosed(self, *args)

    def SetLine(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: IntPatch_Line
        S1: BRepAdaptor_Surface
        S2: BRepAdaptor_Surface

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetLine(self, *args)

    def SetOK(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetOK(self, *args)

    def SetTraceIndex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        exF1: int
        exF2: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetTraceIndex(self, *args)

    def SetVPBounds(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SetVPBounds(self, *args)

    def SituationS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_Situation

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SituationS1(self, *args)

    def SituationS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_Situation

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_SituationS2(self, *args)

    def TransitionOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_TypeTrans

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS1(self, *args)

    def TransitionOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_TypeTrans

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_TransitionOnS2(self, *args)

    def TypeLineCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_TypeLineCurve

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_TypeLineCurve(self, *args)

    def VPBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        f: int
        l: int
        n: int

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_VPBounds(self, *args)

    def VPoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRep_VPointInter

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_VPoint(self, *args)

    def WPoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRep_WPointInter

        """
        return _TopOpeBRep.TopOpeBRep_LineInter_WPoint(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_LineInter

# Register TopOpeBRep_LineInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_LineInter_swigregister(TopOpeBRep_LineInter)

class TopOpeBRep_Point2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_Point2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_Point2d(*args))

    def ChangeTransition(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_ChangeTransition(self, *args)

    def Dump(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        ie1: int,optional
        	default value is 0
        ie2: int,optional
        	default value is 0

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Dump(self, *args)

    def EdgesConfig(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRepDS_Config

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_EdgesConfig(self, *args)

    def HasPint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_HasPint(self, *args)

    def Hctxee2d(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<TopOpeBRep_Hctxee2d>

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Hctxee2d(self, *args)

    def Hctxff2d(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<TopOpeBRep_Hctxff2d>

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Hctxff2d(self, *args)

    def Index(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Index(self, *args)

    def IsPointOfSegment(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_IsPointOfSegment(self, *args)

    def IsVertex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_IsVertex(self, *args)

    def Keep(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Keep(self, *args)

    def Parameter(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Parameter(self, *args)

    def Pint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntRes2d_IntersectionPoint

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Pint(self, *args)

    def SegmentAncestors(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        IP1: int
        IP2: int

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SegmentAncestors(self, *args)

    def SetEdgesConfig(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: TopOpeBRepDS_Config

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetEdgesConfig(self, *args)

    def SetHctxee2d(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        ee2d: TopOpeBRep_Hctxee2d

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetHctxee2d(self, *args)

    def SetHctxff2d(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        ff2d: TopOpeBRep_Hctxff2d

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetHctxff2d(self, *args)

    def SetIndex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        X: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIndex(self, *args)

    def SetIsPointOfSegment(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIsPointOfSegment(self, *args)

    def SetIsVertex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int
        B: bool

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetIsVertex(self, *args)

    def SetKeep(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        B: bool

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetKeep(self, *args)

    def SetParameter(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int
        P: float

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetParameter(self, *args)

    def SetPint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: IntRes2d_IntersectionPoint

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetPint(self, *args)

    def SetSegmentAncestors(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IP1: int
        IP2: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetSegmentAncestors(self, *args)

    def SetStatus(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopOpeBRep_P2Dstatus

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetStatus(self, *args)

    def SetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        T: float

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetTolerance(self, *args)

    def SetTransition(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int
        T: TopOpeBRepDS_Transition

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetTransition(self, *args)

    def SetValue(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetValue(self, *args)

    def SetValue2d(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetValue2d(self, *args)

    def SetVertex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int
        V: TopoDS_Vertex

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_SetVertex(self, *args)

    def Status(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_P2Dstatus

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Status(self, *args)

    def Tolerance(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Tolerance(self, *args)

    def Transition(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopOpeBRepDS_Transition

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Transition(self, *args)

    def Value(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Value(self, *args)

    def Value2d(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt2d

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Value2d(self, *args)

    def Vertex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Vertex

        """
        return _TopOpeBRep.TopOpeBRep_Point2d_Vertex(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_Point2d

# Register TopOpeBRep_Point2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_Point2d_swigregister(TopOpeBRep_Point2d)

class TopOpeBRep_PointClassifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_PointClassifier_swiginit(self, _TopOpeBRep.new_TopOpeBRep_PointClassifier(*args))

    def Classify(self, *args):
        r"""
        Compute position of point <p> regarding with the face <f>.

        Parameters
        ----------
        F: TopoDS_Face
        P: gp_Pnt2d
        Tol: float

        Returns
        -------
        TopAbs_State

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Classify(self, *args)

    def Init(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Init(self, *args)

    def Load(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_Load(self, *args)

    def State(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopAbs_State

        """
        return _TopOpeBRep.TopOpeBRep_PointClassifier_State(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_PointClassifier

# Register TopOpeBRep_PointClassifier in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_PointClassifier_swigregister(TopOpeBRep_PointClassifier)

class TopOpeBRep_PointGeomTool(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsEqual(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        DSP1: TopOpeBRepDS_Point
        DSP2: TopOpeBRepDS_Point

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_PointGeomTool_IsEqual(*args)

    @staticmethod
    def MakePoint(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        IP: TopOpeBRep_VPointInter

        Returns
        -------
        TopOpeBRepDS_Point
        No available documentation.

        Parameters
        ----------
        P2D: TopOpeBRep_Point2d

        Returns
        -------
        TopOpeBRepDS_Point
        No available documentation.

        Parameters
        ----------
        FEI: TopOpeBRep_FaceEdgeIntersector

        Returns
        -------
        TopOpeBRepDS_Point
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopOpeBRepDS_Point

        """
        return _TopOpeBRep.TopOpeBRep_PointGeomTool_MakePoint(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _TopOpeBRep.TopOpeBRep_PointGeomTool_swiginit(self, _TopOpeBRep.new_TopOpeBRep_PointGeomTool())
    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_PointGeomTool

# Register TopOpeBRep_PointGeomTool in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_PointGeomTool_swigregister(TopOpeBRep_PointGeomTool)

def TopOpeBRep_PointGeomTool_IsEqual(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    DSP1: TopOpeBRepDS_Point
    DSP2: TopOpeBRepDS_Point

    Returns
    -------
    bool

    """
    return _TopOpeBRep.TopOpeBRep_PointGeomTool_IsEqual(*args)

def TopOpeBRep_PointGeomTool_MakePoint(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    IP: TopOpeBRep_VPointInter

    Returns
    -------
    TopOpeBRepDS_Point
    No available documentation.

    Parameters
    ----------
    P2D: TopOpeBRep_Point2d

    Returns
    -------
    TopOpeBRepDS_Point
    No available documentation.

    Parameters
    ----------
    FEI: TopOpeBRep_FaceEdgeIntersector

    Returns
    -------
    TopOpeBRepDS_Point
    No available documentation.

    Parameters
    ----------
    S: TopoDS_Shape

    Returns
    -------
    TopOpeBRepDS_Point

    """
    return _TopOpeBRep.TopOpeBRep_PointGeomTool_MakePoint(*args)

class TopOpeBRep_ShapeIntersector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_ShapeIntersector_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeIntersector(*args))

    def ChangeEdgesIntersector(self, *args):
        r"""
        Return the current intersection of two edges.

        Returns
        -------
        TopOpeBRep_EdgesIntersector

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeEdgesIntersector(self, *args)

    def ChangeFaceEdgeIntersector(self, *args):
        r"""
        Return the current intersection of a face and an edge.

        Returns
        -------
        TopOpeBRep_FaceEdgeIntersector

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFaceEdgeIntersector(self, *args)

    def ChangeFacesIntersector(self, *args):
        r"""
        Return the current intersection of two faces.

        Returns
        -------
        TopOpeBRep_FacesIntersector

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_ChangeFacesIntersector(self, *args)

    def CurrentGeomShape(self, *args):
        r"""
        Return geometric shape <index> ( = 1 or 2 ) of current intersection.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_CurrentGeomShape(self, *args)

    def DumpCurrent(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        K: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_DumpCurrent(self, *args)

    def GetTolerances(self, *args):
        r"""
        Return max of intersection tolerances with which facesintersector from topopebrep was working.

        Parameters
        ----------

        Returns
        -------
        tol1: float
        tol2: float

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_GetTolerances(self, *args)

    def Index(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        K: int

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_Index(self, *args)

    def InitIntersection(self, *args):
        r"""
        Initialize the intersection of shapes s1,s2.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Returns
        -------
        None
        Initialize the intersection of shapes s1,s2.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape
        F1: TopoDS_Face
        F2: TopoDS_Face

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_InitIntersection(self, *args)

    def MoreIntersection(self, *args):
        r"""
        Returns true if there are more intersection between two the shapes.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_MoreIntersection(self, *args)

    def NextIntersection(self, *args):
        r"""
        Search for the next intersection between the two shapes.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_NextIntersection(self, *args)

    def RejectedFaces(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        anObj: TopoDS_Shape
        aReference: TopoDS_Shape
        aListOfShape: TopTools_ListOfShape

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_RejectedFaces(self, *args)

    def Shape(self, *args):
        r"""
        Return the shape <index> ( = 1 or 2) given to initintersection(). index = 1 will return s1, index = 2 will return s2.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeIntersector

# Register TopOpeBRep_ShapeIntersector in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ShapeIntersector_swigregister(TopOpeBRep_ShapeIntersector)

class TopOpeBRep_ShapeIntersector2d(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeIntersector2d(*args))

    def ChangeEdgesIntersector(self, *args):
        r"""
        Return the current intersection of two edges.

        Returns
        -------
        TopOpeBRep_EdgesIntersector

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_ChangeEdgesIntersector(self, *args)

    def CurrentGeomShape(self, *args):
        r"""
        Return geometric shape <index> ( = 1 or 2 ) of current intersection.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_CurrentGeomShape(self, *args)

    def DumpCurrent(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        K: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_DumpCurrent(self, *args)

    def Index(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        K: int

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Index(self, *args)

    def InitIntersection(self, *args):
        r"""
        Initialize the intersection of shapes s1,s2.

        Parameters
        ----------
        S1: TopoDS_Shape
        S2: TopoDS_Shape

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_InitIntersection(self, *args)

    def MoreIntersection(self, *args):
        r"""
        Returns true if there are more intersection between two the shapes.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_MoreIntersection(self, *args)

    def NextIntersection(self, *args):
        r"""
        Search for the next intersection between the two shapes.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_NextIntersection(self, *args)

    def Shape(self, *args):
        r"""
        Return the shape <index> ( = 1 or 2) given to initintersection(). index = 1 will return s1, index = 2 will return s2.

        Parameters
        ----------
        Index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_ShapeIntersector2d_Shape(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeIntersector2d

# Register TopOpeBRep_ShapeIntersector2d in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ShapeIntersector2d_swigregister(TopOpeBRep_ShapeIntersector2d)

class TopOpeBRep_ShapeScanner(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_ShapeScanner_swiginit(self, _TopOpeBRep.new_TopOpeBRep_ShapeScanner(*args))

    def AddBoxesMakeCOB(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape
        TS: TopAbs_ShapeEnum
        TA: TopAbs_ShapeEnum,optional
        	default value is TopAbs_SHAPE

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_AddBoxesMakeCOB(self, *args)

    def BoxSort(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRepTool_BoxSort

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_BoxSort(self, *args)

    def ChangeBoxSort(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRepTool_BoxSort

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_ChangeBoxSort(self, *args)

    def Clear(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Clear(self, *args)

    def Current(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Current(self, *args)

    def DumpCurrentToString(self):
        r"""DumpCurrentToString(TopOpeBRep_ShapeScanner self) -> std::string"""
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_DumpCurrentToString(self)

    def Index(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Index(self, *args)

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        E: TopoDS_Shape

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        X: TopOpeBRepTool_ShapeExplorer

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Init(self, *args)

    def More(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_More(self, *args)

    def Next(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_ShapeScanner_Next(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_ShapeScanner

# Register TopOpeBRep_ShapeScanner in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_ShapeScanner_swigregister(TopOpeBRep_ShapeScanner)

class TopOpeBRep_VPointInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_VPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInter(*args))

    def ArcOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS1(self, *args)

    def ArcOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ArcOnS2(self, *args)

    def ChangeKeep(self, *args):
        r"""
        Updates vpointinter flag 'keep' with <keep>.

        Parameters
        ----------
        keep: bool

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ChangeKeep(self, *args)

    def Edge(self, *args):
        r"""
        Get the edge of shape i (1,2) containing the point. returned shape is null if the vpoint is not on an edge of shape i (1,2).

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Edge(self, *args)

    def EdgeON(self, *args):
        r"""
        Set the shape eon of shape i (1,2) containing the point, and parameter <par> of point on <eon>.

        Parameters
        ----------
        Eon: TopoDS_Shape
        Par: float
        I: int

        Returns
        -------
        None
        Get the edge of shape i (1,2) containing the point.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeON(self, *args)

    def EdgeONParameter(self, *args):
        r"""
        Get the parameter on edge of shape i (1,2) containing the point.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeONParameter(self, *args)

    def EdgeParameter(self, *args):
        r"""
        Get the parameter on edge of shape i (1,2) containing the point.

        Parameters
        ----------
        I: int

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EdgeParameter(self, *args)

    def EqualpP(self, *args):
        r"""
        Returns <true> if the 3d points and the parameters of the vpoints are same.

        Parameters
        ----------
        VP: TopOpeBRep_VPointInter

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_EqualpP(self, *args)

    def GetShapes(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        I1: int
        I2: int

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_GetShapes(self, *args)

    def Index(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Index(self, *args)

    def IsInternal(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsInternal(self, *args)

    def IsMultiple(self, *args):
        r"""
        Returns true if the point belongs to several intersection lines.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsMultiple(self, *args)

    def IsOnDomS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS1(self, *args)

    def IsOnDomS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsOnDomS2(self, *args)

    def IsVertex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertex(self, *args)

    def IsVertexOnS1(self, *args):
        r"""
        Returns true if the point is a vertex on the initial restriction facet of the first surface.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS1(self, *args)

    def IsVertexOnS2(self, *args):
        r"""
        Returns true if the point is a vertex on the initial restriction facet of the second surface.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_IsVertexOnS2(self, *args)

    def Keep(self, *args):
        r"""
        Returns value of mykeep (does not evaluate states) false at creation of vpoint. updated by state(state from topabs,integer from standard).

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Keep(self, *args)

    def PThePointOfIntersectionDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PThePointOfIntersection

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_PThePointOfIntersectionDummy(self, *args)

    def ParameterOnArc1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc1(self, *args)

    def ParameterOnArc2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnArc2(self, *args)

    def ParameterOnLine(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParameterOnLine(self, *args)

    def ParametersOnS1(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        u: float
        v: float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS1(self, *args)

    def ParametersOnS2(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        u: float
        v: float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParametersOnS2(self, *args)

    def ParonE(self, *args):
        r"""
        Returns <false> if the vpoint is not given on arc <e>, else returns <par> parameter on <e>.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        par: float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ParonE(self, *args)

    def SetPoint(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: IntPatch_Point

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SetPoint(self, *args)

    def SetShapes(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I1: int
        I2: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SetShapes(self, *args)

    def ShapeIndex(self, *args):
        r"""
        Returns value of filed myshapeindex = 0,1,2,3 0 means the vpoint is on no restriction 1 means the vpoint is on the restriction 1 2 means the vpoint is on the restriction 2 3 means the vpoint is on the restrictions 1 and 2.

        Returns
        -------
        int
        Set value of shape supporting me (0,1,2,3).

        Parameters
        ----------
        I: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_ShapeIndex(self, *args)

    def State(self, *args):
        r"""
        Get state of vpoint within the domain of geometric shape domain <i> (= 1 or 2).

        Parameters
        ----------
        I: int

        Returns
        -------
        TopAbs_State
        Set the state of vpoint within the domain of the geometric shape <i> (= 1 or 2).

        Parameters
        ----------
        S: TopAbs_State
        I: int

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_State(self, *args)

    def SurfaceParameters(self, *args):
        r"""
        Get the parameter on surface of shape i (1,2) containing the point.

        Parameters
        ----------
        I: int

        Returns
        -------
        gp_Pnt2d

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_SurfaceParameters(self, *args)

    def Tolerance(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Tolerance(self, *args)

    def TransitionLineArc1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_Transition

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc1(self, *args)

    def TransitionLineArc2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_Transition

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionLineArc2(self, *args)

    def TransitionOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_Transition

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS1(self, *args)

    def TransitionOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        IntSurf_Transition

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_TransitionOnS2(self, *args)

    def UpdateKeep(self, *args):
        r"""
        Set mykeep value according to current states.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_UpdateKeep(self, *args)

    def Value(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Value(self, *args)

    def Vertex(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        I: int

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_Vertex(self, *args)

    def VertexOnS1(self, *args):
        r"""
        Returns the information about the point when it is on the domain of the first patch, i-e when the function isvertexons1 returns true. otherwise, an exception is raised.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS1(self, *args)

    def VertexOnS2(self, *args):
        r"""
        Returns the information about the point when it is on the domain of the second patch, i-e when the function isvertexons2 returns true. otherwise, an exception is raised.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInter_VertexOnS2(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInter

# Register TopOpeBRep_VPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_VPointInter_swigregister(TopOpeBRep_VPointInter)

class TopOpeBRep_VPointInterClassifier(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_VPointInterClassifier_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInterClassifier(*args))

    def Edge(self, *args):
        r"""
        Returns the edge containing the vpoint <vp> used in the last vpointposition() call. edge is defined if the state previously computed is on, else edge is a null shape.

        Returns
        -------
        TopoDS_Shape

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_Edge(self, *args)

    def EdgeParameter(self, *args):
        r"""
        Returns the parameter of the vpoint <vp> on edge().

        Returns
        -------
        float

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_EdgeParameter(self, *args)

    def VPointPosition(self, *args):
        r"""
        Compute position of vpoint <vp> regarding with face <f>. <shapeindex> (= 1,2) indicates which (u,v) point of <vp> is used. when state is on, set vp.edgeon() with the edge containing <vp> and associated parameter. returns state of vp on shapeindex.

        Parameters
        ----------
        F: TopoDS_Shape
        VP: TopOpeBRep_VPointInter
        ShapeIndex: int
        PC: TopOpeBRep_PointClassifier
        AssumeINON: bool
        Tol: float

        Returns
        -------
        TopAbs_State

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterClassifier_VPointPosition(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInterClassifier

# Register TopOpeBRep_VPointInterClassifier in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_VPointInterClassifier_swigregister(TopOpeBRep_VPointInterClassifier)

class TopOpeBRep_VPointInterIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        LI: TopOpeBRep_LineInter

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_VPointInterIterator_swiginit(self, _TopOpeBRep.new_TopOpeBRep_VPointInterIterator(*args))

    def ChangeCurrentVP(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_VPointInter

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_ChangeCurrentVP(self, *args)

    def CurrentVP(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_VPointInter

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVP(self, *args)

    def CurrentVPIndex(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_CurrentVPIndex(self, *args)

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        LI: TopOpeBRep_LineInter
        checkkeep: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_Init(self, *args)

    def More(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_More(self, *args)

    def Next(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_Next(self, *args)

    def PLineInterDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PLineInter

        """
        return _TopOpeBRep.TopOpeBRep_VPointInterIterator_PLineInterDummy(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_VPointInterIterator

# Register TopOpeBRep_VPointInterIterator in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_VPointInterIterator_swigregister(TopOpeBRep_VPointInterIterator)

class TopOpeBRep_WPointInter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_WPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_WPointInter(*args))

    def PPntOn2SDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PPntOn2S

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_PPntOn2SDummy(self, *args)

    def Parameters(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        U1: float
        V1: float
        U2: float
        V2: float

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Parameters(self, *args)

    def ParametersOnS1(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        U: float
        V: float

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS1(self, *args)

    def ParametersOnS2(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        U: float
        V: float

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ParametersOnS2(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: IntSurf_PntOn2S

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Set(self, *args)

    def Value(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_Value(self, *args)

    def ValueOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt2d

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS1(self, *args)

    def ValueOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt2d

        """
        return _TopOpeBRep.TopOpeBRep_WPointInter_ValueOnS2(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_WPointInter

# Register TopOpeBRep_WPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_WPointInter_swigregister(TopOpeBRep_WPointInter)

class TopOpeBRep_WPointInterIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        LI: TopOpeBRep_LineInter

        Returns
        -------
        None

        """
        _TopOpeBRep.TopOpeBRep_WPointInterIterator_swiginit(self, _TopOpeBRep.new_TopOpeBRep_WPointInterIterator(*args))

    def CurrentWP(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_WPointInter

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_CurrentWP(self, *args)

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        LI: TopOpeBRep_LineInter

        Returns
        -------
        None
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_Init(self, *args)

    def More(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_More(self, *args)

    def Next(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_Next(self, *args)

    def PLineInterDummy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        TopOpeBRep_PLineInter

        """
        return _TopOpeBRep.TopOpeBRep_WPointInterIterator_PLineInterDummy(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_WPointInterIterator

# Register TopOpeBRep_WPointInterIterator in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_WPointInterIterator_swigregister(TopOpeBRep_WPointInterIterator)


@classnotwrapped
class TopOpeBRep_traceSIFF:
	pass


class TopOpeBRep_HArray1OfLineInter(TopOpeBRep_Array1OfLineInter, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_HArray1OfLineInter(*args))

    def Array1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_Array1(self)

    def ChangeArray1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfLineInter_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_HArray1OfLineInter_DownCast(t)

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_HArray1OfLineInter

# Register TopOpeBRep_HArray1OfLineInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_HArray1OfLineInter_swigregister(TopOpeBRep_HArray1OfLineInter)

class TopOpeBRep_HArray1OfVPointInter(TopOpeBRep_Array1OfVPointInter, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_swiginit(self, _TopOpeBRep.new_TopOpeBRep_HArray1OfVPointInter(*args))

    def Array1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_Array1(self)

    def ChangeArray1(self):
        return _TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_TopOpeBRep_HArray1OfVPointInter_DownCast(t)

    __swig_destroy__ = _TopOpeBRep.delete_TopOpeBRep_HArray1OfVPointInter

# Register TopOpeBRep_HArray1OfVPointInter in _TopOpeBRep:
_TopOpeBRep.TopOpeBRep_HArray1OfVPointInter_swigregister(TopOpeBRep_HArray1OfVPointInter)




@deprecated
def TopOpeBRep_FFTransitionTool_ProcessEdgeONTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessEdgeONTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessEdgeTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessEdgeTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessFaceTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessFaceTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessLineTransition(*args)

@deprecated
def TopOpeBRep_FFTransitionTool_ProcessLineTransition(*args):
	return TopOpeBRep_FFTransitionTool.ProcessLineTransition(*args)

@deprecated
def TopOpeBRep_FacesFiller_EqualpPonR(*args):
	return TopOpeBRep_FacesFiller.EqualpPonR(*args)

@deprecated
def TopOpeBRep_FacesFiller_IsVPtransLok(*args):
	return TopOpeBRep_FacesFiller.IsVPtransLok(*args)

@deprecated
def TopOpeBRep_FacesFiller_LSameDomainERL(*args):
	return TopOpeBRep_FacesFiller.LSameDomainERL(*args)

@deprecated
def TopOpeBRep_FacesFiller_Lminmax(*args):
	return TopOpeBRep_FacesFiller.Lminmax(*args)

@deprecated
def TopOpeBRep_FacesFiller_TransvpOK(*args):
	return TopOpeBRep_FacesFiller.TransvpOK(*args)

@deprecated
def TopOpeBRep_FacesFiller_VPParamOnER(*args):
	return TopOpeBRep_FacesFiller.VPParamOnER(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING2d(*args):
	return TopOpeBRep_GeomTool.MakeBSpline1fromWALKING2d(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeBSpline1fromWALKING3d(*args):
	return TopOpeBRep_GeomTool.MakeBSpline1fromWALKING3d(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeCurve(*args):
	return TopOpeBRep_GeomTool.MakeCurve(*args)

@deprecated
def TopOpeBRep_GeomTool_MakeCurves(*args):
	return TopOpeBRep_GeomTool.MakeCurves(*args)

@deprecated
def TopOpeBRep_PointGeomTool_IsEqual(*args):
	return TopOpeBRep_PointGeomTool.IsEqual(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)

@deprecated
def TopOpeBRep_PointGeomTool_MakePoint(*args):
	return TopOpeBRep_PointGeomTool.MakePoint(*args)




