# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
ProjLib module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_projlib.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _ProjLib
else:
    import _ProjLib

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _ProjLib.delete_SwigPyIterator

    def value(self):
        return _ProjLib.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _ProjLib.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _ProjLib.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _ProjLib.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _ProjLib.SwigPyIterator_equal(self, x)

    def copy(self):
        return _ProjLib.SwigPyIterator_copy(self)

    def next(self):
        return _ProjLib.SwigPyIterator_next(self)

    def __next__(self):
        return _ProjLib.SwigPyIterator___next__(self)

    def previous(self):
        return _ProjLib.SwigPyIterator_previous(self)

    def advance(self, n):
        return _ProjLib.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _ProjLib.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _ProjLib.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _ProjLib.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _ProjLib.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _ProjLib.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _ProjLib.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _ProjLib:
_ProjLib.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _ProjLib.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.TColgp
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.AppParCurves
import OCC.Core.GeomAdaptor

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_ProjLib_CompProjectedCurve_Create():
    return _ProjLib.Handle_ProjLib_CompProjectedCurve_Create()

def Handle_ProjLib_CompProjectedCurve_DownCast(t):
    return _ProjLib.Handle_ProjLib_CompProjectedCurve_DownCast(t)

def Handle_ProjLib_CompProjectedCurve_IsNull(t):
    return _ProjLib.Handle_ProjLib_CompProjectedCurve_IsNull(t)

def Handle_ProjLib_ProjectOnPlane_Create():
    return _ProjLib.Handle_ProjLib_ProjectOnPlane_Create()

def Handle_ProjLib_ProjectOnPlane_DownCast(t):
    return _ProjLib.Handle_ProjLib_ProjectOnPlane_DownCast(t)

def Handle_ProjLib_ProjectOnPlane_IsNull(t):
    return _ProjLib.Handle_ProjLib_ProjectOnPlane_IsNull(t)

def Handle_ProjLib_ProjectedCurve_Create():
    return _ProjLib.Handle_ProjLib_ProjectedCurve_Create()

def Handle_ProjLib_ProjectedCurve_DownCast(t):
    return _ProjLib.Handle_ProjLib_ProjectedCurve_DownCast(t)

def Handle_ProjLib_ProjectedCurve_IsNull(t):
    return _ProjLib.Handle_ProjLib_ProjectedCurve_IsNull(t)

def Handle_ProjLib_HSequenceOfHSequenceOfPnt_Create():
    return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_Create()

def Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast(t):
    return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast(t)

def Handle_ProjLib_HSequenceOfHSequenceOfPnt_IsNull(t):
    return _ProjLib.Handle_ProjLib_HSequenceOfHSequenceOfPnt_IsNull(t)
class ProjLib_SequenceOfHSequenceOfPnt(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_begin(self)

    def end(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_end(self)

    def cbegin(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_cbegin(self)

    def cend(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_cend(self)

    def __init__(self, *args):
        _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_swiginit(self, _ProjLib.new_ProjLib_SequenceOfHSequenceOfPnt(*args))

    def Size(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Size(self)

    def Length(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Length(self)

    def Lower(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Lower(self)

    def Upper(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Upper(self)

    def IsEmpty(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_IsEmpty(self)

    def Reverse(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Reverse(self)

    def Exchange(self, I, J):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Assign(self, theOther)

    def Set(self, theOther):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Set(self, theOther)

    def Remove(self, *args):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Remove(self, *args)

    def Append(self, *args):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Append(self, *args)

    def Prepend(self, *args):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Split(self, theIndex, theSeq)

    def First(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_First(self)

    def ChangeFirst(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_ChangeFirst(self)

    def Last(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Last(self)

    def ChangeLast(self):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_ChangeLast(self)

    def Value(self, theIndex):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _ProjLib.delete_ProjLib_SequenceOfHSequenceOfPnt

    def __len__(self):
        return self.Size()


# Register ProjLib_SequenceOfHSequenceOfPnt in _ProjLib:
_ProjLib.ProjLib_SequenceOfHSequenceOfPnt_swigregister(ProjLib_SequenceOfHSequenceOfPnt)

def ProjLib_SequenceOfHSequenceOfPnt_delNode(theNode, theAl):
    return _ProjLib.ProjLib_SequenceOfHSequenceOfPnt_delNode(theNode, theAl)

class projlib(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def IsAnaSurf(*args):
        r"""
        Returns 'true' if surface is analytical, that is it can be plane, cylinder, cone, sphere, torus. for all other types of surface method returns 'false'.

        Parameters
        ----------
        theAS: Adaptor3d_Surface

        Returns
        -------
        bool

        """
        return _ProjLib.projlib_IsAnaSurf(*args)

    @staticmethod
    def MakePCurveOfType(*args):
        r"""
        Make empty p-curve <ac> of relevant to <pc> type.

        Parameters
        ----------
        PC: ProjLib_ProjectedCurve
        aC: Geom2d_Curve

        Returns
        -------
        None

        """
        return _ProjLib.projlib_MakePCurveOfType(*args)

    @staticmethod
    def Project(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        Pl: gp_Pln
        P: gp_Pnt

        Returns
        -------
        gp_Pnt2d
        No available documentation.

        Parameters
        ----------
        Pl: gp_Pln
        L: gp_Lin

        Returns
        -------
        gp_Lin2d
        No available documentation.

        Parameters
        ----------
        Pl: gp_Pln
        C: gp_Circ

        Returns
        -------
        gp_Circ2d
        No available documentation.

        Parameters
        ----------
        Pl: gp_Pln
        E: gp_Elips

        Returns
        -------
        gp_Elips2d
        No available documentation.

        Parameters
        ----------
        Pl: gp_Pln
        P: gp_Parab

        Returns
        -------
        gp_Parab2d
        No available documentation.

        Parameters
        ----------
        Pl: gp_Pln
        H: gp_Hypr

        Returns
        -------
        gp_Hypr2d
        No available documentation.

        Parameters
        ----------
        Cy: gp_Cylinder
        P: gp_Pnt

        Returns
        -------
        gp_Pnt2d
        No available documentation.

        Parameters
        ----------
        Cy: gp_Cylinder
        L: gp_Lin

        Returns
        -------
        gp_Lin2d
        No available documentation.

        Parameters
        ----------
        Cy: gp_Cylinder
        Ci: gp_Circ

        Returns
        -------
        gp_Lin2d
        No available documentation.

        Parameters
        ----------
        Co: gp_Cone
        P: gp_Pnt

        Returns
        -------
        gp_Pnt2d
        No available documentation.

        Parameters
        ----------
        Co: gp_Cone
        L: gp_Lin

        Returns
        -------
        gp_Lin2d
        No available documentation.

        Parameters
        ----------
        Co: gp_Cone
        Ci: gp_Circ

        Returns
        -------
        gp_Lin2d
        No available documentation.

        Parameters
        ----------
        Sp: gp_Sphere
        P: gp_Pnt

        Returns
        -------
        gp_Pnt2d
        No available documentation.

        Parameters
        ----------
        Sp: gp_Sphere
        Ci: gp_Circ

        Returns
        -------
        gp_Lin2d
        No available documentation.

        Parameters
        ----------
        To: gp_Torus
        P: gp_Pnt

        Returns
        -------
        gp_Pnt2d
        No available documentation.

        Parameters
        ----------
        To: gp_Torus
        Ci: gp_Circ

        Returns
        -------
        gp_Lin2d

        """
        return _ProjLib.projlib_Project(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _ProjLib.projlib_swiginit(self, _ProjLib.new_projlib())
    __swig_destroy__ = _ProjLib.delete_projlib

# Register projlib in _ProjLib:
_ProjLib.projlib_swigregister(projlib)

def projlib_IsAnaSurf(*args):
    r"""
    Returns 'true' if surface is analytical, that is it can be plane, cylinder, cone, sphere, torus. for all other types of surface method returns 'false'.

    Parameters
    ----------
    theAS: Adaptor3d_Surface

    Returns
    -------
    bool

    """
    return _ProjLib.projlib_IsAnaSurf(*args)

def projlib_MakePCurveOfType(*args):
    r"""
    Make empty p-curve <ac> of relevant to <pc> type.

    Parameters
    ----------
    PC: ProjLib_ProjectedCurve
    aC: Geom2d_Curve

    Returns
    -------
    None

    """
    return _ProjLib.projlib_MakePCurveOfType(*args)

def projlib_Project(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    Pl: gp_Pln
    P: gp_Pnt

    Returns
    -------
    gp_Pnt2d
    No available documentation.

    Parameters
    ----------
    Pl: gp_Pln
    L: gp_Lin

    Returns
    -------
    gp_Lin2d
    No available documentation.

    Parameters
    ----------
    Pl: gp_Pln
    C: gp_Circ

    Returns
    -------
    gp_Circ2d
    No available documentation.

    Parameters
    ----------
    Pl: gp_Pln
    E: gp_Elips

    Returns
    -------
    gp_Elips2d
    No available documentation.

    Parameters
    ----------
    Pl: gp_Pln
    P: gp_Parab

    Returns
    -------
    gp_Parab2d
    No available documentation.

    Parameters
    ----------
    Pl: gp_Pln
    H: gp_Hypr

    Returns
    -------
    gp_Hypr2d
    No available documentation.

    Parameters
    ----------
    Cy: gp_Cylinder
    P: gp_Pnt

    Returns
    -------
    gp_Pnt2d
    No available documentation.

    Parameters
    ----------
    Cy: gp_Cylinder
    L: gp_Lin

    Returns
    -------
    gp_Lin2d
    No available documentation.

    Parameters
    ----------
    Cy: gp_Cylinder
    Ci: gp_Circ

    Returns
    -------
    gp_Lin2d
    No available documentation.

    Parameters
    ----------
    Co: gp_Cone
    P: gp_Pnt

    Returns
    -------
    gp_Pnt2d
    No available documentation.

    Parameters
    ----------
    Co: gp_Cone
    L: gp_Lin

    Returns
    -------
    gp_Lin2d
    No available documentation.

    Parameters
    ----------
    Co: gp_Cone
    Ci: gp_Circ

    Returns
    -------
    gp_Lin2d
    No available documentation.

    Parameters
    ----------
    Sp: gp_Sphere
    P: gp_Pnt

    Returns
    -------
    gp_Pnt2d
    No available documentation.

    Parameters
    ----------
    Sp: gp_Sphere
    Ci: gp_Circ

    Returns
    -------
    gp_Lin2d
    No available documentation.

    Parameters
    ----------
    To: gp_Torus
    P: gp_Pnt

    Returns
    -------
    gp_Pnt2d
    No available documentation.

    Parameters
    ----------
    To: gp_Torus
    Ci: gp_Circ

    Returns
    -------
    gp_Lin2d

    """
    return _ProjLib.projlib_Project(*args)

class ProjLib_CompProjectedCurve(OCC.Core.Adaptor2d.Adaptor2d_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        Try to find all solutions.

        Parameters
        ----------
        S: Adaptor3d_Surface
        C: Adaptor3d_Curve
        TolU: float
        TolV: float

        Returns
        -------
        None
        This constructor tries to optimize the search using the assumption that maximum distance between surface and curve less or equal then maxdist. if maxdist < 0 then algorithm works as above.

        Parameters
        ----------
        S: Adaptor3d_Surface
        C: Adaptor3d_Curve
        TolU: float
        TolV: float
        MaxDist: float

        Returns
        -------
        None
        This constructor tries to optimize the search using the assumption that maximum distance between surface and curve less or equal then maxdist. if maxdist < 0 then algorithm try to find all solutions tolerances of parameters are calculated automatically.

        Parameters
        ----------
        Tol3d: float
        S: Adaptor3d_Surface
        C: Adaptor3d_Curve
        MaxDist: float,optional
        	default value is -1.0

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_CompProjectedCurve_swiginit(self, _ProjLib.new_ProjLib_CompProjectedCurve(*args))

    def Bounds(self, *args):
        r"""
        Returns the bounds of the continuous part corresponding to index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        Udeb: float
        Ufin: float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Bounds(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_D2(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if n < 1. raised if n > 2.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_DN(self, *args)

    def FirstParameter(self, *args):
        r"""
        Returns the first parameter of the curve c which has a projection on s.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_FirstParameter(self, *args)

    def GetCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetCurve(self, *args)

    def GetProj2d(self, *args):
        r"""
        Returns the parameter, which defines necessity of only 2d results.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetProj2d(self, *args)

    def GetProj3d(self, *args):
        r"""
        Returns the parameter, which defines necessity of only 3d results.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetProj3d(self, *args)

    def GetResult2dC(self, *args):
        r"""
        Returns the resulting 2d-curve of projecting of the curve interval with number index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetResult2dC(self, *args)

    def GetResult2dP(self, *args):
        r"""
        Returns the resulting 2d-point of projecting of the curve interval with number index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        gp_Pnt2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetResult2dP(self, *args)

    def GetResult2dUApproxError(self, *args):
        r"""
        Returns the error of approximation of u parameter 2d-curve as a result projecting of the curve interval with number index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetResult2dUApproxError(self, *args)

    def GetResult2dVApproxError(self, *args):
        r"""
        Returns the error of approximation of v parameter 2d-curve as a result projecting of the curve interval with number index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetResult2dVApproxError(self, *args)

    def GetResult3dApproxError(self, *args):
        r"""
        Returns the error of approximation of 3d-curve as a result projecting of the curve interval with number index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetResult3dApproxError(self, *args)

    def GetResult3dC(self, *args):
        r"""
        Returns the resulting 3d-curve of projecting of the curve interval with number index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetResult3dC(self, *args)

    def GetResult3dP(self, *args):
        r"""
        Returns the resulting 3d-point of projecting of the curve interval with number index.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        gp_Pnt

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetResult3dP(self, *args)

    def GetSequence(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<ProjLib_HSequenceOfHSequenceOfPnt>

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetSequence(self, *args)

    def GetSurface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetSurface(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetTolerance(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_CompProjectedCurve_GetType(self, *args)

    def Init(self, *args):
        r"""
        Computes a set of projected point and determine the continuous parts of the projected curves. the points corresponding to a projection on the bounds of the surface are included in this set of points.

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Init(self, *args)

    def Intervals(self, *args):
        r"""
        Returns the parameters corresponding to s discontinuities. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Intervals(self, *args)

    def IsSinglePnt(self, *args):
        r"""
        Returns true if part of projection with number index is a single point and writes its coordinates in p.

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_CompProjectedCurve_IsSinglePnt(self, *args)

    def IsUIso(self, *args):
        r"""
        Returns true if part of projection with number index is an u-isoparametric curve of input surface.

        Parameters
        ----------
        Index: int

        Returns
        -------
        U: float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_IsUIso(self, *args)

    def IsVIso(self, *args):
        r"""
        Returns true if part of projection with number index is an v-isoparametric curve of input surface.

        Parameters
        ----------
        Index: int

        Returns
        -------
        V: float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_IsVIso(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns the last parameter of the curve c which has a projection on s.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_LastParameter(self, *args)

    def Load(self, *args):
        r"""
        Changes the surface.

        Parameters
        ----------
        S: Adaptor3d_Surface

        Returns
        -------
        None
        Changes the curve.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Load(self, *args)

    def MaxDistance(self, *args):
        r"""
        Returns the maximum distance between curve to project and surface.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_CompProjectedCurve_MaxDistance(self, *args)

    def NbCurves(self, *args):
        r"""
        Returns the number of continuous part of the projected curve.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_CompProjectedCurve_NbCurves(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals which define an s continuous part of the projected curve.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_CompProjectedCurve_NbIntervals(self, *args)

    def Perform(self, *args):
        r"""
        Performs projecting for given curve. if projecting uses approximation, approximation parameters can be set before by corresponding methods settol3d(...), secontinuity(...), setmaxdegree(...), setmaxseg(...).

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Perform(self, *args)

    def ResultIsPoint(self, *args):
        r"""
        Returns true if result of projecting of the curve interval with number index is point.

        Parameters
        ----------
        theIndex: int

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_CompProjectedCurve_ResultIsPoint(self, *args)

    def SetContinuity(self, *args):
        r"""
        Set the parameter, which defines curve continuity. default value is geomabs_c2;.

        Parameters
        ----------
        theContinuity: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_SetContinuity(self, *args)

    def SetMaxDegree(self, *args):
        r"""
        Set max possible degree of result bspline curve2d, which is got by approximation. if maxdegree < 0, algorithm uses values that are chosen depending of types curve 3d and surface.

        Parameters
        ----------
        theMaxDegree: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_SetMaxDegree(self, *args)

    def SetMaxSeg(self, *args):
        r"""
        Set the parameter, which defines maximal value of parametric intervals the projected curve can be cut for approximation. if maxseg < 0, algorithm uses default value = 16.

        Parameters
        ----------
        theMaxSeg: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_SetMaxSeg(self, *args)

    def SetProj2d(self, *args):
        r"""
        Set the parameter, which defines necessity of 2d results.

        Parameters
        ----------
        theProj2d: bool

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_SetProj2d(self, *args)

    def SetProj3d(self, *args):
        r"""
        Set the parameter, which defines necessity of 3d results.

        Parameters
        ----------
        theProj3d: bool

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_SetProj3d(self, *args)

    def SetTol3d(self, *args):
        r"""
        Set the parameter, which defines 3d tolerance of approximation.

        Parameters
        ----------
        theTol3d: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_CompProjectedCurve_SetTol3d(self, *args)

    def Trim(self, *args):
        r"""
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 2d points confusion. if <first> >= <last>.

        Parameters
        ----------
        FirstParam: float
        LastParam: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor2d_Curve2d>

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Trim(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _ProjLib.ProjLib_CompProjectedCurve_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ProjLib_CompProjectedCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_CompProjectedCurve

# Register ProjLib_CompProjectedCurve in _ProjLib:
_ProjLib.ProjLib_CompProjectedCurve_swigregister(ProjLib_CompProjectedCurve)

class ProjLib_ComputeApprox(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor, it only sets some initial values for class fields.

        Returns
        -------
        None
        <tol> is the tolerance with which the approximation is performed. other parameters for approximation have default values.

        Parameters
        ----------
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface
        Tol: float

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_ComputeApprox_swiginit(self, _ProjLib.new_ProjLib_ComputeApprox(*args))

    def BSpline(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _ProjLib.ProjLib_ComputeApprox_BSpline(self, *args)

    def Bezier(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BezierCurve>

        """
        return _ProjLib.ProjLib_ComputeApprox_Bezier(self, *args)

    def Perform(self, *args):
        r"""
        Performs projecting. in case of approximation current values of parameters are used: default values or set by corresponding methods set...

        Parameters
        ----------
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApprox_Perform(self, *args)

    def SetBndPnt(self, *args):
        r"""
        Set the parameter, which defines type of boundary condition between segments during approximation. it can be appparcurves_passpoint or appparcurves_tangencypoint. default value is appparcurves_tangencypoint;.

        Parameters
        ----------
        theBndPnt: AppParCurves_Constraint

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApprox_SetBndPnt(self, *args)

    def SetDegree(self, *args):
        r"""
        Set min and max possible degree of result bspline curve2d, which is got by approximation. if thedegmin/max < 0, algorithm uses values that are chosen depending of types curve 3d and surface.

        Parameters
        ----------
        theDegMin: int
        theDegMax: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApprox_SetDegree(self, *args)

    def SetMaxSegments(self, *args):
        r"""
        Set the parameter, which defines maximal value of parametric intervals the projected curve can be cut for approximation. if themaxsegments < 0, algorithm uses default value = 1000.

        Parameters
        ----------
        theMaxSegments: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApprox_SetMaxSegments(self, *args)

    def SetTolerance(self, *args):
        r"""
        Set tolerance of approximation. default value is precision::confusion().

        Parameters
        ----------
        theTolerance: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApprox_SetTolerance(self, *args)

    def Tolerance(self, *args):
        r"""
        Returns the reached tolerance.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ComputeApprox_Tolerance(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_ComputeApprox

# Register ProjLib_ComputeApprox in _ProjLib:
_ProjLib.ProjLib_ComputeApprox_swigregister(ProjLib_ComputeApprox)

class ProjLib_ComputeApproxOnPolarSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor, it only sets some initial values for class fields.

        Returns
        -------
        None
        Constructor, which performs projecting.

        Parameters
        ----------
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface
        Tol: float,optional
        	default value is 1.0e-4

        Returns
        -------
        None
        Constructor, which performs projecting, using initial curve 2d initcurve2d, which is any rough approximation of result curve. parameter tol is 3d tolerance of approximation.

        Parameters
        ----------
        InitCurve2d: Adaptor2d_Curve2d
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface
        Tol: float

        Returns
        -------
        None
        Constructor, which performs projecting, using two initial curves 2d: initcurve2d and initcurve2dbis that are any rough approximations of result curves. this constructor is used to get two pcurves for seem edge. parameter tol is 3d tolerance of approximation.

        Parameters
        ----------
        InitCurve2d: Adaptor2d_Curve2d
        InitCurve2dBis: Adaptor2d_Curve2d
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface
        Tol: float

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_ComputeApproxOnPolarSurface_swiginit(self, _ProjLib.new_ProjLib_ComputeApproxOnPolarSurface(*args))

    def BSpline(self, *args):
        r"""
        Returns result curve 2d.

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_BSpline(self, *args)

    def BuildInitialCurve2d(self, *args):
        r"""
        Builds initial 2d curve as bspline with degree = 1 using extrema algorithm. method is used in method perform(...).

        Parameters
        ----------
        Curve: Adaptor3d_Curve
        S: Adaptor3d_Surface

        Returns
        -------
        opencascade::handle<Adaptor2d_Curve2d>

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_BuildInitialCurve2d(self, *args)

    def Curve2d(self, *args):
        r"""
        Returns second 2d curve.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_Curve2d(self, *args)

    def IsDone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_IsDone(self, *args)

    def Perform(self, *args):
        r"""
        Method, which performs projecting, using default values of parameters or they must be set by corresponding methods before using.

        Parameters
        ----------
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface

        Returns
        -------
        None
        Method, which performs projecting, using default values of parameters or they must be set by corresponding methods before using. parameter initcurve2d is any rough estimation of 2d result curve.

        Parameters
        ----------
        InitCurve2d: Adaptor2d_Curve2d
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_Perform(self, *args)

    def ProjectUsingInitialCurve2d(self, *args):
        r"""
        Method, which performs projecting. method is used in method perform(...).

        Parameters
        ----------
        Curve: Adaptor3d_Curve
        S: Adaptor3d_Surface
        InitCurve2d: Adaptor2d_Curve2d

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_ProjectUsingInitialCurve2d(self, *args)

    def SetBndPnt(self, *args):
        r"""
        Set the parameter, which defines type of boundary condition between segments during approximation. it can be appparcurves_passpoint or appparcurves_tangencypoint. default value is appparcurves_tangencypoint.

        Parameters
        ----------
        theBndPnt: AppParCurves_Constraint

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetBndPnt(self, *args)

    def SetDegree(self, *args):
        r"""
        Set min and max possible degree of result bspline curve2d, which is got by approximation. if thedegmin/max < 0, algorithm uses values min = 2, max = 8.

        Parameters
        ----------
        theDegMin: int
        theDegMax: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetDegree(self, *args)

    def SetMaxDist(self, *args):
        r"""
        Set the parameter, which defines maximal possible distance between projected curve and surface. it is used only for projecting on not analytical surfaces. if themaxdist < 0, algorithm uses default value 100.*tolerance. if real distance between curve and surface more then themaxdist, algorithm stops working.

        Parameters
        ----------
        theMaxDist: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetMaxDist(self, *args)

    def SetMaxSegments(self, *args):
        r"""
        Set the parameter, which defines maximal value of parametric intervals the projected curve can be cut for approximation. if themaxsegments < 0, algorithm uses default value = 1000.

        Parameters
        ----------
        theMaxSegments: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetMaxSegments(self, *args)

    def SetTolerance(self, *args):
        r"""
        Set the tolerance used to project the curve on the surface. default value is precision::approximation().

        Parameters
        ----------
        theTolerance: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_SetTolerance(self, *args)

    def Tolerance(self, *args):
        r"""
        Returns the reached tolerance.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ComputeApproxOnPolarSurface_Tolerance(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_ComputeApproxOnPolarSurface

# Register ProjLib_ComputeApproxOnPolarSurface in _ProjLib:
_ProjLib.ProjLib_ComputeApproxOnPolarSurface_swigregister(ProjLib_ComputeApproxOnPolarSurface)

class ProjLib_PrjFunc(OCC.Core.math.math_FunctionSetWithDerivatives):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_Curve *
        FixVal: float
        S: Adaptor3d_Surface *
        Fix: int

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_PrjFunc_swiginit(self, _ProjLib.new_ProjLib_PrjFunc(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_PrjFunc_Derivatives(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_PrjFunc_NbEquations(self, *args)

    def NbVariables(self, *args):
        r"""
        Returns the number of variables of the function.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_PrjFunc_NbVariables(self, *args)

    def Solution(self, *args):
        r"""
        Returns point on surface.

        Returns
        -------
        gp_Pnt2d

        """
        return _ProjLib.ProjLib_PrjFunc_Solution(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_PrjFunc_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_PrjFunc_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_PrjFunc

# Register ProjLib_PrjFunc in _ProjLib:
_ProjLib.ProjLib_PrjFunc_swigregister(ProjLib_PrjFunc)

class ProjLib_PrjResolve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Adaptor3d_Curve
        S: Adaptor3d_Surface
        Fix: int

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_PrjResolve_swiginit(self, _ProjLib.new_ProjLib_PrjResolve(*args))

    def IsDone(self, *args):
        r"""
        Returns true if the distance is found.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_PrjResolve_IsDone(self, *args)

    def Perform(self, *args):
        r"""
        Calculates the ort from c(t) to s with a close point. the close point is defined by the parameter values u0 and v0. the function f(u,v)=distance(s(u,v),c(t)) has an extremum when gradient(f)=0. the algorithm searches a zero near the close point.

        Parameters
        ----------
        t: float
        U: float
        V: float
        Tol: gp_Pnt2d
        Inf: gp_Pnt2d
        Sup: gp_Pnt2d
        FTol: float,optional
        	default value is -1
        StrictInside: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_PrjResolve_Perform(self, *args)

    def Solution(self, *args):
        r"""
        Returns the point of the extremum distance.

        Returns
        -------
        gp_Pnt2d

        """
        return _ProjLib.ProjLib_PrjResolve_Solution(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_PrjResolve

# Register ProjLib_PrjResolve in _ProjLib:
_ProjLib.ProjLib_PrjResolve_swigregister(ProjLib_PrjResolve)

class ProjLib_ProjectOnPlane(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor.

        Returns
        -------
        None
        The projection will be normal to the plane defined by the ax3 <pl>.

        Parameters
        ----------
        Pl: gp_Ax3

        Returns
        -------
        None
        The projection will be along the direction <d> on the plane defined by the ax3 <pl>. raises if the direction <d> is parallel to the plane <pl>.

        Parameters
        ----------
        Pl: gp_Ax3
        D: gp_Dir

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_ProjectOnPlane_swiginit(self, _ProjLib.new_ProjLib_ProjectOnPlane(*args))

    def BSpline(self, *args):
        r"""
        Warning ! this will not make a copy of the bspline curve : if you want to modify the curve please make a copy yourself also it will not trim the surface to myfirst/last.

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _ProjLib.ProjLib_ProjectOnPlane_BSpline(self, *args)

    def Bezier(self, *args):
        r"""
        Warning ! this will not make a copy of the bezier curve : if you want to modify the curve please make a copy yourself also it will not trim the surface to myfirst/last.

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Bezier(self, *args)

    def Circle(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Circle(self, *args)

    def Continuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Continuity(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectOnPlane_D3(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _ProjLib.ProjLib_ProjectOnPlane_DN(self, *args)

    def Degree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Degree(self, *args)

    def Ellipse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Elips

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Ellipse(self, *args)

    def FirstParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectOnPlane_FirstParameter(self, *args)

    def GetCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _ProjLib.ProjLib_ProjectOnPlane_GetCurve(self, *args)

    def GetDirection(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _ProjLib.ProjLib_ProjectOnPlane_GetDirection(self, *args)

    def GetPlane(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Ax3

        """
        return _ProjLib.ProjLib_ProjectOnPlane_GetPlane(self, *args)

    def GetResult(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<GeomAdaptor_Curve>

        """
        return _ProjLib.ProjLib_ProjectOnPlane_GetResult(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_ProjectOnPlane_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Hypr

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Hyperbola(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Intervals(self, *args)

    def IsClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ProjectOnPlane_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ProjectOnPlane_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ProjectOnPlane_IsRational(self, *args)

    def LastParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectOnPlane_LastParameter(self, *args)

    def Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Line(self, *args)

    def Load(self, *args):
        r"""
        Sets the curve and perform the projection. if <keepparametrization> is true, the parametrization of the projected curve <pc> will be the same as the parametrization of the initial curve <c>. it means: proj(c(u)) = pc(u) for each u. otherwise, the parametrization may change.

        Parameters
        ----------
        C: Adaptor3d_Curve
        Tolerance: float
        KeepParametrization: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Load(self, *args)

    def NbIntervals(self, *args):
        r"""
        If necessary, breaks the curve in intervals of continuity <s>. and returns the number of intervals.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectOnPlane_NbIntervals(self, *args)

    def NbKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectOnPlane_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectOnPlane_NbPoles(self, *args)

    def Parabola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Parab

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Parabola(self, *args)

    def Period(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Period(self, *args)

    def Resolution(self, *args):
        r"""
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Resolution(self, *args)

    def Trim(self, *args):
        r"""
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Trim(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _ProjLib.ProjLib_ProjectOnPlane_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ProjLib_ProjectOnPlane_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_ProjectOnPlane

# Register ProjLib_ProjectOnPlane in _ProjLib:
_ProjLib.ProjLib_ProjectOnPlane_swigregister(ProjLib_ProjectOnPlane)

class ProjLib_ProjectOnSurface(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Create an empty projector.

        Returns
        -------
        None
        Create a projector normally to the surface <s>.

        Parameters
        ----------
        S: Adaptor3d_Surface

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_ProjectOnSurface_swiginit(self, _ProjLib.new_ProjLib_ProjectOnSurface(*args))

    def BSpline(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _ProjLib.ProjLib_ProjectOnSurface_BSpline(self, *args)

    def IsDone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ProjectOnSurface_IsDone(self, *args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def Load(self):
    	pass

    __swig_destroy__ = _ProjLib.delete_ProjLib_ProjectOnSurface

# Register ProjLib_ProjectOnSurface in _ProjLib:
_ProjLib.ProjLib_ProjectOnSurface_swigregister(ProjLib_ProjectOnSurface)

class ProjLib_ProjectedCurve(OCC.Core.Adaptor2d.Adaptor2d_Curve2d):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Empty constructor, it only sets some initial values for class fields.

        Returns
        -------
        None
        Constructor with initialisation field mysurface.

        Parameters
        ----------
        S: Adaptor3d_Surface

        Returns
        -------
        None
        Constructor, which performs projecting. if projecting uses approximation, default parameters are used, in particular, 3d tolerance of approximation is precision::confusion().

        Parameters
        ----------
        S: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None
        Constructor, which performs projecting. if projecting uses approximation, 3d tolerance is tol, default parameters are used, .

        Parameters
        ----------
        S: Adaptor3d_Surface
        C: Adaptor3d_Curve
        Tol: float

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_ProjectedCurve_swiginit(self, _ProjLib.new_ProjLib_ProjectedCurve(*args))

    def BSpline(self, *args):
        r"""
        Warning ! this will not make a copy of the bspline curve - if you want to modify the curve please make a copy yourself also it will not trim the surface to myfirst/last.

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _ProjLib.ProjLib_ProjectedCurve_BSpline(self, *args)

    def Bezier(self, *args):
        r"""
        Warning ! this will not make a copy of the -- bezier curve - if you want to modify -- the curve please make a copy yourself -- also it will not trim the surface to -- myfirst/last.

        Returns
        -------
        opencascade::handle<Geom2d_BezierCurve>

        """
        return _ProjLib.ProjLib_ProjectedCurve_Bezier(self, *args)

    def Circle(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Circ2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Circle(self, *args)

    def Continuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _ProjLib.ProjLib_ProjectedCurve_Continuity(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_D3(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_DN(self, *args)

    def Degree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectedCurve_Degree(self, *args)

    def Ellipse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Elips2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Ellipse(self, *args)

    def FirstParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectedCurve_FirstParameter(self, *args)

    def GetCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _ProjLib.ProjLib_ProjectedCurve_GetCurve(self, *args)

    def GetSurface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _ProjLib.ProjLib_ProjectedCurve_GetSurface(self, *args)

    def GetTolerance(self, *args):
        r"""
        Returns the tolerance reached if an approximation is done.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectedCurve_GetTolerance(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the curve in the current interval : line, circle, ellipse, hyperbola, parabola, beziercurve, bsplinecurve, othercurve.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_ProjectedCurve_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Hypr2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Hyperbola(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_Intervals(self, *args)

    def IsClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ProjectedCurve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ProjectedCurve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_ProjectedCurve_IsRational(self, *args)

    def LastParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectedCurve_LastParameter(self, *args)

    def Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Line(self, *args)

    def NbIntervals(self, *args):
        r"""
        If necessary, breaks the curve in intervals of continuity <s>. and returns the number of intervals.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectedCurve_NbIntervals(self, *args)

    def NbKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectedCurve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _ProjLib.ProjLib_ProjectedCurve_NbPoles(self, *args)

    def Parabola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Parab2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Parabola(self, *args)

    def Perform(self, *args):
        r"""
        Performs projecting for given curve. if projecting uses approximation, approximation parameters can be set before by corresponding methods setdegree(...), setmaxsegmets(...), setbndpnt(...), setmaxdist(...).

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_Perform(self, *args)

    def Period(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectedCurve_Period(self, *args)

    def Resolution(self, *args):
        r"""
        Returns the parametric resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _ProjLib.ProjLib_ProjectedCurve_Resolution(self, *args)

    def SetBndPnt(self, *args):
        r"""
        Set the parameter, which defines type of boundary condition between segments during approximation. it can be appparcurves_passpoint or appparcurves_tangencypoint. default value is appparcurves_tangencypoint;.

        Parameters
        ----------
        theBndPnt: AppParCurves_Constraint

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetBndPnt(self, *args)

    def SetDegree(self, *args):
        r"""
        Set min and max possible degree of result bspline curve2d, which is got by approximation. if thedegmin/max < 0, algorithm uses values that are chosen depending of types curve 3d and surface.

        Parameters
        ----------
        theDegMin: int
        theDegMax: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetDegree(self, *args)

    def SetMaxDist(self, *args):
        r"""
        Set the parameter, which degines maximal possible distance between projected curve and surface. it uses only for projecting on not analytical surfaces. if themaxdist < 0, algorithm uses default value 100.*tolerance. if real distance between curve and surface more then themaxdist, algorithm stops working.

        Parameters
        ----------
        theMaxDist: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetMaxDist(self, *args)

    def SetMaxSegments(self, *args):
        r"""
        Set the parameter, which defines maximal value of parametric intervals the projected curve can be cut for approximation. if themaxsegments < 0, algorithm uses default value = 1000.

        Parameters
        ----------
        theMaxSegments: int

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_ProjectedCurve_SetMaxSegments(self, *args)

    def Trim(self, *args):
        r"""
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor2d_Curve2d>

        """
        return _ProjLib.ProjLib_ProjectedCurve_Trim(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _ProjLib.ProjLib_ProjectedCurve_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_ProjLib_ProjectedCurve_DownCast(t)


    __repr__ = _dumps_object

    @methodnotwrapped
    def Load(self):
    	pass

    __swig_destroy__ = _ProjLib.delete_ProjLib_ProjectedCurve

# Register ProjLib_ProjectedCurve in _ProjLib:
_ProjLib.ProjLib_ProjectedCurve_swigregister(ProjLib_ProjectedCurve)

class ProjLib_Projector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Sets the type to othercurve.

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_Projector_swiginit(self, _ProjLib.new_ProjLib_Projector(*args))

    def BSpline(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BSplineCurve>

        """
        return _ProjLib.ProjLib_Projector_BSpline(self, *args)

    def Bezier(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_BezierCurve>

        """
        return _ProjLib.ProjLib_Projector_Bezier(self, *args)

    def Circle(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Circ2d

        """
        return _ProjLib.ProjLib_Projector_Circle(self, *args)

    def Done(self, *args):
        r"""
        Set isdone = standard_true;.

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_Done(self, *args)

    def Ellipse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Elips2d

        """
        return _ProjLib.ProjLib_Projector_Ellipse(self, *args)

    def GetType(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _ProjLib.ProjLib_Projector_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Hypr2d

        """
        return _ProjLib.ProjLib_Projector_Hyperbola(self, *args)

    def IsDone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_Projector_IsDone(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _ProjLib.ProjLib_Projector_IsPeriodic(self, *args)

    def Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin2d

        """
        return _ProjLib.ProjLib_Projector_Line(self, *args)

    def Parabola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Parab2d

        """
        return _ProjLib.ProjLib_Projector_Parabola(self, *args)

    def Project(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        E: gp_Elips

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        P: gp_Parab

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_Project(self, *args)

    def SetBSpline(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Geom2d_BSplineCurve

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_SetBSpline(self, *args)

    def SetBezier(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        C: Geom2d_BezierCurve

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_SetBezier(self, *args)

    def SetPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_SetPeriodic(self, *args)

    def SetType(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Type: GeomAbs_CurveType

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_SetType(self, *args)

    def UFrame(self, *args):
        r"""
        Translates the 2d curve to set the part of the curve [cfirst, clast] in the range [ ufirst, ufirst + period [.

        Parameters
        ----------
        CFirst: float
        CLast: float
        UFirst: float
        Period: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_UFrame(self, *args)

    def VFrame(self, *args):
        r"""
        Translates the 2d curve to set the part of the curve [cfirst, clast] in the range [ vfirst, vfirst + period [.

        Parameters
        ----------
        CFirst: float
        CLast: float
        VFirst: float
        Period: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Projector_VFrame(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_Projector

# Register ProjLib_Projector in _ProjLib:
_ProjLib.ProjLib_Projector_swigregister(ProjLib_Projector)

class ProjLib_Cone(ProjLib_Projector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Undefined projection.

        Returns
        -------
        None
        Projection on the cone <co>.

        Parameters
        ----------
        Co: gp_Cone

        Returns
        -------
        None
        Projection of the line <l> on the cone <co>.

        Parameters
        ----------
        Co: gp_Cone
        L: gp_Lin

        Returns
        -------
        None
        Projection of the circle <c> on the cone <co>.

        Parameters
        ----------
        Co: gp_Cone
        C: gp_Circ

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_Cone_swiginit(self, _ProjLib.new_ProjLib_Cone(*args))

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Co: gp_Cone

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Cone_Init(self, *args)

    def Project(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        E: gp_Elips

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        P: gp_Parab

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Cone_Project(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_Cone

# Register ProjLib_Cone in _ProjLib:
_ProjLib.ProjLib_Cone_swigregister(ProjLib_Cone)

class ProjLib_Cylinder(ProjLib_Projector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Undefined projection.

        Returns
        -------
        None
        Projection on the cylinder <cyl>.

        Parameters
        ----------
        Cyl: gp_Cylinder

        Returns
        -------
        None
        Projection of the line <l> on the cylinder <cyl>.

        Parameters
        ----------
        Cyl: gp_Cylinder
        L: gp_Lin

        Returns
        -------
        None
        Projection of the circle <c> on the cylinder <cyl>.

        Parameters
        ----------
        Cyl: gp_Cylinder
        C: gp_Circ

        Returns
        -------
        None
        Projection of the ellipse <e> on the cylinder <cyl>.

        Parameters
        ----------
        Cyl: gp_Cylinder
        E: gp_Elips

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_Cylinder_swiginit(self, _ProjLib.new_ProjLib_Cylinder(*args))

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Cyl: gp_Cylinder

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Cylinder_Init(self, *args)

    def Project(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        E: gp_Elips

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        P: gp_Parab

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Cylinder_Project(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_Cylinder

# Register ProjLib_Cylinder in _ProjLib:
_ProjLib.ProjLib_Cylinder_swigregister(ProjLib_Cylinder)

class ProjLib_Plane(ProjLib_Projector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Undefined projection.

        Returns
        -------
        None
        Projection on the plane <pl>.

        Parameters
        ----------
        Pl: gp_Pln

        Returns
        -------
        None
        Projection of the line <l> on the plane <pl>.

        Parameters
        ----------
        Pl: gp_Pln
        L: gp_Lin

        Returns
        -------
        None
        Projection of the circle <c> on the plane <pl>.

        Parameters
        ----------
        Pl: gp_Pln
        C: gp_Circ

        Returns
        -------
        None
        Projection of the ellipse <e> on the plane <pl>.

        Parameters
        ----------
        Pl: gp_Pln
        E: gp_Elips

        Returns
        -------
        None
        Projection of the parabola <p> on the plane <pl>.

        Parameters
        ----------
        Pl: gp_Pln
        P: gp_Parab

        Returns
        -------
        None
        Projection of the hyperbola <h> on the plane <pl>.

        Parameters
        ----------
        Pl: gp_Pln
        H: gp_Hypr

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_Plane_swiginit(self, _ProjLib.new_ProjLib_Plane(*args))

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Pl: gp_Pln

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Plane_Init(self, *args)

    def Project(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        E: gp_Elips

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        P: gp_Parab

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Plane_Project(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_Plane

# Register ProjLib_Plane in _ProjLib:
_ProjLib.ProjLib_Plane_swigregister(ProjLib_Plane)

class ProjLib_Sphere(ProjLib_Projector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Undefined projection.

        Returns
        -------
        None
        Projection on the sphere <sp>.

        Parameters
        ----------
        Sp: gp_Sphere

        Returns
        -------
        None
        Projection of the circle <c> on the sphere <sp>.

        Parameters
        ----------
        Sp: gp_Sphere
        C: gp_Circ

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_Sphere_swiginit(self, _ProjLib.new_ProjLib_Sphere(*args))

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sp: gp_Sphere

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Sphere_Init(self, *args)

    def Project(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        E: gp_Elips

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        P: gp_Parab

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Sphere_Project(self, *args)

    def SetInBounds(self, *args):
        r"""
        Set the point of parameter u on c in the natural restrictions of the sphere.

        Parameters
        ----------
        U: float

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Sphere_SetInBounds(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_Sphere

# Register ProjLib_Sphere in _ProjLib:
_ProjLib.ProjLib_Sphere_swigregister(ProjLib_Sphere)

class ProjLib_Torus(ProjLib_Projector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Undefined projection.

        Returns
        -------
        None
        Projection on the torus <to>.

        Parameters
        ----------
        To: gp_Torus

        Returns
        -------
        None
        Projection of the circle <c> on the torus <to>.

        Parameters
        ----------
        To: gp_Torus
        C: gp_Circ

        Returns
        -------
        None

        """
        _ProjLib.ProjLib_Torus_swiginit(self, _ProjLib.new_ProjLib_Torus(*args))

    def Init(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        To: gp_Torus

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Torus_Init(self, *args)

    def Project(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        L: gp_Lin

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        C: gp_Circ

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        E: gp_Elips

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        P: gp_Parab

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        H: gp_Hypr

        Returns
        -------
        None

        """
        return _ProjLib.ProjLib_Torus_Project(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _ProjLib.delete_ProjLib_Torus

# Register ProjLib_Torus in _ProjLib:
_ProjLib.ProjLib_Torus_swigregister(ProjLib_Torus)

class ProjLib_HSequenceOfHSequenceOfPnt(ProjLib_SequenceOfHSequenceOfPnt, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_swiginit(self, _ProjLib.new_ProjLib_HSequenceOfHSequenceOfPnt(*args))

    def Sequence(self):
        return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_Sequence(self)

    def Append(self, *args):
        return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_Append(self, *args)

    def ChangeSequence(self):
        return _ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_ChangeSequence(self)


    @staticmethod
    def DownCast(t):
      return Handle_ProjLib_HSequenceOfHSequenceOfPnt_DownCast(t)

    __swig_destroy__ = _ProjLib.delete_ProjLib_HSequenceOfHSequenceOfPnt

# Register ProjLib_HSequenceOfHSequenceOfPnt in _ProjLib:
_ProjLib.ProjLib_HSequenceOfHSequenceOfPnt_swigregister(ProjLib_HSequenceOfHSequenceOfPnt)


ProjLib_HCompProjectedCurve=ProjLib_CompProjectedCurve
ProjLib_HProjectedCurve=ProjLib_ProjectedCurve


@deprecated
def projlib_IsAnaSurf(*args):
	return projlib.IsAnaSurf(*args)

@deprecated
def projlib_MakePCurveOfType(*args):
	return projlib.MakePCurveOfType(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)

@deprecated
def projlib_Project(*args):
	return projlib.Project(*args)




