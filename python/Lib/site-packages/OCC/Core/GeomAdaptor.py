# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
GeomAdaptor module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_geomadaptor.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _GeomAdaptor
else:
    import _GeomAdaptor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _GeomAdaptor.delete_SwigPyIterator

    def value(self):
        return _GeomAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _GeomAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _GeomAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _GeomAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _GeomAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _GeomAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _GeomAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _GeomAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _GeomAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _GeomAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _GeomAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _GeomAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _GeomAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _GeomAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _GeomAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _GeomAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _GeomAdaptor:
_GeomAdaptor.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _GeomAdaptor.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_GeomAdaptor_Curve_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_Curve_Create()

def Handle_GeomAdaptor_Curve_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Curve_DownCast(t)

def Handle_GeomAdaptor_Curve_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Curve_IsNull(t)

def Handle_GeomAdaptor_Surface_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_Surface_Create()

def Handle_GeomAdaptor_Surface_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Surface_DownCast(t)

def Handle_GeomAdaptor_Surface_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_Surface_IsNull(t)

def Handle_GeomAdaptor_SurfaceOfLinearExtrusion_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfLinearExtrusion_Create()

def Handle_GeomAdaptor_SurfaceOfLinearExtrusion_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfLinearExtrusion_DownCast(t)

def Handle_GeomAdaptor_SurfaceOfLinearExtrusion_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfLinearExtrusion_IsNull(t)

def Handle_GeomAdaptor_SurfaceOfRevolution_Create():
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfRevolution_Create()

def Handle_GeomAdaptor_SurfaceOfRevolution_DownCast(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfRevolution_DownCast(t)

def Handle_GeomAdaptor_SurfaceOfRevolution_IsNull(t):
    return _GeomAdaptor.Handle_GeomAdaptor_SurfaceOfRevolution_IsNull(t)
class geomadaptor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def MakeCurve(*args):
        r"""
        Inherited from ghcurve. provides a curve handled by reference. build a geom_curve using the information from the curve from adaptor3d.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _GeomAdaptor.geomadaptor_MakeCurve(*args)

    @staticmethod
    def MakeSurface(*args):
        r"""
        Build a geom_surface using the information from the surface from adaptor3d @param thes - surface adaptor to convert. @param thetrimflag - true if perform trim surface values by adaptor and false otherwise.

        Parameters
        ----------
        theS: Adaptor3d_Surface
        theTrimFlag: bool,optional
        	default value is Standard_True

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _GeomAdaptor.geomadaptor_MakeSurface(*args)

    __repr__ = _dumps_object


    def __init__(self):
        _GeomAdaptor.geomadaptor_swiginit(self, _GeomAdaptor.new_geomadaptor())
    __swig_destroy__ = _GeomAdaptor.delete_geomadaptor

# Register geomadaptor in _GeomAdaptor:
_GeomAdaptor.geomadaptor_swigregister(geomadaptor)

def geomadaptor_MakeCurve(*args):
    r"""
    Inherited from ghcurve. provides a curve handled by reference. build a geom_curve using the information from the curve from adaptor3d.

    Parameters
    ----------
    C: Adaptor3d_Curve

    Returns
    -------
    opencascade::handle<Geom_Curve>

    """
    return _GeomAdaptor.geomadaptor_MakeCurve(*args)

def geomadaptor_MakeSurface(*args):
    r"""
    Build a geom_surface using the information from the surface from adaptor3d @param thes - surface adaptor to convert. @param thetrimflag - true if perform trim surface values by adaptor and false otherwise.

    Parameters
    ----------
    theS: Adaptor3d_Surface
    theTrimFlag: bool,optional
    	default value is Standard_True

    Returns
    -------
    opencascade::handle<Geom_Surface>

    """
    return _GeomAdaptor.geomadaptor_MakeSurface(*args)

class GeomAdaptor_Curve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        theCurve: Geom_Curve

        Returns
        -------
        None
        Standard_constructionerror is raised if theufirst>theulast.

        Parameters
        ----------
        theCurve: Geom_Curve
        theUFirst: float
        theULast: float

        Returns
        -------
        None

        """
        _GeomAdaptor.GeomAdaptor_Curve_swiginit(self, _GeomAdaptor.new_GeomAdaptor_Curve(*args))

    def BSpline(self, *args):
        r"""
        This will not make a copy of the bspline curve : if you want to modify the curve please make a copy yourself also it will not trim the surface to myfirst/last.

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _GeomAdaptor.GeomAdaptor_Curve_BSpline(self, *args)

    def Bezier(self, *args):
        r"""
        This will not make a copy of the bezier curve : if you want to modify the curve please make a copy yourself also it will not trim the surface to myfirst/last.

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Bezier(self, *args)

    def Circle(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Circle(self, *args)

    def Continuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Continuity(self, *args)

    def Curve(self, *args):
        r"""
        Provides a curve inherited from hcurve from adaptor. this is inherited to provide easy to use constructors.

        Returns
        -------
        opencascade::handle<Geom_Curve>

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Curve(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameter u.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. //! warning : on the specific case of bsplinecurve: if the curve is cut in interval of continuity at least c1, the derivatives are computed on the current interval. else the derivatives are computed on the basis curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. //! warning : on the specific case of bsplinecurve: if the curve is cut in interval of continuity at least c2, the derivatives are computed on the current interval. else the derivatives are computed on the basis curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. //! warning : on the specific case of bsplinecurve: if the curve is cut in interval of continuity at least c3, the derivatives are computed on the current interval. else the derivatives are computed on the basis curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_D3(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. warning : on the specific case of bsplinecurve: if the curve is cut in interval of continuity cn, the derivatives are computed on the current interval. else the derivatives are computed on the basis curve. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Curve_DN(self, *args)

    def Degree(self, *args):
        r"""
        This should never make a copy of the underlying curve to read the relevant information.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Degree(self, *args)

    def Ellipse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Elips

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Ellipse(self, *args)

    def FirstParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Curve_FirstParameter(self, *args)

    def GetType(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _GeomAdaptor.GeomAdaptor_Curve_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Hypr

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Hyperbola(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Intervals(self, *args)

    def IsClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Curve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Curve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        This should never make a copy of the underlying curve to read the relevant information.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Curve_IsRational(self, *args)

    def LastParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Curve_LastParameter(self, *args)

    def Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Line(self, *args)

    def Load(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theCurve: Geom_Curve

        Returns
        -------
        None
        Standard_constructionerror is raised if theufirst>theulast.

        Parameters
        ----------
        theCurve: Geom_Curve
        theUFirst: float
        theULast: float

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Load(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Curve_NbIntervals(self, *args)

    def NbKnots(self, *args):
        r"""
        This should never make a copy of the underlying curve to read the relevant information.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Curve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        This should never make a copy of the underlying curve to read the relevant information.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Curve_NbPoles(self, *args)

    def OffsetCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_OffsetCurve>

        """
        return _GeomAdaptor.GeomAdaptor_Curve_OffsetCurve(self, *args)

    def Parabola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Parab

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Parabola(self, *args)

    def Period(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Period(self, *args)

    def Reset(self, *args):
        r"""
        Reset currently loaded curve (undone load()).

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Reset(self, *args)

    def Resolution(self, *args):
        r"""
        Returns the parametric resolution.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Resolution(self, *args)

    def Trim(self, *args):
        r"""
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Trim(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _GeomAdaptor.GeomAdaptor_Curve_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Curve

# Register GeomAdaptor_Curve in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_Curve_swigregister(GeomAdaptor_Curve)

class GeomAdaptor_Surface(OCC.Core.Adaptor3d.Adaptor3d_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        theSurf: Geom_Surface

        Returns
        -------
        None
        Standard_constructionerror is raised if ufirst>ulast or vfirst>vlast.

        Parameters
        ----------
        theSurf: Geom_Surface
        theUFirst: float
        theULast: float
        theVFirst: float
        theVLast: float
        theTolU: float,optional
        	default value is 0.0
        theTolV: float,optional
        	default value is 0.0

        Returns
        -------
        None

        """
        _GeomAdaptor.GeomAdaptor_Surface_swiginit(self, _GeomAdaptor.new_GeomAdaptor_Surface(*args))

    def AxeOfRevolution(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Ax1

        """
        return _GeomAdaptor.GeomAdaptor_Surface_AxeOfRevolution(self, *args)

    def BSpline(self, *args):
        r"""
        This will not make a copy of the bspline surface : if you want to modify the surface please make a copy yourself also it will not trim the surface to myu/vfirst/last.

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_BSpline(self, *args)

    def BasisCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_BasisCurve(self, *args)

    def BasisSurface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_BasisSurface(self, *args)

    def Bezier(self, *args):
        r"""
        This will not make a copy of the bezier surface : if you want to modify the surface please make a copy yourself also it will not trim the surface to myu/vfirst/last.

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Bezier(self, *args)

    def Cone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Cone

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Cone(self, *args)

    def Cylinder(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Cylinder

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Cylinder(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameters u,v on the surface.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point and the first derivatives on the surface. //! warning : on the specific case of bsplinesurface: if the surface is cut in interval of continuity at least c1, the derivatives are computed on the current interval. else the derivatives are computed on the basis surface.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D1(self, *args)

    def D2(self, *args):
        r"""
        Computes the point, the first and second derivatives on the surface. //! warning : on the specific case of bsplinesurface: if the surface is cut in interval of continuity at least c2, the derivatives are computed on the current interval. else the derivatives are computed on the basis surface.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D2(self, *args)

    def D3(self, *args):
        r"""
        Computes the point, the first, second and third derivatives on the surface. //! warning : on the specific case of bsplinesurface: if the surface is cut in interval of continuity at least c3, the derivatives are computed on the current interval. else the derivatives are computed on the basis surface.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec
        D3U: gp_Vec
        D3V: gp_Vec
        D3UUV: gp_Vec
        D3UVV: gp_Vec

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_D3(self, *args)

    def DN(self, *args):
        r"""
        Computes the derivative of order nu in the direction u and nv in the direction v at the point p(u, v). //! warning : on the specific case of bsplinesurface: if the surface is cut in interval of continuity cn, the derivatives are computed on the current interval. else the derivatives are computed on the basis surface. raised if nu + nv < 1 or nu < 0 or nv < 0.

        Parameters
        ----------
        U: float
        V: float
        Nu: int
        Nv: int

        Returns
        -------
        gp_Vec

        """
        return _GeomAdaptor.GeomAdaptor_Surface_DN(self, *args)

    def Direction(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Direction(self, *args)

    def FirstUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_FirstUParameter(self, *args)

    def FirstVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_FirstVParameter(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the surface : plane, cylinder, cone, sphere, torus, beziersurface, bsplinesurface, surfaceofrevolution, surfaceofextrusion, othersurface.

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _GeomAdaptor.GeomAdaptor_Surface_GetType(self, *args)

    def IsUClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsUClosed(self, *args)

    def IsUPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsUPeriodic(self, *args)

    def IsURational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsURational(self, *args)

    def IsVClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsVClosed(self, *args)

    def IsVPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsVPeriodic(self, *args)

    def IsVRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_Surface_IsVRational(self, *args)

    def LastUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_LastUParameter(self, *args)

    def LastVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_LastVParameter(self, *args)

    def Load(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theSurf: Geom_Surface

        Returns
        -------
        None
        Standard_constructionerror is raised if theufirst>theulast or thevfirst>thevlast.

        Parameters
        ----------
        theSurf: Geom_Surface
        theUFirst: float
        theULast: float
        theVFirst: float
        theVLast: float
        theTolU: float,optional
        	default value is 0.0
        theTolV: float,optional
        	default value is 0.0

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Load(self, *args)

    def NbUIntervals(self, *args):
        r"""
        Returns the number of u intervals for continuity <s>. may be one if ucontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbUIntervals(self, *args)

    def NbUKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbUKnots(self, *args)

    def NbUPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbUPoles(self, *args)

    def NbVIntervals(self, *args):
        r"""
        Returns the number of v intervals for continuity <s>. may be one if vcontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbVIntervals(self, *args)

    def NbVKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbVKnots(self, *args)

    def NbVPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_NbVPoles(self, *args)

    def OffsetValue(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_OffsetValue(self, *args)

    def Plane(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pln

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Plane(self, *args)

    def Sphere(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Sphere

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Sphere(self, *args)

    def Surface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Surface(self, *args)

    def Torus(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Torus

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Torus(self, *args)

    def UContinuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UContinuity(self, *args)

    def UDegree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UDegree(self, *args)

    def UIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the u direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UIntervals(self, *args)

    def UPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UPeriod(self, *args)

    def UResolution(self, *args):
        r"""
        Returns the parametric u resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UResolution(self, *args)

    def UTrim(self, *args):
        r"""
        Returns a surface trimmed in the u direction equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_UTrim(self, *args)

    def VContinuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VContinuity(self, *args)

    def VDegree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VDegree(self, *args)

    def VIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the v direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VIntervals(self, *args)

    def VPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VPeriod(self, *args)

    def VResolution(self, *args):
        r"""
        Returns the parametric v resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VResolution(self, *args)

    def VTrim(self, *args):
        r"""
        Returns a surface trimmed in the v direction between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_Surface_VTrim(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameters u,v on the surface.

        Parameters
        ----------
        U: float
        V: float

        Returns
        -------
        gp_Pnt

        """
        return _GeomAdaptor.GeomAdaptor_Surface_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_Surface

# Register GeomAdaptor_Surface in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_Surface_swigregister(GeomAdaptor_Surface)

class GeomAdaptor_SurfaceOfLinearExtrusion(GeomAdaptor_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        The curve is loaded.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        None
        Thew curve and the direction are loaded.

        Parameters
        ----------
        C: Adaptor3d_Curve
        V: gp_Dir

        Returns
        -------
        None

        """
        _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swiginit(self, _GeomAdaptor.new_GeomAdaptor_SurfaceOfLinearExtrusion(*args))

    def AxeOfRevolution(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Ax1

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_AxeOfRevolution(self, *args)

    def BSpline(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_BSpline(self, *args)

    def BasisCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_BasisCurve(self, *args)

    def Bezier(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Bezier(self, *args)

    def Cone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Cone

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Cone(self, *args)

    def Cylinder(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Cylinder

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Cylinder(self, *args)

    def Direction(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Direction(self, *args)

    def FirstUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_FirstUParameter(self, *args)

    def FirstVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_FirstVParameter(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the surface : plane, cylinder, cone, sphere, torus, beziersurface, bsplinesurface, surfaceofrevolution, surfaceofextrusion, othersurface.

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_GetType(self, *args)

    def IsUClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsUClosed(self, *args)

    def IsUPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsUPeriodic(self, *args)

    def IsURational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsURational(self, *args)

    def IsVClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsVClosed(self, *args)

    def IsVPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsVPeriodic(self, *args)

    def IsVRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_IsVRational(self, *args)

    def LastUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_LastUParameter(self, *args)

    def LastVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_LastVParameter(self, *args)

    def Load(self, *args):
        r"""
        Changes the curve.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        None
        Changes the direction.

        Parameters
        ----------
        V: gp_Dir

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Load(self, *args)

    def NbUIntervals(self, *args):
        r"""
        Returns the number of u intervals for continuity <s>. may be one if ucontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_NbUIntervals(self, *args)

    def NbUPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_NbUPoles(self, *args)

    def NbVIntervals(self, *args):
        r"""
        Returns the number of v intervals for continuity <s>. may be one if vcontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_NbVIntervals(self, *args)

    def Plane(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pln

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Plane(self, *args)

    def Sphere(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Sphere

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Sphere(self, *args)

    def Torus(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Torus

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_Torus(self, *args)

    def UContinuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UContinuity(self, *args)

    def UDegree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UDegree(self, *args)

    def UIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the u direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UIntervals(self, *args)

    def UPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UPeriod(self, *args)

    def UResolution(self, *args):
        r"""
        Returns the parametric u resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UResolution(self, *args)

    def UTrim(self, *args):
        r"""
        Returns a surface trimmed in the u direction equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_UTrim(self, *args)

    def VContinuity(self, *args):
        r"""
        Return cn.

        Returns
        -------
        GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VContinuity(self, *args)

    def VIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the v direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VIntervals(self, *args)

    def VPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VPeriod(self, *args)

    def VResolution(self, *args):
        r"""
        Returns the parametric v resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VResolution(self, *args)

    def VTrim(self, *args):
        r"""
        Returns a surface trimmed in the v direction between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_VTrim(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_SurfaceOfLinearExtrusion_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfLinearExtrusion

# Register GeomAdaptor_SurfaceOfLinearExtrusion in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_SurfaceOfLinearExtrusion_swigregister(GeomAdaptor_SurfaceOfLinearExtrusion)

class GeomAdaptor_SurfaceOfRevolution(GeomAdaptor_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        The curve is loaded.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        None
        The curve and the direction are loaded.

        Parameters
        ----------
        C: Adaptor3d_Curve
        V: gp_Ax1

        Returns
        -------
        None

        """
        _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swiginit(self, _GeomAdaptor.new_GeomAdaptor_SurfaceOfRevolution(*args))

    def AxeOfRevolution(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Ax1

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_AxeOfRevolution(self, *args)

    def Axis(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Ax3

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Axis(self, *args)

    def BSpline(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_BSpline(self, *args)

    def BasisCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_BasisCurve(self, *args)

    def Bezier(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Bezier(self, *args)

    def Cone(self, *args):
        r"""
        Apex of the cone = cone.position().location() ==> referenceradius = 0.

        Returns
        -------
        gp_Cone

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Cone(self, *args)

    def Cylinder(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Cylinder

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Cylinder(self, *args)

    def FirstUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_FirstUParameter(self, *args)

    def FirstVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_FirstVParameter(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the surface : plane, cylinder, cone, sphere, torus, beziersurface, bsplinesurface, surfaceofrevolution, surfaceofextrusion, othersurface.

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_GetType(self, *args)

    def IsUClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsUClosed(self, *args)

    def IsUPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsUPeriodic(self, *args)

    def IsURational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsURational(self, *args)

    def IsVClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsVClosed(self, *args)

    def IsVPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsVPeriodic(self, *args)

    def IsVRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_IsVRational(self, *args)

    def LastUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_LastUParameter(self, *args)

    def LastVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_LastVParameter(self, *args)

    def Load(self, *args):
        r"""
        Changes the curve.

        Parameters
        ----------
        C: Adaptor3d_Curve

        Returns
        -------
        None
        Changes the direction.

        Parameters
        ----------
        V: gp_Ax1

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Load(self, *args)

    def NbUIntervals(self, *args):
        r"""
        Returns the number of u intervals for continuity <s>. may be one if ucontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbUIntervals(self, *args)

    def NbVIntervals(self, *args):
        r"""
        Returns the number of v intervals for continuity <s>. may be one if vcontinuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbVIntervals(self, *args)

    def NbVKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbVKnots(self, *args)

    def NbVPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_NbVPoles(self, *args)

    def Plane(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pln

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Plane(self, *args)

    def Sphere(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Sphere

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Sphere(self, *args)

    def Torus(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Torus

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_Torus(self, *args)

    def UContinuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UContinuity(self, *args)

    def UIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the u direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UIntervals(self, *args)

    def UPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UPeriod(self, *args)

    def UResolution(self, *args):
        r"""
        Returns the parametric u resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UResolution(self, *args)

    def UTrim(self, *args):
        r"""
        Returns a surface trimmed in the u direction equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_UTrim(self, *args)

    def VContinuity(self, *args):
        r"""
        Return cn.

        Returns
        -------
        GeomAbs_Shape

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VContinuity(self, *args)

    def VDegree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VDegree(self, *args)

    def VIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the v direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VIntervals(self, *args)

    def VPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VPeriod(self, *args)

    def VResolution(self, *args):
        r"""
        Returns the parametric v resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VResolution(self, *args)

    def VTrim(self, *args):
        r"""
        Returns a surface trimmed in the v direction between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_VTrim(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_GeomAdaptor_SurfaceOfRevolution_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _GeomAdaptor.delete_GeomAdaptor_SurfaceOfRevolution

# Register GeomAdaptor_SurfaceOfRevolution in _GeomAdaptor:
_GeomAdaptor.GeomAdaptor_SurfaceOfRevolution_swigregister(GeomAdaptor_SurfaceOfRevolution)




@deprecated
def geomadaptor_MakeCurve(*args):
	return geomadaptor.MakeCurve(*args)

@deprecated
def geomadaptor_MakeSurface(*args):
	return geomadaptor.MakeSurface(*args)




