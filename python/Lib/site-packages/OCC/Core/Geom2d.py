# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
Geom2d module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_geom2d.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _Geom2d
else:
    import _Geom2d

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _Geom2d.delete_SwigPyIterator

    def value(self):
        return _Geom2d.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _Geom2d.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _Geom2d.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _Geom2d.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _Geom2d.SwigPyIterator_equal(self, x)

    def copy(self):
        return _Geom2d.SwigPyIterator_copy(self)

    def next(self):
        return _Geom2d.SwigPyIterator_next(self)

    def __next__(self):
        return _Geom2d.SwigPyIterator___next__(self)

    def previous(self):
        return _Geom2d.SwigPyIterator_previous(self)

    def advance(self, n):
        return _Geom2d.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _Geom2d.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _Geom2d.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _Geom2d.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _Geom2d.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _Geom2d.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _Geom2d.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _Geom2d:
_Geom2d.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _Geom2d.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_Geom2d_Geometry_Create():
    return _Geom2d.Handle_Geom2d_Geometry_Create()

def Handle_Geom2d_Geometry_DownCast(t):
    return _Geom2d.Handle_Geom2d_Geometry_DownCast(t)

def Handle_Geom2d_Geometry_IsNull(t):
    return _Geom2d.Handle_Geom2d_Geometry_IsNull(t)

def Handle_Geom2d_Transformation_Create():
    return _Geom2d.Handle_Geom2d_Transformation_Create()

def Handle_Geom2d_Transformation_DownCast(t):
    return _Geom2d.Handle_Geom2d_Transformation_DownCast(t)

def Handle_Geom2d_Transformation_IsNull(t):
    return _Geom2d.Handle_Geom2d_Transformation_IsNull(t)

def Handle_Geom2d_AxisPlacement_Create():
    return _Geom2d.Handle_Geom2d_AxisPlacement_Create()

def Handle_Geom2d_AxisPlacement_DownCast(t):
    return _Geom2d.Handle_Geom2d_AxisPlacement_DownCast(t)

def Handle_Geom2d_AxisPlacement_IsNull(t):
    return _Geom2d.Handle_Geom2d_AxisPlacement_IsNull(t)

def Handle_Geom2d_Curve_Create():
    return _Geom2d.Handle_Geom2d_Curve_Create()

def Handle_Geom2d_Curve_DownCast(t):
    return _Geom2d.Handle_Geom2d_Curve_DownCast(t)

def Handle_Geom2d_Curve_IsNull(t):
    return _Geom2d.Handle_Geom2d_Curve_IsNull(t)

def Handle_Geom2d_Point_Create():
    return _Geom2d.Handle_Geom2d_Point_Create()

def Handle_Geom2d_Point_DownCast(t):
    return _Geom2d.Handle_Geom2d_Point_DownCast(t)

def Handle_Geom2d_Point_IsNull(t):
    return _Geom2d.Handle_Geom2d_Point_IsNull(t)

def Handle_Geom2d_Vector_Create():
    return _Geom2d.Handle_Geom2d_Vector_Create()

def Handle_Geom2d_Vector_DownCast(t):
    return _Geom2d.Handle_Geom2d_Vector_DownCast(t)

def Handle_Geom2d_Vector_IsNull(t):
    return _Geom2d.Handle_Geom2d_Vector_IsNull(t)

def Handle_Geom2d_BoundedCurve_Create():
    return _Geom2d.Handle_Geom2d_BoundedCurve_Create()

def Handle_Geom2d_BoundedCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_BoundedCurve_DownCast(t)

def Handle_Geom2d_BoundedCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_BoundedCurve_IsNull(t)

def Handle_Geom2d_CartesianPoint_Create():
    return _Geom2d.Handle_Geom2d_CartesianPoint_Create()

def Handle_Geom2d_CartesianPoint_DownCast(t):
    return _Geom2d.Handle_Geom2d_CartesianPoint_DownCast(t)

def Handle_Geom2d_CartesianPoint_IsNull(t):
    return _Geom2d.Handle_Geom2d_CartesianPoint_IsNull(t)

def Handle_Geom2d_Conic_Create():
    return _Geom2d.Handle_Geom2d_Conic_Create()

def Handle_Geom2d_Conic_DownCast(t):
    return _Geom2d.Handle_Geom2d_Conic_DownCast(t)

def Handle_Geom2d_Conic_IsNull(t):
    return _Geom2d.Handle_Geom2d_Conic_IsNull(t)

def Handle_Geom2d_Direction_Create():
    return _Geom2d.Handle_Geom2d_Direction_Create()

def Handle_Geom2d_Direction_DownCast(t):
    return _Geom2d.Handle_Geom2d_Direction_DownCast(t)

def Handle_Geom2d_Direction_IsNull(t):
    return _Geom2d.Handle_Geom2d_Direction_IsNull(t)

def Handle_Geom2d_Line_Create():
    return _Geom2d.Handle_Geom2d_Line_Create()

def Handle_Geom2d_Line_DownCast(t):
    return _Geom2d.Handle_Geom2d_Line_DownCast(t)

def Handle_Geom2d_Line_IsNull(t):
    return _Geom2d.Handle_Geom2d_Line_IsNull(t)

def Handle_Geom2d_OffsetCurve_Create():
    return _Geom2d.Handle_Geom2d_OffsetCurve_Create()

def Handle_Geom2d_OffsetCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_OffsetCurve_DownCast(t)

def Handle_Geom2d_OffsetCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_OffsetCurve_IsNull(t)

def Handle_Geom2d_VectorWithMagnitude_Create():
    return _Geom2d.Handle_Geom2d_VectorWithMagnitude_Create()

def Handle_Geom2d_VectorWithMagnitude_DownCast(t):
    return _Geom2d.Handle_Geom2d_VectorWithMagnitude_DownCast(t)

def Handle_Geom2d_VectorWithMagnitude_IsNull(t):
    return _Geom2d.Handle_Geom2d_VectorWithMagnitude_IsNull(t)

def Handle_Geom2d_BSplineCurve_Create():
    return _Geom2d.Handle_Geom2d_BSplineCurve_Create()

def Handle_Geom2d_BSplineCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_BSplineCurve_DownCast(t)

def Handle_Geom2d_BSplineCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_BSplineCurve_IsNull(t)

def Handle_Geom2d_BezierCurve_Create():
    return _Geom2d.Handle_Geom2d_BezierCurve_Create()

def Handle_Geom2d_BezierCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_BezierCurve_DownCast(t)

def Handle_Geom2d_BezierCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_BezierCurve_IsNull(t)

def Handle_Geom2d_Circle_Create():
    return _Geom2d.Handle_Geom2d_Circle_Create()

def Handle_Geom2d_Circle_DownCast(t):
    return _Geom2d.Handle_Geom2d_Circle_DownCast(t)

def Handle_Geom2d_Circle_IsNull(t):
    return _Geom2d.Handle_Geom2d_Circle_IsNull(t)

def Handle_Geom2d_Ellipse_Create():
    return _Geom2d.Handle_Geom2d_Ellipse_Create()

def Handle_Geom2d_Ellipse_DownCast(t):
    return _Geom2d.Handle_Geom2d_Ellipse_DownCast(t)

def Handle_Geom2d_Ellipse_IsNull(t):
    return _Geom2d.Handle_Geom2d_Ellipse_IsNull(t)

def Handle_Geom2d_Hyperbola_Create():
    return _Geom2d.Handle_Geom2d_Hyperbola_Create()

def Handle_Geom2d_Hyperbola_DownCast(t):
    return _Geom2d.Handle_Geom2d_Hyperbola_DownCast(t)

def Handle_Geom2d_Hyperbola_IsNull(t):
    return _Geom2d.Handle_Geom2d_Hyperbola_IsNull(t)

def Handle_Geom2d_Parabola_Create():
    return _Geom2d.Handle_Geom2d_Parabola_Create()

def Handle_Geom2d_Parabola_DownCast(t):
    return _Geom2d.Handle_Geom2d_Parabola_DownCast(t)

def Handle_Geom2d_Parabola_IsNull(t):
    return _Geom2d.Handle_Geom2d_Parabola_IsNull(t)

def Handle_Geom2d_TrimmedCurve_Create():
    return _Geom2d.Handle_Geom2d_TrimmedCurve_Create()

def Handle_Geom2d_TrimmedCurve_DownCast(t):
    return _Geom2d.Handle_Geom2d_TrimmedCurve_DownCast(t)

def Handle_Geom2d_TrimmedCurve_IsNull(t):
    return _Geom2d.Handle_Geom2d_TrimmedCurve_IsNull(t)
class Geom2d_Geometry(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Copy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Geometry_Copy(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Geometry self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Geometry_DumpJsonToString(self, depth)

    def Mirror(self, *args):
        r"""
        Performs the symmetrical transformation of a geometry with respect to the point p which is the center of the symmetry and assigns the result to this geometric object.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None
        Performs the symmetrical transformation of a geometry with respect to an axis placement which is the axis of the symmetry.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Geometry_Mirror(self, *args)

    def Mirrored(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>
        No available documentation.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Geometry_Mirrored(self, *args)

    def Rotate(self, *args):
        r"""
        Rotates a geometry. p is the center of the rotation. ang is the angular value of the rotation in radians.

        Parameters
        ----------
        P: gp_Pnt2d
        Ang: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Geometry_Rotate(self, *args)

    def Rotated(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        Ang: float

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Geometry_Rotated(self, *args)

    def Scale(self, *args):
        r"""
        Scales a geometry. s is the scaling value.

        Parameters
        ----------
        P: gp_Pnt2d
        S: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Geometry_Scale(self, *args)

    def Scaled(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        P: gp_Pnt2d
        S: float

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Geometry_Scaled(self, *args)

    def Transform(self, *args):
        r"""
        Transformation of a geometric object. this tansformation can be a translation, a rotation, a symmetry, a scaling or a complex transformation obtained by combination of the previous elementaries transformations. (see class transformation of the package geom2d). the following transformations have the same properties as the previous ones but they don't modified the object itself. a copy of the object is returned.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Geometry_Transform(self, *args)

    def Transformed(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Geometry_Transformed(self, *args)

    def Translate(self, *args):
        r"""
        Translates a geometry. v is the vector of the translation.

        Parameters
        ----------
        V: gp_Vec2d

        Returns
        -------
        None
        Translates a geometry from the point p1 to the point p2.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Geometry_Translate(self, *args)

    def Translated(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        V: gp_Vec2d

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>
        No available documentation.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Geometry_Translated(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Geometry_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Geometry

# Register Geom2d_Geometry in _Geom2d:
_Geom2d.Geom2d_Geometry_swigregister(Geom2d_Geometry)

class Geom2d_Transformation(OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an identity transformation.

        Returns
        -------
        None
        Creates a persistent copy of t.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_Transformation_swiginit(self, _Geom2d.new_Geom2d_Transformation(*args))

    def Copy(self, *args):
        r"""
        Creates a new object, which is a copy of this transformation.

        Returns
        -------
        opencascade::handle<Geom2d_Transformation>

        """
        return _Geom2d.Geom2d_Transformation_Copy(self, *args)

    def Form(self, *args):
        r"""
        Returns the nature of this transformation as a value of the gp_trsfform enumeration. returns the nature of the transformation. it can be identity, rotation, translation, pntmirror, ax1mirror, scale, compoundtrsf.

        Returns
        -------
        gp_TrsfForm

        """
        return _Geom2d.Geom2d_Transformation_Form(self, *args)

    def Invert(self, *args):
        r"""
        Computes the inverse of this transformation. and assigns the result to this transformatio //! raised if the transformation is singular. this means that the scalefactor is lower or equal to resolution from package gp.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_Invert(self, *args)

    def Inverted(self, *args):
        r"""
        Computes the inverse of this transformation and creates a new one. raises constructionerror if the transformation is singular. this means that the scalefactor is lower or equal to resolution from package gp.

        Returns
        -------
        opencascade::handle<Geom2d_Transformation>

        """
        return _Geom2d.Geom2d_Transformation_Inverted(self, *args)

    def IsNegative(self, *args):
        r"""
        Checks whether this transformation is an indirect transformation: returns true if the determinant of the matrix of the vectorial part of the transformation is less than 0.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Transformation_IsNegative(self, *args)

    def Multiplied(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Other: Geom2d_Transformation

        Returns
        -------
        opencascade::handle<Geom2d_Transformation>

        """
        return _Geom2d.Geom2d_Transformation_Multiplied(self, *args)

    def Multiply(self, *args):
        r"""
        Computes the transformation composed with other and <self> . <self> = <self> * other. //! computes the following composition of transformations if n > 0 <self> * <self> * .......* <self>. if n = 0 identity if n < 0 <self>.invert() * .........* <self>.invert().

        Parameters
        ----------
        Other: Geom2d_Transformation

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_Multiply(self, *args)

    def Power(self, *args):
        r"""
        Raised if n < 0 and if the transformation is not inversible.

        Parameters
        ----------
        N: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_Power(self, *args)

    def Powered(self, *args):
        r"""
        Raised if n < 0 and if the transformation is not inversible.

        Parameters
        ----------
        N: int

        Returns
        -------
        opencascade::handle<Geom2d_Transformation>

        """
        return _Geom2d.Geom2d_Transformation_Powered(self, *args)

    def PreMultiply(self, *args):
        r"""
        Computes the matrix of the transformation composed with <self> and other. <self> = other * <self>.

        Parameters
        ----------
        Other: Geom2d_Transformation

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_PreMultiply(self, *args)

    def ScaleFactor(self, *args):
        r"""
        Returns the scale value of the transformation.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Transformation_ScaleFactor(self, *args)

    def SetMirror(self, *args):
        r"""
        Makes the transformation into a symmetrical transformation with respect to a point p. p is the center of the symmetry.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None
        Makes the transformation into a symmetrical transformation with respect to an axis a. a is the center of the axial symmetry.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_SetMirror(self, *args)

    def SetRotation(self, *args):
        r"""
        Assigns to this transformation the geometric properties of a rotation at angle ang (in radians) about point p.

        Parameters
        ----------
        P: gp_Pnt2d
        Ang: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_SetRotation(self, *args)

    def SetScale(self, *args):
        r"""
        Makes the transformation into a scale. p is the center of the scale and s is the scaling value.

        Parameters
        ----------
        P: gp_Pnt2d
        S: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_SetScale(self, *args)

    def SetTransformation(self, *args):
        r"""
        Makes a transformation allowing passage from the coordinate system 'fromsystem1' to the coordinate system 'tosystem2'.

        Parameters
        ----------
        FromSystem1: gp_Ax2d
        ToSystem2: gp_Ax2d

        Returns
        -------
        None
        Makes the transformation allowing passage from the basic coordinate system {p(0.,0.,0.), vx (1.,0.,0.), vy (0.,1.,0.)} to the local coordinate system defined with the ax2d tosystem.

        Parameters
        ----------
        ToSystem: gp_Ax2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_SetTransformation(self, *args)

    def SetTranslation(self, *args):
        r"""
        Makes the transformation into a translation. v is the vector of the translation.

        Parameters
        ----------
        V: gp_Vec2d

        Returns
        -------
        None
        Makes the transformation into a translation from the point p1 to the point p2.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_SetTranslation(self, *args)

    def SetTrsf2d(self, *args):
        r"""
        Makes the transformation into a transformation t from package gp.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Transformation_SetTrsf2d(self, *args)

    def Transforms(self, *args):
        r"""
        Applies the transformation <self> to the triplet {x, y}.

        Parameters
        ----------

        Returns
        -------
        X: float
        Y: float

        """
        return _Geom2d.Geom2d_Transformation_Transforms(self, *args)

    def Trsf2d(self, *args):
        r"""
        Converts this transformation into a gp_trsf2d transformation. returns a non persistent copy of <self>. -c++: return const&.

        Returns
        -------
        gp_Trsf2d

        """
        return _Geom2d.Geom2d_Transformation_Trsf2d(self, *args)

    def Value(self, *args):
        r"""
        Returns the coefficients of the global matrix of transformation. it is a 2 rows x 3 columns matrix. //! raised if row < 1 or row > 2 or col < 1 or col > 2 //! computes the reverse transformation.

        Parameters
        ----------
        Row: int
        Col: int

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Transformation_Value(self, *args)

    def __mul__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Other: Geom2d_Transformation

        Returns
        -------
        opencascade::handle<Geom2d_Transformation>

        """
        return _Geom2d.Geom2d_Transformation___mul__(self, *args)

    def __imul_wrapper__(self, other):
        return _Geom2d.Geom2d_Transformation___imul_wrapper__(self, other)

    def __imul__(self, right):
        self.__imul_wrapper__(right)
        return self



    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Transformation_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Transformation

# Register Geom2d_Transformation in _Geom2d:
_Geom2d.Geom2d_Transformation_swigregister(Geom2d_Transformation)

class Geom2d_AxisPlacement(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an axis by conversion of the gp_ax2d axis a.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        None
        Constructs an axis from a given origin p and unit vector v.

        Parameters
        ----------
        P: gp_Pnt2d
        V: gp_Dir2d

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_AxisPlacement_swiginit(self, _Geom2d.new_Geom2d_AxisPlacement(*args))

    def Angle(self, *args):
        r"""
        Computes the angle between the 'direction' of two axis placement in radians. the result is comprised between -pi and pi.

        Parameters
        ----------
        Other: Geom2d_AxisPlacement

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_AxisPlacement_Angle(self, *args)

    def Ax2d(self, *args):
        r"""
        Converts this axis into a gp_ax2d axis.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_AxisPlacement_Ax2d(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this axis.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_AxisPlacement_Copy(self, *args)

    def Direction(self, *args):
        r"""
        Returns the 'direction' of <self>. -c++: return const&.

        Returns
        -------
        gp_Dir2d

        """
        return _Geom2d.Geom2d_AxisPlacement_Direction(self, *args)

    def Location(self, *args):
        r"""
        Returns the 'location' point (origin) of the axis placement. -c++: return const&.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_AxisPlacement_Location(self, *args)

    def Reverse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_AxisPlacement_Reverse(self, *args)

    def Reversed(self, *args):
        r"""
        Reverses the unit vector of this axis. note: - reverse assigns the result to this axis, while - reversed creates a new one.

        Returns
        -------
        opencascade::handle<Geom2d_AxisPlacement>

        """
        return _Geom2d.Geom2d_AxisPlacement_Reversed(self, *args)

    def SetAxis(self, *args):
        r"""
        Changes the complete definition of the axis placement.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_AxisPlacement_SetAxis(self, *args)

    def SetDirection(self, *args):
        r"""
        Changes the 'direction' of the axis placement.

        Parameters
        ----------
        V: gp_Dir2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_AxisPlacement_SetDirection(self, *args)

    def SetLocation(self, *args):
        r"""
        Changes the 'location' point (origin) of the axis placement.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_AxisPlacement_SetLocation(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this axis.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_AxisPlacement_Transform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_AxisPlacement_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_AxisPlacement

# Register Geom2d_AxisPlacement in _Geom2d:
_Geom2d.Geom2d_AxisPlacement_swigregister(Geom2d_AxisPlacement)

class Geom2d_Curve(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Continuity(self, *args):
        r"""
        It is the global continuity of the curve : c0 : only geometric continuity, c1 : continuity of the first derivative all along the curve, c2 : continuity of the second derivative all along the curve, c3 : continuity of the third derivative all along the curve, g1 : tangency continuity all along the curve, g2 : curvature continuity all along the curve, cn : the order of continuity is infinite.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_Curve_Continuity(self, *args)

    def D0(self, *args):
        r"""
        Returns in p the point of parameter u. if the curve is periodic then the returned point is p(u) with u = ustart + (u - uend) where ustart and uend are the parametric bounds of the curve. //! raised only for the 'offsetcurve' if it is not possible to compute the current point. for example when the first derivative on the basis curve and the offset direction are parallel.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Curve_D0(self, *args)

    def D1(self, *args):
        r"""
        Returns the point p of parameter u and the first derivative v1. raised if the continuity of the curve is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Curve_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the curve is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Curve_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the curve is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Curve_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this curve, computes the vector corresponding to the nth derivative. exceptions stdfail_undefinedderivative if: - the continuity of the curve is not 'cn', or - the derivative vector cannot be computed easily; this is the case with specific types of curve (for example, a rational bspline curve where n is greater than 3). standard_rangeerror if n is less than 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_Curve_DN(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Curve self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Curve_DumpJsonToString(self, depth)

    def FirstParameter(self, *args):
        r"""
        Returns the value of the first parameter. warnings : it can be realfirst or reallast from package standard if the curve is infinite.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Curve_FirstParameter(self, *args)

    def IsCN(self, *args):
        r"""
        Returns true if the degree of continuity of this curve is at least n. exceptions standard_rangeerror if n is less than 0.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Curve_IsCN(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns true if the curve is closed. examples : some curves such as circle are always closed, others such as line are never closed (by definition). some curves such as offsetcurve can be closed or not. these curves are considered as closed if the distance between the first point and the last point of the curve is lower or equal to the resolution from package gp which is a fixed criterion independent of the application.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Curve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Returns true if the parameter of the curve is periodic. it is possible only if the curve is closed and if the following relation is satisfied : for each parametric value u the distance between the point p(u) and the point p (u + t) is lower or equal to resolution from package gp, t is the period and must be a constant. there are three possibilities : . the curve is never periodic by definition (segmentline) . the curve is always periodic by definition (circle) . the curve can be defined as periodic (bspline). in this case a function setperiodic allows you to give the shape of the curve. the general rule for this case is : if a curve can be periodic or not the default periodicity set is non periodic and you have to turn (explicitly) the curve into a periodic curve if you want the curve to be periodic.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Curve_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Value of the last parameter. warnings : it can be realfirst or reallast from package standard if the curve is infinite.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Curve_LastParameter(self, *args)

    def ParametricTransformation(self, *args):
        r"""
        Returns the coefficient required to compute the parametric transformation of this curve when transformation t is applied. this coefficient is the ratio between the parameter of a point on this curve and the parameter of the transformed point on the new curve transformed by t. note: this function generally returns 1. but it can be redefined (for example, on a line).

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Curve_ParametricTransformation(self, *args)

    def Period(self, *args):
        r"""
        Returns the period of this curve. raises if the curve is not periodic.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Curve_Period(self, *args)

    def Reverse(self, *args):
        r"""
        Changes the direction of parametrization of <self>. the 'firstparameter' and the 'lastparameter' are not changed but the orientation of the curve is modified. if the curve is bounded the startpoint of the initial curve becomes the endpoint of the reversed curve and the endpoint of the initial curve becomes the startpoint of the reversed curve.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Curve_Reverse(self, *args)

    def Reversed(self, *args):
        r"""
        Creates a reversed duplicate changes the orientation of this curve. the first and last parameters are not changed, but the parametric direction of the curve is reversed. if the curve is bounded: - the start point of the initial curve becomes the end point of the reversed curve, and - the end point of the initial curve becomes the start point of the reversed curve. - reversed creates a new curve.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _Geom2d.Geom2d_Curve_Reversed(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed curve for the point of parameter u on this curve. note: the point of parameter u on this curve is identical to the point of parameter reversedparameter(u) on the reversed curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Curve_ReversedParameter(self, *args)

    def TransformedParameter(self, *args):
        r"""
        Computes the parameter on the curve transformed by t for the point of parameter u on this curve. note: this function generally returns u but it can be redefined (for example, on a line).

        Parameters
        ----------
        U: float
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Curve_TransformedParameter(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on <self>. if the curve is periodic then the returned point is p(u) with u = ustart + (u - uend) where ustart and uend are the parametric bounds of the curve. //! it is implemented with d0. //! raised only for the 'offsetcurve' if it is not possible to compute the current point. for example when the first derivative on the basis curve and the offset direction are parallel.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Curve_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Curve

# Register Geom2d_Curve in _Geom2d:
_Geom2d.Geom2d_Curve_swigregister(Geom2d_Curve)

class Geom2d_Point(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Coord(self, *args):
        r"""
        Returns the coordinates of <self>.

        Parameters
        ----------

        Returns
        -------
        X: float
        Y: float

        """
        return _Geom2d.Geom2d_Point_Coord(self, *args)

    def Distance(self, *args):
        r"""
        Computes the distance between <self> and <other>.

        Parameters
        ----------
        Other: Geom2d_Point

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Point_Distance(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Point self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Point_DumpJsonToString(self, depth)

    def Pnt2d(self, *args):
        r"""
        Returns a non persistent copy of <self>.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Point_Pnt2d(self, *args)

    def SquareDistance(self, *args):
        r"""
        Computes the square distance between <self> and <other>.

        Parameters
        ----------
        Other: Geom2d_Point

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Point_SquareDistance(self, *args)

    def X(self, *args):
        r"""
        Returns the x coordinate of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Point_X(self, *args)

    def Y(self, *args):
        r"""
        Returns the y coordinate of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Point_Y(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Point_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Point

# Register Geom2d_Point in _Geom2d:
_Geom2d.Geom2d_Point_swigregister(Geom2d_Point)

class Geom2d_Vector(Geom2d_Geometry):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Angle(self, *args):
        r"""
        Computes the angular value, in radians, between this vector and vector other. the result is a value between -pi and pi. the orientation is from this vector to vector other. raises vectorwithnullmagnitude if one of the two vectors is a vector with null magnitude because the angular value is indefinite.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Vector_Angle(self, *args)

    def Coord(self, *args):
        r"""
        Returns the coordinates of <self>.

        Parameters
        ----------

        Returns
        -------
        X: float
        Y: float

        """
        return _Geom2d.Geom2d_Vector_Coord(self, *args)

    def Crossed(self, *args):
        r"""
        Cross product of <self> with the vector <other>.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Vector_Crossed(self, *args)

    def Dot(self, *args):
        r"""
        Returns the scalar product of 2 vectors.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Vector_Dot(self, *args)

    def Magnitude(self, *args):
        r"""
        Returns the magnitude of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Vector_Magnitude(self, *args)

    def Reverse(self, *args):
        r"""
        Reverses the vector <self>.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Vector_Reverse(self, *args)

    def Reversed(self, *args):
        r"""
        Returns a copy of <self> reversed.

        Returns
        -------
        opencascade::handle<Geom2d_Vector>

        """
        return _Geom2d.Geom2d_Vector_Reversed(self, *args)

    def SquareMagnitude(self, *args):
        r"""
        Returns the square magnitude of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Vector_SquareMagnitude(self, *args)

    def Vec2d(self, *args):
        r"""
        Returns a non persistent copy of <self>.

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_Vector_Vec2d(self, *args)

    def X(self, *args):
        r"""
        Returns the x coordinate of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Vector_X(self, *args)

    def Y(self, *args):
        r"""
        Returns the y coordinate of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Vector_Y(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Vector_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Vector

# Register Geom2d_Vector in _Geom2d:
_Geom2d.Geom2d_Vector_swigregister(Geom2d_Vector)

class Geom2d_BoundedCurve(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_BoundedCurve self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_BoundedCurve_DumpJsonToString(self, depth)

    def EndPoint(self, *args):
        r"""
        Returns the end point of the curve. the end point is the value of the curve for the 'lastparameter' of the curve.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BoundedCurve_EndPoint(self, *args)

    def StartPoint(self, *args):
        r"""
        Returns the start point of the curve. the start point is the value of the curve for the 'firstparameter' of the curve.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BoundedCurve_StartPoint(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_BoundedCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_BoundedCurve

# Register Geom2d_BoundedCurve in _Geom2d:
_Geom2d.Geom2d_BoundedCurve_swigregister(Geom2d_BoundedCurve)

class Geom2d_CartesianPoint(Geom2d_Point):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Returns a persistent copy of p.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_CartesianPoint_swiginit(self, _Geom2d.new_Geom2d_CartesianPoint(*args))

    def Coord(self, *args):
        r"""
        Returns the coordinates of <self>.

        Parameters
        ----------

        Returns
        -------
        X: float
        Y: float

        """
        return _Geom2d.Geom2d_CartesianPoint_Coord(self, *args)

    def Copy(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_CartesianPoint_Copy(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_CartesianPoint self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_CartesianPoint_DumpJsonToString(self, depth)

    def Pnt2d(self, *args):
        r"""
        Returns a non persistent cartesian point with the same coordinates as <self>. -c++: return const&.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_CartesianPoint_Pnt2d(self, *args)

    def SetCoord(self, *args):
        r"""
        Set <self> to x, y coordinates.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_CartesianPoint_SetCoord(self, *args)

    def SetPnt2d(self, *args):
        r"""
        Set <self> to p.x(), p.y() coordinates.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_CartesianPoint_SetPnt2d(self, *args)

    def SetX(self, *args):
        r"""
        Changes the x coordinate of me.

        Parameters
        ----------
        X: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_CartesianPoint_SetX(self, *args)

    def SetY(self, *args):
        r"""
        Changes the y coordinate of me.

        Parameters
        ----------
        Y: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_CartesianPoint_SetY(self, *args)

    def Transform(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_CartesianPoint_Transform(self, *args)

    def X(self, *args):
        r"""
        Returns the x coordinate of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_CartesianPoint_X(self, *args)

    def Y(self, *args):
        r"""
        Returns the y coordinate of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_CartesianPoint_Y(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_CartesianPoint_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_CartesianPoint

# Register Geom2d_CartesianPoint in _Geom2d:
_Geom2d.Geom2d_CartesianPoint_swigregister(Geom2d_CartesianPoint)

class Geom2d_Conic(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def Continuity(self, *args):
        r"""
        Returns geomabs_cn which is the global continuity of any conic.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_Conic_Continuity(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Conic self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Conic_DumpJsonToString(self, depth)

    def Eccentricity(self, *args):
        r"""
        Returns the eccentricity value of the conic e. e = 0 for a circle 0 < e < 1 for an ellipse (e = 0 if majorradius = minorradius) e > 1 for a hyperbola e = 1 for a parabola.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Conic_Eccentricity(self, *args)

    def IsCN(self, *args):
        r"""
        Returns true, the order of continuity of a conic is infinite.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Conic_IsCN(self, *args)

    def Location(self, *args):
        r"""
        Returns the location point of the conic. for the circle, the ellipse and the hyperbola it is the center of the conic. for the parabola it is the vertex of the parabola.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Conic_Location(self, *args)

    def Position(self, *args):
        r"""
        Returns the local coordinates system of the conic.

        Returns
        -------
        gp_Ax22d

        """
        return _Geom2d.Geom2d_Conic_Position(self, *args)

    def Reverse(self, *args):
        r"""
        Reverses the direction of parameterization of <self>. the local coordinate system of the conic is modified.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Conic_Reverse(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Returns the parameter on the reversed curve for the point of parameter u on <self>.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Conic_ReversedParameter(self, *args)

    def SetAxis(self, *args):
        r"""
        Modifies this conic, redefining its local coordinate system partially, by assigning thea as its axis.

        Parameters
        ----------
        theA: gp_Ax22d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Conic_SetAxis(self, *args)

    def SetLocation(self, *args):
        r"""
        Modifies this conic, redefining its local coordinate system partially, by assigning thep as its origin.

        Parameters
        ----------
        theP: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Conic_SetLocation(self, *args)

    def SetXAxis(self, *args):
        r"""
        Assigns the origin and unit vector of axis thea to the origin of the local coordinate system of this conic and x direction. the other unit vector of the local coordinate system of this conic is recomputed normal to thea, without changing the orientation of the local coordinate system (right-handed or left-handed).

        Parameters
        ----------
        theAX: gp_Ax2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Conic_SetXAxis(self, *args)

    def SetYAxis(self, *args):
        r"""
        Assigns the origin and unit vector of axis thea to the origin of the local coordinate system of this conic and y direction. the other unit vector of the local coordinate system of this conic is recomputed normal to thea, without changing the orientation of the local coordinate system (right-handed or left-handed).

        Parameters
        ----------
        theAY: gp_Ax2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Conic_SetYAxis(self, *args)

    def XAxis(self, *args):
        r"""
        Returns the 'xaxis' of the conic. this axis defines the origin of parametrization of the conic. this axis and the 'yaxis' define the local coordinate system of the conic. -c++: return const&.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Conic_XAxis(self, *args)

    def YAxis(self, *args):
        r"""
        Returns the 'yaxis' of the conic. the 'yaxis' is perpendicular to the 'xaxis'.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Conic_YAxis(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Conic_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Conic

# Register Geom2d_Conic in _Geom2d:
_Geom2d.Geom2d_Conic_swigregister(Geom2d_Conic)

class Geom2d_Direction(Geom2d_Vector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a unit vector with it 2 cartesian coordinates. //! raised if sqrt( x*x + y*y) <= resolution from gp.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        None
        Creates a persistent copy of <self>.

        Parameters
        ----------
        V: gp_Dir2d

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_Direction_swiginit(self, _Geom2d.new_Geom2d_Direction(*args))

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this unit vector.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Direction_Copy(self, *args)

    def Crossed(self, *args):
        r"""
        Computes the cross product between <self> and <other>.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Direction_Crossed(self, *args)

    def Dir2d(self, *args):
        r"""
        Converts this unit vector into a gp_dir2d unit vector.

        Returns
        -------
        gp_Dir2d

        """
        return _Geom2d.Geom2d_Direction_Dir2d(self, *args)

    def Magnitude(self, *args):
        r"""
        Returns 1.0.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Direction_Magnitude(self, *args)

    def SetCoord(self, *args):
        r"""
        Assigns the coordinates x and y to this unit vector, then normalizes it. exceptions standard_constructionerror if sqrt(x*x + y*y) is less than or equal to gp::resolution().

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Direction_SetCoord(self, *args)

    def SetDir2d(self, *args):
        r"""
        Converts the gp_dir2d unit vector v into this unit vector.

        Parameters
        ----------
        V: gp_Dir2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Direction_SetDir2d(self, *args)

    def SetX(self, *args):
        r"""
        Assigns a value to the x coordinate of this unit vector, then normalizes it. exceptions standard_constructionerror if the value assigned causes the magnitude of the vector to become less than or equal to gp::resolution().

        Parameters
        ----------
        X: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Direction_SetX(self, *args)

    def SetY(self, *args):
        r"""
        Assigns a value to the y coordinate of this unit vector, then normalizes it. exceptions standard_constructionerror if the value assigned causes the magnitude of the vector to become less than or equal to gp::resolution().

        Parameters
        ----------
        Y: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Direction_SetY(self, *args)

    def SquareMagnitude(self, *args):
        r"""
        Returns 1.0.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Direction_SquareMagnitude(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this unit vector, then normalizes it.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Direction_Transform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Direction_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Direction

# Register Geom2d_Direction in _Geom2d:
_Geom2d.Geom2d_Direction_swigregister(Geom2d_Direction)

class Geom2d_Line(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a line located in 2d space with the axis placement a. the location of a is the origin of the line.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        None
        Creates a line by conversion of the gp_lin2d line l.

        Parameters
        ----------
        L: gp_Lin2d

        Returns
        -------
        None
        Constructs a line passing through point p and parallel to vector v (p and v are, respectively, the origin and the unit vector of the positioning axis of the line).

        Parameters
        ----------
        P: gp_Pnt2d
        V: gp_Dir2d

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_Line_swiginit(self, _Geom2d.new_Geom2d_Line(*args))

    def Continuity(self, *args):
        r"""
        Returns geomabs_cn, which is the global continuity of any line.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_Line_Continuity(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object, which is a copy of this line.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Line_Copy(self, *args)

    def D0(self, *args):
        r"""
        Returns in p the point of parameter u. p (u) = o + u * dir where o is the 'location' point of the line and dir the direction of the line.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_D0(self, *args)

    def D1(self, *args):
        r"""
        Returns the point p of parameter u and the first derivative v1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. v2 is a vector with null magnitude for a line.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_D2(self, *args)

    def D3(self, *args):
        r"""
        V2 and v3 are vectors with null magnitude for a line.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this line, computes the vector corresponding to the nth derivative. note: if n is greater than or equal to 2, the result is a vector with null magnitude. exceptions standard_rangeerror if n is less than 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_Line_DN(self, *args)

    def Direction(self, *args):
        r"""
        Changes the direction of the line.

        Returns
        -------
        gp_Dir2d

        """
        return _Geom2d.Geom2d_Line_Direction(self, *args)

    def Distance(self, *args):
        r"""
        Computes the distance between <self> and the point p.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Line_Distance(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Line self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Line_DumpJsonToString(self, depth)

    def FirstParameter(self, *args):
        r"""
        Returns realfirst from standard.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Line_FirstParameter(self, *args)

    def IsCN(self, *args):
        r"""
        Returns true.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Line_IsCN(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns false.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Line_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Returns false.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Line_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns reallast from standard.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Line_LastParameter(self, *args)

    def Lin2d(self, *args):
        r"""
        Returns non persistent line from gp with the same geometric properties as <self>.

        Returns
        -------
        gp_Lin2d

        """
        return _Geom2d.Geom2d_Line_Lin2d(self, *args)

    def Location(self, *args):
        r"""
        Changes the 'location' point (origin) of the line.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Line_Location(self, *args)

    def ParametricTransformation(self, *args):
        r"""
        Returns the coefficient required to compute the parametric transformation of this line when transformation t is applied. this coefficient is the ratio between the parameter of a point on this line and the parameter of the transformed point on the new line transformed by t. for a line, the returned value is the scale factor of the transformation t.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Line_ParametricTransformation(self, *args)

    def Position(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Line_Position(self, *args)

    def Reverse(self, *args):
        r"""
        Changes the orientation of this line. as a result, the unit vector of the positioning axis of this line is reversed.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_Reverse(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed line for the point of parameter u on this line. for a line, the returned value is -u.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Line_ReversedParameter(self, *args)

    def SetDirection(self, *args):
        r"""
        Changes the direction of the line.

        Parameters
        ----------
        V: gp_Dir2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_SetDirection(self, *args)

    def SetLin2d(self, *args):
        r"""
        Set <self> so that <self> has the same geometric properties as l.

        Parameters
        ----------
        L: gp_Lin2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_SetLin2d(self, *args)

    def SetLocation(self, *args):
        r"""
        Changes the 'location' point (origin) of the line.

        Parameters
        ----------
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_SetLocation(self, *args)

    def SetPosition(self, *args):
        r"""
        Changes the 'location' and a the 'direction' of <self>.

        Parameters
        ----------
        A: gp_Ax2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_SetPosition(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this line.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Line_Transform(self, *args)

    def TransformedParameter(self, *args):
        r"""
        Computes the parameter on the line transformed by t for the point of parameter u on this line. for a line, the returned value is equal to u multiplied by the scale factor of transformation t.

        Parameters
        ----------
        U: float
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Line_TransformedParameter(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Line_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Line

# Register Geom2d_Line in _Geom2d:
_Geom2d.Geom2d_Line_swigregister(Geom2d_Line)

class Geom2d_OffsetCurve(Geom2d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs a curve offset from the basis curve c, where offset is the distance between the offset curve and the basis curve at any point. a point on the offset curve is built by measuring the offset value along a normal vector at a point on c. this normal vector is obtained by rotating the vector tangential to c at 90 degrees in the anti-trigonometric sense. the side of c on which the offset value is measured is indicated by this normal vector if offset is positive, or in the inverse sense if offset is negative. if isnotcheckc0 = true checking if basis curve has c0-continuity is not made. warnings : in this package the entities are not shared. the offsetcurve is built with a copy of the curve c. so when c is modified the offsetcurve is not modified warning! if isnotcheckc0 = false, constructionerror raised if the basis curve c is not at least c1. no check is done to know if ||v^z|| != 0.0 at any point.

        Parameters
        ----------
        C: Geom2d_Curve
        Offset: float
        isNotCheckC0: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_OffsetCurve_swiginit(self, _Geom2d.new_Geom2d_OffsetCurve(*args))

    def BasisCurve(self, *args):
        r"""
        Returns the basis curve of this offset curve. the basis curve can be an offset curve.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _Geom2d.Geom2d_OffsetCurve_BasisCurve(self, *args)

    def Continuity(self, *args):
        r"""
        Continuity of the offset curve : c0 : only geometric continuity, c1 : continuity of the first derivative all along the curve, c2 : continuity of the second derivative all along the curve, c3 : continuity of the third derivative all along the curve, g1 : tangency continuity all along the curve, g2 : curvature continuity all along the curve, cn : the order of continuity is infinite. warnings : returns the continuity of the basis curve - 1. the offset curve must have a unique normal direction defined at any point. value and derivatives //! warnings : the exception undefinedvalue or undefinedderivative is raised if it is not possible to compute a unique offset direction. if t is the first derivative with not null length and z the direction normal to the plane of the curve, the relation ||t(u) ^ z|| != 0 must be satisfied to evaluate the offset curve. no check is done at the creation time and we suppose in this package that the offset curve is well defined.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_OffsetCurve_Continuity(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object, which is a copy of this offset curve.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_OffsetCurve_Copy(self, *args)

    def D0(self, *args):
        r"""
        Warning! this should not be called if the basis curve is not at least c1. nevertheless if used on portion where the curve is c1, it is ok.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_D0(self, *args)

    def D1(self, *args):
        r"""
        Warning! this should not be called if the continuity of the basis curve is not c2. nevertheless, it's ok to use it on portion where the curve is c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_D1(self, *args)

    def D2(self, *args):
        r"""
        Warning! this should not be called if the continuity of the basis curve is not c3. nevertheless, it's ok to use it on portion where the curve is c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_D2(self, *args)

    def D3(self, *args):
        r"""
        Warning! this should not be called if the continuity of the basis curve is not c4. nevertheless, it's ok to use it on portion where the curve is c4.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_D3(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. warning! this should not be called raises undefunedderivative if the continuity of the basis curve is not cn+1. nevertheless, it's ok to use it on portion where the curve is cn+1 raises rangeerror if n < 1. raises notimplemented if n > 3. the following functions compute the value and derivatives on the offset curve and returns the derivatives on the basis curve too. the computation of the value and derivatives on the basis curve are used to evaluate the offset curve warnings : the exception undefinedvalue or undefinedderivative is raised if it is not possible to compute a unique offset direction.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_OffsetCurve_DN(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_OffsetCurve self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_OffsetCurve_DumpJsonToString(self, depth)

    def FirstParameter(self, *args):
        r"""
        Returns the value of the first parameter of this offset curve. the first parameter corresponds to the start point of the curve. note: the first and last parameters of this offset curve are also the ones of its basis curve.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_OffsetCurve_FirstParameter(self, *args)

    def GetBasisCurveContinuity(self, *args):
        r"""
        Returns continuity of the basis curve.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_OffsetCurve_GetBasisCurveContinuity(self, *args)

    def IsCN(self, *args):
        r"""
        Is the order of continuity of the curve n ? warnings : this method answer true if the continuity of the basis curve is n + 1. we suppose in this class that a normal direction to the basis curve (used to compute the offset curve) is defined at any point on the basis curve. raised if n < 0.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_OffsetCurve_IsCN(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns true if the distance between the start point and the end point of the curve is lower or equal to resolution from package gp.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_OffsetCurve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Is the parametrization of a curve is periodic ? if the basis curve is a circle or an ellipse the corresponding offsetcurve is periodic. if the basis curve can't be periodic (for example beziercurve) the offsetcurve can't be periodic.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_OffsetCurve_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns the value of the last parameter of this offset curve. the last parameter corresponds to the end point. note: the first and last parameters of this offset curve are also the ones of its basis curve.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_OffsetCurve_LastParameter(self, *args)

    def Offset(self, *args):
        r"""
        Returns the offset value of this offset curve.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_OffsetCurve_Offset(self, *args)

    def ParametricTransformation(self, *args):
        r"""
        Returns a coefficient to compute the parameter on the transformed curve for the transform of the point on <self>. //! transformed(t)->value(u * parametrictransformation(t)) //! is the same point as //! value(u).transformed(t) //! this methods calls the basis curve method.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_OffsetCurve_ParametricTransformation(self, *args)

    def Period(self, *args):
        r"""
        Returns the period of this offset curve, i.e. the period of the basis curve of this offset curve. exceptions standard_nosuchobject if the basis curve is not periodic.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_OffsetCurve_Period(self, *args)

    def Reverse(self, *args):
        r"""
        Changes the direction of parametrization of <self>. as a result: - the basis curve is reversed, - the start point of the initial curve becomes the end point of the reversed curve, - the end point of the initial curve becomes the start point of the reversed curve, and - the first and last parameters are recomputed.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_Reverse(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed curve for the point of parameter u on this offset curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_OffsetCurve_ReversedParameter(self, *args)

    def SetBasisCurve(self, *args):
        r"""
        Changes this offset curve by assigning c as the basis curve from which it is built. if isnotcheckc0 = true checking if basis curve has c0-continuity is not made. exceptions if isnotcheckc0 = false, standard_constructionerror if the curve c is not at least 'c1' continuous.

        Parameters
        ----------
        C: Geom2d_Curve
        isNotCheckC0: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_SetBasisCurve(self, *args)

    def SetOffsetValue(self, *args):
        r"""
        Changes this offset curve by assigning d as the offset value.

        Parameters
        ----------
        D: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_SetOffsetValue(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this offset curve. note: the basis curve is also modified.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_OffsetCurve_Transform(self, *args)

    def TransformedParameter(self, *args):
        r"""
        Returns the parameter on the transformed curve for the transform of the point of parameter u on <self>. //! me->transformed(t)->value(me->transformedparameter(u,t)) //! is the same point as //! me->value(u).transformed(t) //! this methods calls the basis curve method.

        Parameters
        ----------
        U: float
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_OffsetCurve_TransformedParameter(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_OffsetCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_OffsetCurve

# Register Geom2d_OffsetCurve in _Geom2d:
_Geom2d.Geom2d_OffsetCurve_swigregister(Geom2d_OffsetCurve)

class Geom2d_VectorWithMagnitude(Geom2d_Vector):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a persistent copy of v.

        Parameters
        ----------
        V: gp_Vec2d

        Returns
        -------
        None
        Creates a vector with two cartesian coordinates.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        None
        Creates a vector from the point p1 to the point p2. the magnitude of the vector is the distance between p1 and p2.

        Parameters
        ----------
        P1: gp_Pnt2d
        P2: gp_Pnt2d

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_VectorWithMagnitude_swiginit(self, _Geom2d.new_Geom2d_VectorWithMagnitude(*args))

    def Add(self, *args):
        r"""
        Adds the vector other to <self>.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Add(self, *args)

    def Added(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Added(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this vector.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Copy(self, *args)

    def Crossed(self, *args):
        r"""
        Computes the cross product between <self> and other <self> ^ other. a new vector is returned.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Crossed(self, *args)

    def Divide(self, *args):
        r"""
        Divides <self> by a scalar.

        Parameters
        ----------
        Scalar: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Divide(self, *args)

    def Divided(self, *args):
        r"""
        Divides <self> by a scalar. a new vector is returned.

        Parameters
        ----------
        Scalar: float

        Returns
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Divided(self, *args)

    def Magnitude(self, *args):
        r"""
        Returns the magnitude of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Magnitude(self, *args)

    def Multiplied(self, *args):
        r"""
        Computes the product of the vector <self> by a scalar. a new vector is returned. //! -c++: alias operator * collision with same operator defined for the class vector!.

        Parameters
        ----------
        Scalar: float

        Returns
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Multiplied(self, *args)

    def Multiply(self, *args):
        r"""
        Computes the product of the vector <self> by a scalar.

        Parameters
        ----------
        Scalar: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Multiply(self, *args)

    def Normalize(self, *args):
        r"""
        Normalizes <self>. //! raised if the magnitude of the vector is lower or equal to resolution from package gp.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Normalize(self, *args)

    def Normalized(self, *args):
        r"""
        Returns a copy of <self> normalized. //! raised if the magnitude of the vector is lower or equal to resolution from package gp.

        Returns
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Normalized(self, *args)

    def SetCoord(self, *args):
        r"""
        Set <self> to x, y coordinates.

        Parameters
        ----------
        X: float
        Y: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetCoord(self, *args)

    def SetVec2d(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        V: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetVec2d(self, *args)

    def SetX(self, *args):
        r"""
        Changes the x coordinate of <self>.

        Parameters
        ----------
        X: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetX(self, *args)

    def SetY(self, *args):
        r"""
        Changes the y coordinate of <self>.

        Parameters
        ----------
        Y: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SetY(self, *args)

    def SquareMagnitude(self, *args):
        r"""
        Returns the square magnitude of <self>.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_SquareMagnitude(self, *args)

    def Subtract(self, *args):
        r"""
        Subtracts the vector other to <self>.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Subtract(self, *args)

    def Subtracted(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Subtracted(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this vector.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_VectorWithMagnitude_Transform(self, *args)

    def __imul_wrapper__(self, other):
        r"""__imul_wrapper__(Geom2d_VectorWithMagnitude self, Standard_Real const other)"""
        return _Geom2d.Geom2d_VectorWithMagnitude___imul_wrapper__(self, other)

    def __imul__(self, right):
        self.__imul_wrapper__(right)
        return self


    def __add__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude___add__(self, *args)

    def __iadd_wrapper__(self, other):
        r"""__iadd_wrapper__(Geom2d_VectorWithMagnitude self, opencascade::handle< Geom2d_Vector > const other)"""
        return _Geom2d.Geom2d_VectorWithMagnitude___iadd_wrapper__(self, other)

    def __iadd__(self, right):
        self.__iadd_wrapper__(right)
        return self


    def __sub__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Other: Geom2d_Vector

        Returns
        -------
        opencascade::handle<Geom2d_VectorWithMagnitude>

        """
        return _Geom2d.Geom2d_VectorWithMagnitude___sub__(self, *args)

    def __isub_wrapper__(self, other):
        r"""__isub_wrapper__(Geom2d_VectorWithMagnitude self, opencascade::handle< Geom2d_Vector > const other)"""
        return _Geom2d.Geom2d_VectorWithMagnitude___isub_wrapper__(self, other)

    def __isub__(self, right):
        self.__isub_wrapper__(right)
        return self


    def __truediv__(self, *args):
        return _Geom2d.Geom2d_VectorWithMagnitude___truediv__(self, *args)
    __div__ = __truediv__



    def __itruediv_wrapper__(self, other):
        r"""__itruediv_wrapper__(Geom2d_VectorWithMagnitude self, Standard_Real const other)"""
        return _Geom2d.Geom2d_VectorWithMagnitude___itruediv_wrapper__(self, other)

    def __itruediv__(self, right):
        self.__itruediv_wrapper__(right)
        return self



    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_VectorWithMagnitude_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_VectorWithMagnitude

# Register Geom2d_VectorWithMagnitude in _Geom2d:
_Geom2d.Geom2d_VectorWithMagnitude_swigregister(Geom2d_VectorWithMagnitude)

class Geom2d_BSplineCurve(Geom2d_BoundedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a non-rational b_spline curve on the basis <knots, multiplicities> of degree <degree>. the following conditions must be verified. 0 < degree <= maxdegree. //! knots.length() == mults.length() >= 2 //! knots(i) < knots(i+1) (knots are increasing) //! 1 <= mults(i) <= degree //! on a non periodic curve the first and last multiplicities may be degree+1 (this is even recommended if you want the curve to start and finish on the first and last pole). //! on a periodic curve the first and the last multicities must be the same. //! on non-periodic curves //! poles.length() == sum(mults(i)) - degree - 1 >= 2 //! on periodic curves //! poles.length() == sum(mults(i)) except the first or last.

        Parameters
        ----------
        Poles: TColgp_Array1OfPnt2d
        Knots: TColStd_Array1OfReal
        Multiplicities: TColStd_Array1OfInteger
        Degree: int
        Periodic: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        Creates a rational b_spline curve on the basis <knots, multiplicities> of degree <degree>. the following conditions must be verified. 0 < degree <= maxdegree. //! knots.length() == mults.length() >= 2 //! knots(i) < knots(i+1) (knots are increasing) //! 1 <= mults(i) <= degree //! on a non periodic curve the first and last multiplicities may be degree+1 (this is even recommended if you want the curve to start and finish on the first and last pole). //! on a periodic curve the first and the last multicities must be the same. //! on non-periodic curves //! poles.length() == sum(mults(i)) - degree - 1 >= 2 //! on periodic curves //! poles.length() == sum(mults(i)) except the first or last.

        Parameters
        ----------
        Poles: TColgp_Array1OfPnt2d
        Weights: TColStd_Array1OfReal
        Knots: TColStd_Array1OfReal
        Multiplicities: TColStd_Array1OfInteger
        Degree: int
        Periodic: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_BSplineCurve_swiginit(self, _Geom2d.new_Geom2d_BSplineCurve(*args))

    def Continuity(self, *args):
        r"""
        Returns the global continuity of the curve : c0 : only geometric continuity, c1 : continuity of the first derivative all along the curve, c2 : continuity of the second derivative all along the curve, c3 : continuity of the third derivative all along the curve, cn : the order of continuity is infinite. for a b-spline curve of degree d if a knot ui has a multiplicity p the b-spline curve is only cd-p continuous at ui. so the global continuity of the curve can't be greater than cd-p where p is the maximum multiplicity of the interior knots. in the interior of a knot span the curve is infinitely continuously differentiable.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_BSplineCurve_Continuity(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this bspline curve.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_BSplineCurve_Copy(self, *args)

    def D0(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_D0(self, *args)

    def D1(self, *args):
        r"""
        Raised if the continuity of the curve is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_D1(self, *args)

    def D2(self, *args):
        r"""
        Raised if the continuity of the curve is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_D2(self, *args)

    def D3(self, *args):
        r"""
        For this bspline curve, computes - the point p of parameter u, or - the point p and one or more of the following values: - v1, the first derivative vector, - v2, the second derivative vector, - v3, the third derivative vector. warning on a point where the continuity of the curve is not the one requested, these functions impact the part defined by the parameter with a value greater than u, i.e. the part of the curve to the 'right' of the singularity. raises undefinedderivative if the continuity of the curve is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this bspline curve, computes the vector corresponding to the nth derivative. warning on a point where the continuity of the curve is not the one requested, this function impacts the part defined by the parameter with a value greater than u, i.e. the part of the curve to the 'right' of the singularity. raises undefinedderivative if the continuity of the curve is not cn. rangeerror if n < 1. the following functions computes the point of parameter u and the derivatives at this point on the b-spline curve arc defined between the knot fromk1 and the knot tok2. u can be out of bounds [knot (fromk1), knot (tok2)] but for the computation we only use the definition of the curve between these two knots. this method is useful to compute local derivative, if the order of continuity of the whole curve is not greater enough. inside the parametric domain knot (fromk1), knot (tok2) the evaluations are the same as if we consider the whole definition of the curve. of course the evaluations are different outside this parametric domain.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_BSplineCurve_DN(self, *args)

    def Degree(self, *args):
        r"""
        Returns the degree of this bspline curve. in this class the degree of the basis normalized b-spline functions cannot be greater than 'maxdegree' computation of value and derivatives.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BSplineCurve_Degree(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_BSplineCurve self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_BSplineCurve_DumpJsonToString(self, depth)

    def EndPoint(self, *args):
        r"""
        Returns the last point of the curve. warnings : the last point of the curve is different from the last pole of the curve if the multiplicity of the last knot is lower than degree.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BSplineCurve_EndPoint(self, *args)

    def FirstParameter(self, *args):
        r"""
        Computes the parametric value of the start point of the curve. it is a knot value.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BSplineCurve_FirstParameter(self, *args)

    def FirstUKnotIndex(self, *args):
        r"""
        For a b-spline curve the first parameter (which gives the start point of the curve) is a knot value but if the multiplicity of the first knot index is lower than degree + 1 it is not the first knot of the curve. this method computes the index of the knot corresponding to the first parameter.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BSplineCurve_FirstUKnotIndex(self, *args)

    def IncreaseDegree(self, *args):
        r"""
        Increases the degree of this bspline curve to degree. as a result, the poles, weights and multiplicities tables are modified; the knots table is not changed. nothing is done if degree is less than or equal to the current degree. exceptions standard_constructionerror if degree is greater than geom2d_bsplinecurve::maxdegree().

        Parameters
        ----------
        Degree: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_IncreaseDegree(self, *args)

    def IncreaseMultiplicity(self, *args):
        r"""
        Increases the multiplicity of the knot <index> to <m>. //! if <m> is lower or equal to the current multiplicity nothing is done. if <m> is higher than the degree the degree is used. if <index> is not in [firstuknotindex, lastuknotindex].

        Parameters
        ----------
        Index: int
        M: int

        Returns
        -------
        None
        Increases the multiplicities of the knots in [i1,i2] to <m>. //! for each knot if <m> is lower or equal to the current multiplicity nothing is done. if <m> is higher than the degree the degree is used. as a result, the poles and weights tables of this curve are modified. warning it is forbidden to modify the multiplicity of the first or last knot of a non-periodic curve. be careful as geom2d does not protect against this. exceptions standard_outofrange if either index, i1 or i2 is outside the bounds of the knots table.

        Parameters
        ----------
        I1: int
        I2: int
        M: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_IncreaseMultiplicity(self, *args)

    def IncrementMultiplicity(self, *args):
        r"""
        Increases by m the multiplicity of the knots of indexes i1 to i2 in the knots table of this bspline curve. for each knot, the resulting multiplicity is limited to the degree of this curve. if m is negative, nothing is done. as a result, the poles and weights tables of this bspline curve are modified. warning it is forbidden to modify the multiplicity of the first or last knot of a non-periodic curve. be careful as geom2d does not protect against this. exceptions standard_outofrange if i1 or i2 is outside the bounds of the knots table.

        Parameters
        ----------
        I1: int
        I2: int
        M: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_IncrementMultiplicity(self, *args)

    def InsertKnot(self, *args):
        r"""
        Inserts a knot value in the sequence of knots. if <u> is an existing knot the multiplicity is increased by <m>. //! if u is not on the parameter range nothing is done. //! if the multiplicity is negative or null nothing is done. the new multiplicity is limited to the degree. //! the tolerance criterion for knots equality is the max of epsilon(u) and parametrictolerance. warning - if u is less than the first parameter or greater than the last parameter of this bspline curve, nothing is done. - if m is negative or null, nothing is done. - the multiplicity of a knot is limited to the degree of this bspline curve.

        Parameters
        ----------
        U: float
        M: int,optional
        	default value is 1
        ParametricTolerance: float,optional
        	default value is 0.0

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertKnot(self, *args)

    def InsertKnots(self, *args):
        r"""
        Inserts the values of the array knots, with the respective multiplicities given by the array mults, into the knots table of this bspline curve. if a value of the array knots is an existing knot, its multiplicity is: - increased by m, if add is true, or - increased to m, if add is false (default value). the tolerance criterion used for knot equality is the larger of the values parametrictolerance (defaulted to 0.) and standard_real::epsilon(u), where u is the current knot value. warning - for a value of the array knots which is less than the first parameter or greater than the last parameter of this bspline curve, nothing is done. - for a value of the array mults which is negative or null, nothing is done. - the multiplicity of a knot is limited to the degree of this bspline curve.

        Parameters
        ----------
        Knots: TColStd_Array1OfReal
        Mults: TColStd_Array1OfInteger
        ParametricTolerance: float,optional
        	default value is 0.0
        Add: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertKnots(self, *args)

    def InsertPoleAfter(self, *args):
        r"""
        The new pole is inserted after the pole of range index. if the curve was non rational it can become rational. //! raised if the b-spline is nonuniform or piecewisebezier or if weight <= 0.0 raised if index is not in the range [1, number of poles].

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float,optional
        	default value is 1.0

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertPoleAfter(self, *args)

    def InsertPoleBefore(self, *args):
        r"""
        The new pole is inserted before the pole of range index. if the curve was non rational it can become rational. //! raised if the b-spline is nonuniform or piecewisebezier or if weight <= 0.0 raised if index is not in the range [1, number of poles].

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float,optional
        	default value is 1.0

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_InsertPoleBefore(self, *args)

    def IsCN(self, *args):
        r"""
        Returns true if the degree of continuity of this bspline curve is at least n. a bspline curve is at least geomabs_c0. exceptions standard_rangeerror if n is negative.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BSplineCurve_IsCN(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns true if the distance between the first point and the last point of the curve is lower or equal to resolution from package gp. warnings : the first and the last point can be different from the first pole and the last pole of the curve.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BSplineCurve_IsClosed(self, *args)

    def IsG1(self, *args):
        r"""
        Check if curve has at least g1 continuity in interval [thetf, thetl] returns true if iscn(1) or angle between 'left' and 'right' first derivatives at knots with c0 continuity is less then theangtol only knots in interval [thetf, thetl] is checked.

        Parameters
        ----------
        theTf: float
        theTl: float
        theAngTol: float

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BSplineCurve_IsG1(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Returns true if the curve is periodic.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BSplineCurve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        Returns true if the weights are not identical. the tolerance criterion is epsilon of the class real.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BSplineCurve_IsRational(self, *args)

    def Knot(self, *args):
        r"""
        Returns the knot of range index. when there is a knot with a multiplicity greater than 1 the knot is not repeated. the method multiplicity can be used to get the multiplicity of the knot. raised if index < 1 or index > nbknots.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BSplineCurve_Knot(self, *args)

    def KnotDistribution(self, *args):
        r"""
        Returns nonuniform or uniform or quasiuniform or piecewisebezier. if all the knots differ by a positive constant from the preceding knot the bspline curve can be : - uniform if all the knots are of multiplicity 1, - quasiuniform if all the knots are of multiplicity 1 except for the first and last knot which are of multiplicity degree + 1, - piecewisebezier if the first and last knots have multiplicity degree + 1 and if interior knots have multiplicity degree a piecewise bezier with only two knots is a beziercurve. else the curve is non uniform. the tolerance criterion is epsilon from class real.

        Returns
        -------
        GeomAbs_BSplKnotDistribution

        """
        return _Geom2d.Geom2d_BSplineCurve_KnotDistribution(self, *args)

    def KnotSequence(self, *args):
        r"""
        Returns the knots sequence. in this sequence the knots with a multiplicity greater than 1 are repeated. example : k = {k1, k1, k1, k2, k3, k3, k4, k4, k4} //! raised if k.lower() is less than number of first knot in knot sequence with repetitions or k.upper() is more than number of last knot in knot sequence with repetitions.

        Parameters
        ----------
        K: TColStd_Array1OfReal

        Returns
        -------
        None
        Returns the knots sequence. in this sequence the knots with a multiplicity greater than 1 are repeated. example : k = {k1, k1, k1, k2, k3, k3, k4, k4, k4}.

        Returns
        -------
        TColStd_Array1OfReal

        """
        return _Geom2d.Geom2d_BSplineCurve_KnotSequence(self, *args)

    def Knots(self, *args):
        r"""
        Returns the knot values of the b-spline curve; //! raised k.lower() is less than number of first knot or k.upper() is more than number of last knot.

        Parameters
        ----------
        K: TColStd_Array1OfReal

        Returns
        -------
        None
        Returns the knot values of the b-spline curve;.

        Returns
        -------
        TColStd_Array1OfReal

        """
        return _Geom2d.Geom2d_BSplineCurve_Knots(self, *args)

    def LastParameter(self, *args):
        r"""
        Computes the parametric value of the end point of the curve. it is a knot value.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BSplineCurve_LastParameter(self, *args)

    def LastUKnotIndex(self, *args):
        r"""
        For a bspline curve the last parameter (which gives the end point of the curve) is a knot value but if the multiplicity of the last knot index is lower than degree + 1 it is not the last knot of the curve. this method computes the index of the knot corresponding to the last parameter.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BSplineCurve_LastUKnotIndex(self, *args)

    def LocalD0(self, *args):
        r"""
        Raised if fromk1 = tok2.

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD0(self, *args)

    def LocalD1(self, *args):
        r"""
        Raised if the local continuity of the curve is not c1 between the knot k1 and the knot k2. raised if fromk1 = tok2.

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD1(self, *args)

    def LocalD2(self, *args):
        r"""
        Raised if the local continuity of the curve is not c2 between the knot k1 and the knot k2. raised if fromk1 = tok2.

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD2(self, *args)

    def LocalD3(self, *args):
        r"""
        Raised if the local continuity of the curve is not c3 between the knot k1 and the knot k2. raised if fromk1 = tok2.

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalD3(self, *args)

    def LocalDN(self, *args):
        r"""
        Raised if the local continuity of the curve is not cn between the knot k1 and the knot k2. raised if fromk1 = tok2. raised if n < 1.

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalDN(self, *args)

    def LocalValue(self, *args):
        r"""
        Raised if fromk1 = tok2.

        Parameters
        ----------
        U: float
        FromK1: int
        ToK2: int

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BSplineCurve_LocalValue(self, *args)

    def LocateU(self, *args):
        r"""
        Locates the parametric value u in the sequence of knots. if 'withknotrepetition' is true we consider the knot's representation with repetition of multiple knot value, otherwise we consider the knot's representation with no repetition of multiple knot values. knots (i1) <= u <= knots (i2) . if i1 = i2 u is a knot value (the tolerance criterion parametrictolerance is used). . if i1 < 1 => u < knots (1) - abs(parametrictolerance) . if i2 > nbknots => u > knots (nbknots) + abs(parametrictolerance).

        Parameters
        ----------
        U: float
        ParametricTolerance: float
        WithKnotRepetition: bool,optional
        	default value is Standard_False

        Returns
        -------
        I1: int
        I2: int

        """
        return _Geom2d.Geom2d_BSplineCurve_LocateU(self, *args)

    @staticmethod
    def MaxDegree(*args):
        r"""
        Returns the value of the maximum degree of the normalized b-spline basis functions in this package.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BSplineCurve_MaxDegree(*args)

    def MovePoint(self, *args):
        r"""
        Moves the point of parameter u of this bspline curve to p. index1 and index2 are the indexes in the table of poles of this bspline curve of the first and last poles designated to be moved. firstmodifiedpole and lastmodifiedpole are the indexes of the first and last poles, which are effectively modified. in the event of incompatibility between index1, index2 and the value u: - no change is made to this bspline curve, and - the firstmodifiedpole and lastmodifiedpole are returned null. exceptions standard_outofrange if: - index1 is greater than or equal to index2, or - index1 or index2 is less than 1 or greater than the number of poles of this bspline curve.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        Index1: int
        Index2: int

        Returns
        -------
        FirstModifiedPole: int
        LastModifiedPole: int

        """
        return _Geom2d.Geom2d_BSplineCurve_MovePoint(self, *args)

    def MovePointAndTangent(self, *args):
        r"""
        Move a point with parameter u to p. and makes it tangent at u be tangent. startingcondition = -1 means first can move endingcondition = -1 means last point can move startingcondition = 0 means the first point cannot move endingcondition = 0 means the last point cannot move startingcondition = 1 means the first point and tangent cannot move endingcondition = 1 means the last point and tangent cannot move and so forth errorstatus != 0 means that there are not enough degree of freedom with the constrain to deform the curve accordingly.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        Tangent: gp_Vec2d
        Tolerance: float
        StartingCondition: int
        EndingCondition: int

        Returns
        -------
        ErrorStatus: int

        """
        return _Geom2d.Geom2d_BSplineCurve_MovePointAndTangent(self, *args)

    def Multiplicities(self, *args):
        r"""
        Returns the multiplicity of the knots of the curve. //! raised if the length of m is not equal to nbknots.

        Parameters
        ----------
        M: TColStd_Array1OfInteger

        Returns
        -------
        None
        Returns the multiplicity of the knots of the curve.

        Returns
        -------
        TColStd_Array1OfInteger

        """
        return _Geom2d.Geom2d_BSplineCurve_Multiplicities(self, *args)

    def Multiplicity(self, *args):
        r"""
        Returns the multiplicity of the knots of range index. raised if index < 1 or index > nbknots.

        Parameters
        ----------
        Index: int

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BSplineCurve_Multiplicity(self, *args)

    def NbKnots(self, *args):
        r"""
        Returns the number of knots. this method returns the number of knot without repetition of multiple knots.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BSplineCurve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        Returns the number of poles.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BSplineCurve_NbPoles(self, *args)

    def PeriodicNormalization(self, *args):
        r"""
        Computes the parameter normalized within the 'first' period of this bspline curve, if it is periodic: the returned value is in the range param1 and param1 + period, where: - param1 is the 'first parameter', and - period the period of this bspline curve. note: if this curve is not periodic, u is not modified.

        Parameters
        ----------

        Returns
        -------
        U: float

        """
        return _Geom2d.Geom2d_BSplineCurve_PeriodicNormalization(self, *args)

    def Pole(self, *args):
        r"""
        Returns the pole of range index. raised if index < 1 or index > nbpoles.

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BSplineCurve_Pole(self, *args)

    def Poles(self, *args):
        r"""
        Returns the poles of the b-spline curve; //! raised if the length of p is not equal to the number of poles.

        Parameters
        ----------
        P: TColgp_Array1OfPnt2d

        Returns
        -------
        None
        Returns the poles of the b-spline curve;.

        Returns
        -------
        TColgp_Array1OfPnt2d

        """
        return _Geom2d.Geom2d_BSplineCurve_Poles(self, *args)

    def RemoveKnot(self, *args):
        r"""
        Reduces the multiplicity of the knot of index index to m. if m is equal to 0, the knot is removed. with a modification of this type, the array of poles is also modified. two different algorithms are systematically used to compute the new poles of the curve. if, for each pole, the distance between the pole calculated using the first algorithm and the same pole calculated using the second algorithm, is less than tolerance, this ensures that the curve is not modified by more than tolerance. under these conditions, true is returned; otherwise, false is returned. a low tolerance is used to prevent modification of the curve. a high tolerance is used to 'smooth' the curve. exceptions standard_outofrange if index is outside the bounds of the knots table.

        Parameters
        ----------
        Index: int
        M: int
        Tolerance: float

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BSplineCurve_RemoveKnot(self, *args)

    def RemovePole(self, *args):
        r"""
        Removes the pole of range index if the curve was rational it can become non rational. //! raised if the b-spline is nonuniform or piecewisebezier. raised if the number of poles of the b-spline curve is lower or equal to 2 before removing. raised if index is not in the range [1, number of poles].

        Parameters
        ----------
        Index: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_RemovePole(self, *args)

    def Resolution(self, *args):
        r"""
        Computes for this bspline curve the parametric tolerance utolerance for a given tolerance tolerance3d (relative to dimensions in the plane). if f(t) is the equation of this bspline curve, utolerance ensures that: | t1 - t0| < utolerance ===> |f(t1) - f(t0)| < toleranceuv.

        Parameters
        ----------
        ToleranceUV: float

        Returns
        -------
        UTolerance: float

        """
        return _Geom2d.Geom2d_BSplineCurve_Resolution(self, *args)

    def Reverse(self, *args):
        r"""
        Reverses the orientation of this bspline curve. as a result - the knots and poles tables are modified; - the start point of the initial curve becomes the end point of the reversed curve; - the end point of the initial curve becomes the start point of the reversed curve.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_Reverse(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed curve for the point of parameter u on this bspline curve. the returned value is: ufirst + ulast - u, where ufirst and ulast are the values of the first and last parameters of this bspline curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BSplineCurve_ReversedParameter(self, *args)

    def Segment(self, *args):
        r"""
        Modifies this bspline curve by segmenting it between u1 and u2. either of these values can be outside the bounds of the curve, but u2 must be greater than u1. all data structure tables of this bspline curve are modified, but the knots located between u1 and u2 are retained. the degree of the curve is not modified. //! parameter thetolerance defines the possible proximity of the segment boundaries and b-spline knots to treat them as equal. //! warnings : even if <self> is not closed it can become closed after the segmentation for example if u1 or u2 are out of the bounds of the curve <self> or if the curve makes loop. after the segmentation the length of a curve can be null. - the segmentation of a periodic curve over an interval corresponding to its period generates a non-periodic curve with equivalent geometry. exceptions standard_domainerror if u2 is less than u1. raises if u2 < u1. standard_domainerror if u2 - u1 exceeds the period for periodic curves. i.e. ((u2 - u1) - period) > precision::pconfusion().

        Parameters
        ----------
        U1: float
        U2: float
        theTolerance: float,optional
        	default value is Precision::PConfusion()

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_Segment(self, *args)

    def SetKnot(self, *args):
        r"""
        Modifies this bspline curve by assigning the value k to the knot of index index in the knots table. this is a relatively local modification because k must be such that: knots(index - 1) < k < knots(index + 1) exceptions standard_constructionerror if: - k is not such that: knots(index - 1) < k < knots(index + 1) - m is greater than the degree of this bspline curve or lower than the previous multiplicity of knot of index index in the knots table. standard_outofrange if index is outside the bounds of the knots table.

        Parameters
        ----------
        Index: int
        K: float

        Returns
        -------
        None
        Modifies this bspline curve by assigning the value k to the knot of index index in the knots table. this is a relatively local modification because k must be such that: knots(index - 1) < k < knots(index + 1) the second syntax allows you also to increase the multiplicity of the knot to m (but it is not possible to decrease the multiplicity of the knot with this function). exceptions standard_constructionerror if: - k is not such that: knots(index - 1) < k < knots(index + 1) - m is greater than the degree of this bspline curve or lower than the previous multiplicity of knot of index index in the knots table. standard_outofrange if index is outside the bounds of the knots table.

        Parameters
        ----------
        Index: int
        K: float
        M: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_SetKnot(self, *args)

    def SetKnots(self, *args):
        r"""
        Modifies this bspline curve by assigning the array k to its knots table. the multiplicity of the knots is not modified. exceptions standard_constructionerror if the values in the array k are not in ascending order. standard_outofrange if the bounds of the array k are not respectively 1 and the number of knots of this bspline curve.

        Parameters
        ----------
        K: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_SetKnots(self, *args)

    def SetNotPeriodic(self, *args):
        r"""
        Changes this bspline curve into a non-periodic curve. if this curve is already non-periodic, it is not modified. note that the poles and knots tables are modified. warning if this curve is periodic, as the multiplicity of the first and last knots is not modified, and is not equal to degree + 1, where degree is the degree of this bspline curve, the start and end points of the curve are not its first and last poles.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_SetNotPeriodic(self, *args)

    def SetOrigin(self, *args):
        r"""
        Assigns the knot of index index in the knots table as the origin of this periodic bspline curve. as a consequence, the knots and poles tables are modified. exceptions standard_nosuchobject if this curve is not periodic. standard_domainerror if index is outside the bounds of the knots table.

        Parameters
        ----------
        Index: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_SetOrigin(self, *args)

    def SetPeriodic(self, *args):
        r"""
        Changes this bspline curve into a periodic curve. to become periodic, the curve must first be closed. next, the knot sequence must be periodic. for this, firstuknotindex and lastuknotindex are used to compute i1 and i2, the indexes in the knots array of the knots corresponding to the first and last parameters of this bspline curve. the period is therefore knot(i2) - knot(i1). consequently, the knots and poles tables are modified. exceptions standard_constructionerror if this bspline curve is not closed.

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_SetPeriodic(self, *args)

    def SetPole(self, *args):
        r"""
        Modifies this bspline curve by assigning p to the pole of index index in the poles table. exceptions standard_outofrange if index is outside the bounds of the poles table. standard_constructionerror if weight is negative or null.

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d

        Returns
        -------
        None
        Modifies this bspline curve by assigning p to the pole of index index in the poles table. the second syntax also allows you to modify the weight of the modified pole, which becomes weight. in this case, if this bspline curve is non-rational, it can become rational and vice versa. exceptions standard_outofrange if index is outside the bounds of the poles table. standard_constructionerror if weight is negative or null.

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_SetPole(self, *args)

    def SetWeight(self, *args):
        r"""
        Assigns the weight weight to the pole of index index of the poles table. if the curve was non rational it can become rational. if the curve was rational it can become non rational. exceptions standard_outofrange if index is outside the bounds of the poles table. standard_constructionerror if weight is negative or null.

        Parameters
        ----------
        Index: int
        Weight: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_SetWeight(self, *args)

    def StartPoint(self, *args):
        r"""
        Returns the start point of the curve. warnings : this point is different from the first pole of the curve if the multiplicity of the first knot is lower than degree.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BSplineCurve_StartPoint(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this bspline curve.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BSplineCurve_Transform(self, *args)

    def Weight(self, *args):
        r"""
        Returns the weight of the pole of range index . raised if index < 1 or index > nbpoles.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BSplineCurve_Weight(self, *args)

    def Weights(self, *args):
        r"""
        Returns the weights of the b-spline curve; //! raised if the length of w is not equal to nbpoles.

        Parameters
        ----------
        W: TColStd_Array1OfReal

        Returns
        -------
        None
        Returns the weights of the b-spline curve;.

        Returns
        -------
        TColStd_Array1OfReal *

        """
        return _Geom2d.Geom2d_BSplineCurve_Weights(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_BSplineCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_BSplineCurve

# Register Geom2d_BSplineCurve in _Geom2d:
_Geom2d.Geom2d_BSplineCurve_swigregister(Geom2d_BSplineCurve)

def Geom2d_BSplineCurve_MaxDegree(*args):
    r"""
    Returns the value of the maximum degree of the normalized b-spline basis functions in this package.

    Returns
    -------
    int

    """
    return _Geom2d.Geom2d_BSplineCurve_MaxDegree(*args)

class Geom2d_BezierCurve(Geom2d_BoundedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a non rational bezier curve with a set of poles : curvepoles. the weights are defaulted to all being 1. raises constructionerror if the number of poles is greater than maxdegree + 1 or lower than 2.

        Parameters
        ----------
        CurvePoles: TColgp_Array1OfPnt2d

        Returns
        -------
        None
        Creates a rational bezier curve with the set of poles curvepoles and the set of weights poleweights . if all the weights are identical the curve is considered as non rational. raises constructionerror if the number of poles is greater than maxdegree + 1 or lower than 2 or curvepoles and curveweights have not the same length or one weight value is lower or equal to resolution from package gp.

        Parameters
        ----------
        CurvePoles: TColgp_Array1OfPnt2d
        PoleWeights: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_BezierCurve_swiginit(self, _Geom2d.new_Geom2d_BezierCurve(*args))

    def Continuity(self, *args):
        r"""
        Returns geomabs_cn, which is the continuity of any bezier curve.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_BezierCurve_Continuity(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this bezier curve.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_BezierCurve_Copy(self, *args)

    def D0(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_D0(self, *args)

    def D1(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_D1(self, *args)

    def D2(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_D2(self, *args)

    def D3(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_D3(self, *args)

    def DN(self, *args):
        r"""
        For this bezier curve, computes - the point p of parameter u, or - the point p and one or more of the following values: - v1, the first derivative vector, - v2, the second derivative vector, - v3, the third derivative vector. note: the parameter u can be outside the bounds of the curve. raises rangeerror if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_BezierCurve_DN(self, *args)

    def Degree(self, *args):
        r"""
        Returns the polynomial degree of the curve. it is the number of poles less one. in this package the degree of a bezier curve cannot be greater than 'maxdegree'.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BezierCurve_Degree(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_BezierCurve self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_BezierCurve_DumpJsonToString(self, depth)

    def EndPoint(self, *args):
        r"""
        Returns the end point or start point of this bezier curve.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BezierCurve_EndPoint(self, *args)

    def FirstParameter(self, *args):
        r"""
        Returns the value of the first parameter of this bezier curve. this is 0.0, which gives the start point of this bezier curve.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BezierCurve_FirstParameter(self, *args)

    def Increase(self, *args):
        r"""
        Increases the degree of a bezier curve. degree is the new degree of <self>. raises constructionerror if degree is greater than maxdegree or lower than 2 or lower than the initial degree of <self>.

        Parameters
        ----------
        Degree: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_Increase(self, *args)

    def InsertPoleAfter(self, *args):
        r"""
        Inserts a pole with its weight in the set of poles after the pole of range index. if the curve was non rational it can become rational if all the weights are not identical. raised if index is not in the range [0, nbpoles] //! raised if the resulting number of poles is greater than maxdegree + 1.

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float,optional
        	default value is 1.0

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_InsertPoleAfter(self, *args)

    def InsertPoleBefore(self, *args):
        r"""
        Inserts a pole with its weight in the set of poles after the pole of range index. if the curve was non rational it can become rational if all the weights are not identical. raised if index is not in the range [1, nbpoles+1] //! raised if the resulting number of poles is greater than maxdegree + 1.

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float,optional
        	default value is 1.0

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_InsertPoleBefore(self, *args)

    def IsCN(self, *args):
        r"""
        Continuity of the curve, returns true.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BezierCurve_IsCN(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns true if the distance between the first point and the last point of the curve is lower or equal to the resolution from package gp.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BezierCurve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Returns false. a beziercurve cannot be periodic in this package.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BezierCurve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        Returns false if all the weights are identical. the tolerance criterion is resolution from package gp.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_BezierCurve_IsRational(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns the value of the last parameter of this bezier curve. this is 1.0, which gives the end point of this bezier curve.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BezierCurve_LastParameter(self, *args)

    @staticmethod
    def MaxDegree(*args):
        r"""
        Returns the value of the maximum polynomial degree of a beziercurve. this value is 25.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BezierCurve_MaxDegree(*args)

    def NbPoles(self, *args):
        r"""
        Returns the number of poles for this bezier curve.

        Returns
        -------
        int

        """
        return _Geom2d.Geom2d_BezierCurve_NbPoles(self, *args)

    def Pole(self, *args):
        r"""
        Returns the pole of range index. raised if index is not in the range [1, nbpoles].

        Parameters
        ----------
        Index: int

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BezierCurve_Pole(self, *args)

    def Poles(self, *args):
        r"""
        Returns all the poles of the curve. //! raised if the length of p is not equal to the number of poles.

        Parameters
        ----------
        P: TColgp_Array1OfPnt2d

        Returns
        -------
        None
        Returns all the poles of the curve.

        Returns
        -------
        TColgp_Array1OfPnt2d

        """
        return _Geom2d.Geom2d_BezierCurve_Poles(self, *args)

    def RemovePole(self, *args):
        r"""
        Removes the pole of range index. if the curve was rational it can become non rational. raised if index is not in the range [1, nbpoles].

        Parameters
        ----------
        Index: int

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_RemovePole(self, *args)

    def Resolution(self, *args):
        r"""
        Computes for this bezier curve the parametric tolerance utolerance for a given tolerance tolerance3d (relative to dimensions in the plane). if f(t) is the equation of this bezier curve, utolerance ensures that | t1 - t0| < utolerance ===> |f(t1) - f(t0)| < toleranceuv.

        Parameters
        ----------
        ToleranceUV: float

        Returns
        -------
        UTolerance: float

        """
        return _Geom2d.Geom2d_BezierCurve_Resolution(self, *args)

    def Reverse(self, *args):
        r"""
        Reverses the direction of parametrization of <self> value (newu) = value (1 - oldu).

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_Reverse(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Returns the parameter on the reversed curve for the point of parameter u on <self>. //! returns 1-u.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BezierCurve_ReversedParameter(self, *args)

    def Segment(self, *args):
        r"""
        Segments the curve between u1 and u2 which can be out of the bounds of the curve. the curve is oriented from u1 to u2. the control points are modified, the first and the last point are not the same but the parametrization range is [0, 1] else it could not be a bezier curve. warnings : even if <self> is not closed it can become closed after the segmentation for example if u1 or u2 are out of the bounds of the curve <self> or if the curve makes loop. after the segmentation the length of a curve can be null.

        Parameters
        ----------
        U1: float
        U2: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_Segment(self, *args)

    def SetPole(self, *args):
        r"""
        Substitutes the pole of range index with p. if the curve <self> is rational the weight of range index is not modified. raised if index is not in the range [1, nbpoles].

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d

        Returns
        -------
        None
        Substitutes the pole and the weights of range index. if the curve <self> is not rational it can become rational if all the weights are not identical. if the curve was rational it can become non rational if all the weights are identical. raised if index is not in the range [1, nbpoles] raised if weight <= resolution from package gp.

        Parameters
        ----------
        Index: int
        P: gp_Pnt2d
        Weight: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_SetPole(self, *args)

    def SetWeight(self, *args):
        r"""
        Changes the weight of the pole of range index. if the curve <self> is not rational it can become rational if all the weights are not identical. if the curve was rational it can become non rational if all the weights are identical. raised if index is not in the range [1, nbpoles] raised if weight <= resolution from package gp.

        Parameters
        ----------
        Index: int
        Weight: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_SetWeight(self, *args)

    def StartPoint(self, *args):
        r"""
        Returns value (u=1), it is the first control point of the curve.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_BezierCurve_StartPoint(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this bezier curve.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_BezierCurve_Transform(self, *args)

    def Weight(self, *args):
        r"""
        Returns the weight of range index. raised if index is not in the range [1, nbpoles].

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_BezierCurve_Weight(self, *args)

    def Weights(self, *args):
        r"""
        Returns all the weights of the curve. //! raised if the length of w is not equal to the number of poles.

        Parameters
        ----------
        W: TColStd_Array1OfReal

        Returns
        -------
        None
        Returns all the weights of the curve.

        Returns
        -------
        TColStd_Array1OfReal *

        """
        return _Geom2d.Geom2d_BezierCurve_Weights(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_BezierCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_BezierCurve

# Register Geom2d_BezierCurve in _Geom2d:
_Geom2d.Geom2d_BezierCurve_swigregister(Geom2d_BezierCurve)

def Geom2d_BezierCurve_MaxDegree(*args):
    r"""
    Returns the value of the maximum polynomial degree of a beziercurve. this value is 25.

    Returns
    -------
    int

    """
    return _Geom2d.Geom2d_BezierCurve_MaxDegree(*args)

class Geom2d_Circle(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs a circle by conversion of the gp_circ2d circle c.

        Parameters
        ----------
        C: gp_Circ2d

        Returns
        -------
        None
        Constructs a circle of radius radius, whose center is the origin of axis a; a is the 'x axis' of the local coordinate system of the circle; this coordinate system is direct if sense is true (default value) or indirect if sense is false. note: it is possible to create a circle where radius is equal to 0.0. exceptions standard_constructionerror if radius is negative.

        Parameters
        ----------
        A: gp_Ax2d
        Radius: float
        Sense: bool,optional
        	default value is Standard_True

        Returns
        -------
        None
        Constructs a circle of radius radius, where the coordinate system a locates the circle and defines its orientation in the plane such that: - the center of the circle is the origin of a, - the orientation (direct or indirect) of a gives the orientation of the circle.

        Parameters
        ----------
        A: gp_Ax22d
        Radius: float

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_Circle_swiginit(self, _Geom2d.new_Geom2d_Circle(*args))

    def Circ2d(self, *args):
        r"""
        Returns the non persistent circle from gp with the same geometric properties as <self>.

        Returns
        -------
        gp_Circ2d

        """
        return _Geom2d.Geom2d_Circle_Circ2d(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this circle.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Circle_Copy(self, *args)

    def D0(self, *args):
        r"""
        Returns in p the point of parameter u. p = c + r * cos (u) * xdir + r * sin (u) * ydir where c is the center of the circle , xdir the xdirection and ydir the ydirection of the circle's local coordinate system.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Circle_D0(self, *args)

    def D1(self, *args):
        r"""
        Returns the point p of parameter u and the first derivative v1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Circle_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Circle_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first second and third derivatives v1 v2 and v3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Circle_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this circle, computes the vector corresponding to the nth derivative. exceptions: standard_rangeerror if n is less than 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_Circle_DN(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Circle self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Circle_DumpJsonToString(self, depth)

    def Eccentricity(self, *args):
        r"""
        Returns 0., which is the eccentricity of any circle.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Circle_Eccentricity(self, *args)

    def FirstParameter(self, *args):
        r"""
        Returns 0.0.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Circle_FirstParameter(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns true.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Circle_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Returns true. the period of a circle is 2.*pi.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Circle_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns 2*pi.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Circle_LastParameter(self, *args)

    def Radius(self, *args):
        r"""
        Returns the radius of this circle.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Circle_Radius(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed circle for the point of parameter u on this circle. for a circle, the returned value is: 2.*pi - u.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Circle_ReversedParameter(self, *args)

    def SetCirc2d(self, *args):
        r"""
        Converts the gp_circ2d circle c into this circle.

        Parameters
        ----------
        C: gp_Circ2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Circle_SetCirc2d(self, *args)

    def SetRadius(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        R: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Circle_SetRadius(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this circle.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Circle_Transform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Circle_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Circle

# Register Geom2d_Circle in _Geom2d:
_Geom2d.Geom2d_Circle_swigregister(Geom2d_Circle)

class Geom2d_Ellipse(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an ellipse by conversion of the gp_elips2d ellipse e.

        Parameters
        ----------
        E: gp_Elips2d

        Returns
        -------
        None
        Creates an ellipse defined by its major and minor radii, majorradius and minorradius, and positioned in the plane by its major axis majoraxis; the center of the ellipse is the origin of majoraxis and the unit vector of majoraxis is the 'x direction' of the local coordinate system of the ellipse; this coordinate system is direct if sense is true (default value) or indirect if sense is false. warnings : it is not forbidden to create an ellipse with majorradius = minorradius. exceptions standard_constructionerror if: - majorradius is less than minorradius, or - minorradius is less than 0.

        Parameters
        ----------
        MajorAxis: gp_Ax2d
        MajorRadius: float
        MinorRadius: float
        Sense: bool,optional
        	default value is Standard_True

        Returns
        -------
        None
        Creates an ellipse defined by its major and minor radii, majorradius and minorradius, where the coordinate system axis locates the ellipse and defines its orientation in the plane such that: - the center of the ellipse is the origin of axis, - the 'x direction' of axis defines the major axis of the ellipse, - the 'y direction' of axis defines the minor axis of the ellipse, - the orientation of axis (direct or indirect) gives the orientation of the ellipse. warnings : it is not forbidden to create an ellipse with majorradius = minorradius. exceptions standard_constructionerror if: - majorradius is less than minorradius, or - minorradius is less than 0.

        Parameters
        ----------
        Axis: gp_Ax22d
        MajorRadius: float
        MinorRadius: float

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_Ellipse_swiginit(self, _Geom2d.new_Geom2d_Ellipse(*args))

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this ellipse.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Ellipse_Copy(self, *args)

    def D0(self, *args):
        r"""
        Returns in p the point of parameter u. p = c + majorradius * cos (u) * xdir + minorradius * sin (u) * ydir where c is the center of the ellipse , xdir the direction of the 'xaxis' and 'ydir' the 'yaxis' of the ellipse.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_D0(self, *args)

    def D1(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u. the vectors v1 and v2 are the first and second derivatives at this point.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first second and third derivatives v1 v2 and v3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this ellipse, computes the vector corresponding to the nth derivative. exceptions standard_rangeerror if n is less than 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_Ellipse_DN(self, *args)

    def Directrix1(self, *args):
        r"""
        Computes the directrices of this ellipse. this directrix is the line normal to the xaxis of the ellipse in the local plane (z = 0) at a distance d = majorradius / e from the center of the ellipse, where e is the eccentricity of the ellipse. this line is parallel to the 'yaxis'. the intersection point between directrix1 and the 'xaxis' is the 'location' point of the directrix1. this point is on the positive side of the 'xaxis'. raises constructionerror if eccentricity = 0.0. (the ellipse degenerates into a circle).

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Ellipse_Directrix1(self, *args)

    def Directrix2(self, *args):
        r"""
        This line is obtained by the symmetrical transformation of 'directrix1' with respect to the 'yaxis' of the ellipse. raises constructionerror if eccentricity = 0.0. (the ellipse degenerates into a circle).

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Ellipse_Directrix2(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Ellipse self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Ellipse_DumpJsonToString(self, depth)

    def Eccentricity(self, *args):
        r"""
        Returns the eccentricity of the ellipse between 0.0 and 1.0 if f is the distance between the center of the ellipse and the focus1 then the eccentricity e = f / majorradius. returns 0 if majorradius = 0.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_Eccentricity(self, *args)

    def Elips2d(self, *args):
        r"""
        Converts this ellipse into a gp_elips2d ellipse.

        Returns
        -------
        gp_Elips2d

        """
        return _Geom2d.Geom2d_Ellipse_Elips2d(self, *args)

    def FirstParameter(self, *args):
        r"""
        Returns the value of the first parameter of this ellipse. this is 0.0, which gives the start point of this ellipse. the start point and end point of an ellipse are coincident.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_FirstParameter(self, *args)

    def Focal(self, *args):
        r"""
        Computes the focal distance. the focal distance is the distance between the center and a focus of the ellipse.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_Focal(self, *args)

    def Focus1(self, *args):
        r"""
        Returns the first focus of the ellipse. this focus is on the positive side of the 'xaxis' of the ellipse.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Ellipse_Focus1(self, *args)

    def Focus2(self, *args):
        r"""
        Returns the second focus of the ellipse. this focus is on the negative side of the 'xaxis' of the ellipse.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Ellipse_Focus2(self, *args)

    def IsClosed(self, *args):
        r"""
        Return true.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Ellipse_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Return true.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Ellipse_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns the value of the last parameter of this ellipse. this is 2.*pi, which gives the end point of this ellipse. the start point and end point of an ellipse are coincident.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_LastParameter(self, *args)

    def MajorRadius(self, *args):
        r"""
        Returns the major radius of this ellipse.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        r"""
        Returns the minor radius of this ellipse.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_MinorRadius(self, *args)

    def Parameter(self, *args):
        r"""
        Computes the parameter of this ellipse. this value is given by the formula p = (1 - e * e) * majorradius where e is the eccentricity of the ellipse. returns 0 if majorradius = 0.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_Parameter(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed ellipse for the point of parameter u on this ellipse. for an ellipse, the returned value is: 2.*pi - u.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Ellipse_ReversedParameter(self, *args)

    def SetElips2d(self, *args):
        r"""
        Converts the gp_elips2d ellipse e into this ellipse.

        Parameters
        ----------
        E: gp_Elips2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_SetElips2d(self, *args)

    def SetMajorRadius(self, *args):
        r"""
        Assigns a value to the major radius of this ellipse. exceptions standard_constructionerror if: - the major radius of this ellipse becomes less than the minor radius, or - minorradius is less than 0.

        Parameters
        ----------
        MajorRadius: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        r"""
        Assigns a value to the minor radius of this ellipse. exceptions standard_constructionerror if: - the major radius of this ellipse becomes less than the minor radius, or - minorradius is less than 0.

        Parameters
        ----------
        MinorRadius: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_SetMinorRadius(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this ellipse.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Ellipse_Transform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Ellipse_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Ellipse

# Register Geom2d_Ellipse in _Geom2d:
_Geom2d.Geom2d_Ellipse_swigregister(Geom2d_Ellipse)

class Geom2d_Hyperbola(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an hyperbola from a non persistent one from package gp.

        Parameters
        ----------
        H: gp_Hypr2d

        Returns
        -------
        None
        Majoraxis is the 'xaxis' of the hyperbola. the yaxis is in the direct sense if 'sense' is true; the major radius of the hyperbola is on this 'xaxis' and the minor radius is on the 'yaxis' of the hyperbola. raised if majorradius < 0.0 or if minorradius < 0.0.

        Parameters
        ----------
        MajorAxis: gp_Ax2d
        MajorRadius: float
        MinorRadius: float
        Sense: bool,optional
        	default value is Standard_True

        Returns
        -------
        None
        The xdirection of 'axis' is the 'xaxis' of the hyperbola and the ydirection of 'axis' is the 'yaxis'. the major radius of the hyperbola is on this 'xaxis' and the minor radius is on the 'yaxis' of the hyperbola. raised if majorradius < 0.0 or if minorradius < 0.0.

        Parameters
        ----------
        Axis: gp_Ax22d
        MajorRadius: float
        MinorRadius: float

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_Hyperbola_swiginit(self, _Geom2d.new_Geom2d_Hyperbola(*args))

    def Asymptote1(self, *args):
        r"""
        In the local coordinate system of the hyperbola the equation of the hyperbola is (x*x)/(a*a) - (y*y)/(b*b) = 1.0 and the equation of the first asymptote is y = (b/a)*x where a is the major radius of the hyperbola and b is the minor radius of the hyperbola. raised if majorradius = 0.0.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Hyperbola_Asymptote1(self, *args)

    def Asymptote2(self, *args):
        r"""
        In the local coordinate system of the hyperbola the equation of the hyperbola is (x*x)/(a*a) - (y*y)/(b*b) = 1.0 and the equation of the first asymptote is y = -(b/a)*x. where a is the major radius of the hyperbola and b is the minor radius of the hyperbola. raised if majorradius = 0.0.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Hyperbola_Asymptote2(self, *args)

    def ConjugateBranch1(self, *args):
        r"""
        Computes the first conjugate branch relative to this hyperbola. note: the diagram given under the class purpose indicates where these two branches of hyperbola are positioned in relation to this branch of hyperbola.

        Returns
        -------
        gp_Hypr2d

        """
        return _Geom2d.Geom2d_Hyperbola_ConjugateBranch1(self, *args)

    def ConjugateBranch2(self, *args):
        r"""
        Computes the second conjugate branch relative to this hyperbola. note: the diagram given under the class purpose indicates where these two branches of hyperbola are positioned in relation to this branch of hyperbola.

        Returns
        -------
        gp_Hypr2d

        """
        return _Geom2d.Geom2d_Hyperbola_ConjugateBranch2(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object which is a copy of this hyperbola.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Hyperbola_Copy(self, *args)

    def D0(self, *args):
        r"""
        Returns in p the point of parameter u. p = c + majorradius * cosh (u) * xdir + minorradius * sinh (u) * ydir where c is the center of the hyperbola , xdir the xdirection and ydir the ydirection of the hyperbola's local coordinate system.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_D0(self, *args)

    def D1(self, *args):
        r"""
        Returns the point p of parameter u and the first derivative v1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first second and third derivatives v1 v2 and v3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this hyperbola, computes the vector corresponding to the nth derivative. exceptions standard_rangeerror if n is less than 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_Hyperbola_DN(self, *args)

    def Directrix1(self, *args):
        r"""
        This directrix is the line normal to the xaxis of the hyperbola in the local plane (z = 0) at a distance d = majorradius / e from the center of the hyperbola, where e is the eccentricity of the hyperbola. this line is parallel to the 'yaxis'. the intersection point between directrix1 and the 'xaxis' is the location point of the directrix1. this point is on the positive side of the 'xaxis'.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Hyperbola_Directrix1(self, *args)

    def Directrix2(self, *args):
        r"""
        This line is obtained by the symmetrical transformation of 'directrix1' with respect to the 'yaxis' of the hyperbola.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Hyperbola_Directrix2(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Hyperbola self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Hyperbola_DumpJsonToString(self, depth)

    def Eccentricity(self, *args):
        r"""
        Returns the eccentricity of the hyperbola (e > 1). if f is the distance between the location of the hyperbola and the focus1 then the eccentricity e = f / majorradius. raised if majorradius = 0.0.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_Eccentricity(self, *args)

    def FirstParameter(self, *args):
        r"""
        Returns realfirst from standard.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_FirstParameter(self, *args)

    def Focal(self, *args):
        r"""
        Computes the focal distance. it is the distance between the two focus of the hyperbola.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_Focal(self, *args)

    def Focus1(self, *args):
        r"""
        Returns the first focus of the hyperbola. this focus is on the positive side of the 'xaxis' of the hyperbola.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Hyperbola_Focus1(self, *args)

    def Focus2(self, *args):
        r"""
        Returns the second focus of the hyperbola. this focus is on the negative side of the 'xaxis' of the hyperbola.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Hyperbola_Focus2(self, *args)

    def Hypr2d(self, *args):
        r"""
        Converts this hyperbola into a gp_hypr2d one.

        Returns
        -------
        gp_Hypr2d

        """
        return _Geom2d.Geom2d_Hyperbola_Hypr2d(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns false.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Hyperbola_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Return false for an hyperbola.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Hyperbola_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns reallast from standard.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_LastParameter(self, *args)

    def MajorRadius(self, *args):
        r"""
        Returns the major or minor radius of this hyperbola. the major radius is also the distance between the center of the hyperbola and the apex of the main branch (located on the 'x axis' of the hyperbola).

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_MajorRadius(self, *args)

    def MinorRadius(self, *args):
        r"""
        Returns the major or minor radius of this hyperbola. the minor radius is also the distance between the center of the hyperbola and the apex of a conjugate branch (located on the 'y axis' of the hyperbola).

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_MinorRadius(self, *args)

    def OtherBranch(self, *args):
        r"""
        Computes the 'other' branch of this hyperbola. this is a symmetrical branch with respect to the center of this hyperbola. note: the diagram given under the class purpose indicates where the 'other' branch is positioned in relation to this branch of the hyperbola. ^ yaxis | firstconjugatebranch | other | main ---------------------------- c ------------------------------------------&gtxaxis branch | branch | | secondconjugatebranch | warning the major radius can be less than the minor radius.

        Returns
        -------
        gp_Hypr2d

        """
        return _Geom2d.Geom2d_Hyperbola_OtherBranch(self, *args)

    def Parameter(self, *args):
        r"""
        Computes the parameter of this hyperbola. the parameter is: p = (e*e - 1) * majorradius where e is the eccentricity of this hyperbola and majorradius its major radius. exceptions standard_domainerror if the major radius of this hyperbola is null.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_Parameter(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed hyperbola, for the point of parameter u on this hyperbola. for a hyperbola, the returned value is -u.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Hyperbola_ReversedParameter(self, *args)

    def SetHypr2d(self, *args):
        r"""
        Converts the gp_hypr2d hyperbola h into this hyperbola.

        Parameters
        ----------
        H: gp_Hypr2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_SetHypr2d(self, *args)

    def SetMajorRadius(self, *args):
        r"""
        Assigns a value to the major or minor radius of this hyperbola. exceptions standard_constructionerror if: - majorradius is less than 0.0, - minorradius is less than 0.0.

        Parameters
        ----------
        MajorRadius: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_SetMajorRadius(self, *args)

    def SetMinorRadius(self, *args):
        r"""
        Assigns a value to the major or minor radius of this hyperbola. exceptions standard_constructionerror if: - majorradius is less than 0.0, - minorradius is less than 0.0.

        Parameters
        ----------
        MinorRadius: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_SetMinorRadius(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this hyperbola.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Hyperbola_Transform(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Hyperbola_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Hyperbola

# Register Geom2d_Hyperbola in _Geom2d:
_Geom2d.Geom2d_Hyperbola_swigregister(Geom2d_Hyperbola)

class Geom2d_Parabola(Geom2d_Conic):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a parabola from a non persistent one.

        Parameters
        ----------
        Prb: gp_Parab2d

        Returns
        -------
        None
        Creates a parabola with its 'mirroraxis' and it's focal length 'focal'. mirroraxis is the axis of symmetry of the curve, it is the 'xaxis'. the 'yaxis' is parallel to the directrix of the parabola and is in the direct sense if sense is true. the 'location' point of 'mirroraxis' is the vertex of the parabola raised if focal < 0.0.

        Parameters
        ----------
        MirrorAxis: gp_Ax2d
        Focal: float
        Sense: bool,optional
        	default value is Standard_True

        Returns
        -------
        None
        Creates a parabola with its axis and it's focal length 'focal'. the xdirection of axis is the axis of symmetry of the curve, it is the 'xaxis'. the 'yaxis' is parallel to the directrix of the parabola. the 'location' point of 'axis' is the vertex of the parabola. raised if focal < 0.0.

        Parameters
        ----------
        Axis: gp_Ax22d
        Focal: float

        Returns
        -------
        None
        D is the directrix of the parabola and f the focus point. the symmetry axis 'xaxis' of the parabola is normal to the directrix and pass through the focus point f, but its 'location' point is the vertex of the parabola. the 'yaxis' of the parabola is parallel to d and its 'location' point is the vertex of the parabola.

        Parameters
        ----------
        D: gp_Ax2d
        F: gp_Pnt2d

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_Parabola_swiginit(self, _Geom2d.new_Geom2d_Parabola(*args))

    def Copy(self, *args):
        r"""
        Creates a new object, which is a copy of this parabola.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_Parabola_Copy(self, *args)

    def D0(self, *args):
        r"""
        Returns in p the point of parameter u. if u = 0 the returned point is the origin of the xaxis and the yaxis of the parabola and it is the vertex of the parabola. p = s + f * (u * u * xdir + * u * ydir) where s is the vertex of the parabola, xdir the xdirection and ydir the ydirection of the parabola's local coordinate system.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Parabola_D0(self, *args)

    def D1(self, *args):
        r"""
        Returns the point p of parameter u and the first derivative v1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Parabola_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Parabola_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first second and third derivatives v1 v2 and v3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Parabola_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this parabola, computes the vector corresponding to the nth derivative. exceptions standard_rangeerror if n is less than 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_Parabola_DN(self, *args)

    def Directrix(self, *args):
        r"""
        The directrix is parallel to the 'yaxis' of the parabola. the 'location' point of the directrix is the intersection point between the directrix and the symmetry axis ('xaxis') of the parabola.

        Returns
        -------
        gp_Ax2d

        """
        return _Geom2d.Geom2d_Parabola_Directrix(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_Parabola self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_Parabola_DumpJsonToString(self, depth)

    def Eccentricity(self, *args):
        r"""
        Returns the eccentricity e = 1.0.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_Eccentricity(self, *args)

    def FirstParameter(self, *args):
        r"""
        Returns realfirst from standard.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_FirstParameter(self, *args)

    def Focal(self, *args):
        r"""
        Computes the focal length of this parabola. the focal length is the distance between the apex and the focus of the parabola.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_Focal(self, *args)

    def Focus(self, *args):
        r"""
        Computes the focus of this parabola the focus is on the positive side of the 'x axis' of the local coordinate system of the parabola.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_Parabola_Focus(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns false.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Parabola_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Returns false.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_Parabola_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns reallast from standard.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_LastParameter(self, *args)

    def Parab2d(self, *args):
        r"""
        Returns the non persistent parabola from gp with the same geometric properties as <self>.

        Returns
        -------
        gp_Parab2d

        """
        return _Geom2d.Geom2d_Parabola_Parab2d(self, *args)

    def Parameter(self, *args):
        r"""
        Computes the parameter of this parabola, which is the distance between its focus and its directrix. this distance is twice the focal length. if p is the parameter of the parabola, the equation of the parabola in its local coordinate system is: y**2 = 2.*p*x.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_Parameter(self, *args)

    def ParametricTransformation(self, *args):
        r"""
        Returns a coefficient to compute the parameter on the transformed curve for the transform of the point on <self>. //! transformed(t)->value(u * parametrictransformation(t)) //! is the same point as //! value(u).transformed(t) //! this methods returns t.scalefactor().

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_ParametricTransformation(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Computes the parameter on the reversed parabola for the point of parameter u on this parabola. for a parabola, the returned value is -u.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_ReversedParameter(self, *args)

    def SetFocal(self, *args):
        r"""
        Assigns the value focal to the focal length of this parabola. exceptions standard_constructionerror if focal is negative.

        Parameters
        ----------
        Focal: float

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Parabola_SetFocal(self, *args)

    def SetParab2d(self, *args):
        r"""
        Converts the gp_parab2d parabola prb into this parabola.

        Parameters
        ----------
        Prb: gp_Parab2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Parabola_SetParab2d(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this parabola.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_Parabola_Transform(self, *args)

    def TransformedParameter(self, *args):
        r"""
        Computes the parameter on the transformed parabola, for the point of parameter u on this parabola. for a parabola, the returned value is equal to u multiplied by the scale factor of transformation t.

        Parameters
        ----------
        U: float
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_Parabola_TransformedParameter(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_Parabola_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_Parabola

# Register Geom2d_Parabola in _Geom2d:
_Geom2d.Geom2d_Parabola_swigregister(Geom2d_Parabola)

class Geom2d_TrimmedCurve(Geom2d_BoundedCurve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a trimmed curve from the basis curve c limited between u1 and u2. //! . u1 can be greater or lower than u2. . the returned curve is oriented from u1 to u2. . if the basis curve c is periodic there is an ambiguity because two parts are available. in this case by default the trimmed curve has the same orientation as the basis curve (sense = true). if sense = false then the orientation of the trimmed curve is opposite to the orientation of the basis curve c. if the curve is closed but not periodic it is not possible to keep the part of the curve including the junction point (except if the junction point is at the beginning or at the end of the trimmed curve) because you could lose the fundamental characteristics of the basis curve which are used for example to compute the derivatives of the trimmed curve. so for a closed curve the rules are the same as for a open curve. warnings : in this package the entities are not shared. the trimmedcurve is built with a copy of the curve c. so when c is modified the trimmedcurve is not modified warnings : if <c> is periodic and <theadjustperiodic> is true, parametrics bounds of the trimmedcurve, can be different to [<u1>;<u2>}, if <u1> or <u2> are not in the principal period. include : for more explanation see the scheme given with this class. raises constructionerror the c is not periodic and u1 or u2 are out of the bounds of c. raised if u1 = u2.

        Parameters
        ----------
        C: Geom2d_Curve
        U1: float
        U2: float
        Sense: bool,optional
        	default value is Standard_True
        theAdjustPeriodic: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        _Geom2d.Geom2d_TrimmedCurve_swiginit(self, _Geom2d.new_Geom2d_TrimmedCurve(*args))

    def BasisCurve(self, *args):
        r"""
        Returns the basis curve. warning this function does not return a constant reference. consequently, any modification of the returned value directly modifies the trimmed curve.

        Returns
        -------
        opencascade::handle<Geom2d_Curve>

        """
        return _Geom2d.Geom2d_TrimmedCurve_BasisCurve(self, *args)

    def Continuity(self, *args):
        r"""
        Returns the global continuity of the basis curve of this trimmed curve. c0 : only geometric continuity, c1 : continuity of the first derivative all along the curve, c2 : continuity of the second derivative all along the curve, c3 : continuity of the third derivative all along the curve, cn : the order of continuity is infinite.

        Returns
        -------
        GeomAbs_Shape

        """
        return _Geom2d.Geom2d_TrimmedCurve_Continuity(self, *args)

    def Copy(self, *args):
        r"""
        Creates a new object, which is a copy of this trimmed curve.

        Returns
        -------
        opencascade::handle<Geom2d_Geometry>

        """
        return _Geom2d.Geom2d_TrimmedCurve_Copy(self, *args)

    def D0(self, *args):
        r"""
        If the basis curve is an offsetcurve sometimes it is not possible to do the evaluation of the curve at the parameter u (see class offsetcurve).

        Parameters
        ----------
        U: float
        P: gp_Pnt2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_TrimmedCurve_D0(self, *args)

    def D1(self, *args):
        r"""
        Raised if the continuity of the curve is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_TrimmedCurve_D1(self, *args)

    def D2(self, *args):
        r"""
        Raised if the continuity of the curve is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_TrimmedCurve_D2(self, *args)

    def D3(self, *args):
        r"""
        Raised if the continuity of the curve is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt2d
        V1: gp_Vec2d
        V2: gp_Vec2d
        V3: gp_Vec2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_TrimmedCurve_D3(self, *args)

    def DN(self, *args):
        r"""
        For the point of parameter u of this trimmed curve, computes the vector corresponding to the nth derivative. warning the returned derivative vector has the same orientation as the derivative vector of the basis curve, even if the trimmed curve does not have the same orientation as the basis curve. exceptions standard_rangeerror if n is less than 1. geometric transformations.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec2d

        """
        return _Geom2d.Geom2d_TrimmedCurve_DN(self, *args)

    def DumpJsonToString(self, depth=-1):
        r"""DumpJsonToString(Geom2d_TrimmedCurve self, int depth=-1) -> std::string"""
        return _Geom2d.Geom2d_TrimmedCurve_DumpJsonToString(self, depth)

    def EndPoint(self, *args):
        r"""
        Returns the end point of <self>. this point is the evaluation of the curve for the 'lastparameter'.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_TrimmedCurve_EndPoint(self, *args)

    def FirstParameter(self, *args):
        r"""
        Returns the value of the first parameter of <self>. the first parameter is the parameter of the 'startpoint' of the trimmed curve.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_TrimmedCurve_FirstParameter(self, *args)

    def IsCN(self, *args):
        r"""
        --- purpose returns true if the order of continuity of the trimmed curve is n. a trimmed curve is at least 'c0' continuous. warnings : the continuity of the trimmed curve can be greater than the continuity of the basis curve because you consider only a part of the basis curve. raised if n < 0.

        Parameters
        ----------
        N: int

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_TrimmedCurve_IsCN(self, *args)

    def IsClosed(self, *args):
        r"""
        Returns true if the distance between the startpoint and the endpoint is lower or equal to resolution from package gp.

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_TrimmedCurve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        Always returns false (independently of the type of basis curve).

        Returns
        -------
        bool

        """
        return _Geom2d.Geom2d_TrimmedCurve_IsPeriodic(self, *args)

    def LastParameter(self, *args):
        r"""
        Returns the value of the last parameter of <self>. the last parameter is the parameter of the 'endpoint' of the trimmed curve.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_TrimmedCurve_LastParameter(self, *args)

    def ParametricTransformation(self, *args):
        r"""
        Returns a coefficient to compute the parameter on the transformed curve for the transform of the point on <self>. //! transformed(t)->value(u * parametrictransformation(t)) //! is the same point as //! value(u).transformed(t) //! this methods calls the basis curve method.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_TrimmedCurve_ParametricTransformation(self, *args)

    def Period(self, *args):
        r"""
        Returns the period of the basis curve of this trimmed curve. exceptions standard_nosuchobject if the basis curve is not periodic.

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_TrimmedCurve_Period(self, *args)

    def Reverse(self, *args):
        r"""
        Changes the direction of parametrization of <self>. the first and the last parametric values are modified. the 'startpoint' of the initial curve becomes the 'endpoint' of the reversed curve and the 'endpoint' of the initial curve becomes the 'startpoint' of the reversed curve. example - if the trimmed curve is defined by: - a basis curve whose parameter range is [ 0.,1. ], and - the two trim values u1 (first parameter) and u2 (last parameter), the reversed trimmed curve is defined by: - the reversed basis curve, whose parameter range is still [ 0.,1. ], and - the two trim values 1. - u2 (first parameter) and 1. - u1 (last parameter).

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_TrimmedCurve_Reverse(self, *args)

    def ReversedParameter(self, *args):
        r"""
        Returns the parameter on the reversed curve for the point of parameter u on <self>. //! returns ufirst + ulast - u.

        Parameters
        ----------
        U: float

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_TrimmedCurve_ReversedParameter(self, *args)

    def SetTrim(self, *args):
        r"""
        Changes this trimmed curve, by redefining the parameter values u1 and u2, which limit its basis curve. note: if the basis curve is periodic, the trimmed curve has the same orientation as the basis curve if sense is true (default value) or the opposite orientation if sense is false. warning if the basis curve is periodic and theadjustperiodic is true, the bounds of the trimmed curve may be different from u1 and u2 if the parametric origin of the basis curve is within the arc of the trimmed curve. in this case, the modified parameter will be equal to u1 or u2 plus or minus the period. if theadjustperiodic is false, parameters u1 and u2 will stay unchanged. exceptions standard_constructionerror if: - the basis curve is not periodic, and either u1 or u2 are outside the bounds of the basis curve, or - u1 is equal to u2.

        Parameters
        ----------
        U1: float
        U2: float
        Sense: bool,optional
        	default value is Standard_True
        theAdjustPeriodic: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_TrimmedCurve_SetTrim(self, *args)

    def StartPoint(self, *args):
        r"""
        Returns the start point of <self>. this point is the evaluation of the curve from the 'firstparameter'. value and derivatives warnings : the returned derivatives have the same orientation as the derivatives of the basis curve.

        Returns
        -------
        gp_Pnt2d

        """
        return _Geom2d.Geom2d_TrimmedCurve_StartPoint(self, *args)

    def Transform(self, *args):
        r"""
        Applies the transformation t to this trimmed curve. warning the basis curve is also modified.

        Parameters
        ----------
        T: gp_Trsf2d

        Returns
        -------
        None

        """
        return _Geom2d.Geom2d_TrimmedCurve_Transform(self, *args)

    def TransformedParameter(self, *args):
        r"""
        Returns the parameter on the transformed curve for the transform of the point of parameter u on <self>. //! me->transformed(t)->value(me->transformedparameter(u,t)) //! is the same point as //! me->value(u).transformed(t) //! this methods calls the basis curve method.

        Parameters
        ----------
        U: float
        T: gp_Trsf2d

        Returns
        -------
        float

        """
        return _Geom2d.Geom2d_TrimmedCurve_TransformedParameter(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_Geom2d_TrimmedCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _Geom2d.delete_Geom2d_TrimmedCurve

# Register Geom2d_TrimmedCurve in _Geom2d:
_Geom2d.Geom2d_TrimmedCurve_swigregister(Geom2d_TrimmedCurve)




@deprecated
def Geom2d_BSplineCurve_MaxDegree(*args):
	return Geom2d_BSplineCurve.MaxDegree(*args)

@deprecated
def Geom2d_BezierCurve_MaxDegree(*args):
	return Geom2d_BezierCurve.MaxDegree(*args)




