# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepOffsetAPI module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_brepoffsetapi.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepOffsetAPI
else:
    import _BRepOffsetAPI

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepOffsetAPI.delete_SwigPyIterator

    def value(self):
        return _BRepOffsetAPI.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepOffsetAPI.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepOffsetAPI.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepOffsetAPI.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepOffsetAPI.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepOffsetAPI.SwigPyIterator_copy(self)

    def next(self):
        return _BRepOffsetAPI.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepOffsetAPI.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepOffsetAPI.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepOffsetAPI.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepOffsetAPI.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepOffsetAPI.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepOffsetAPI.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepOffsetAPI.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepOffsetAPI.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepOffsetAPI.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepOffsetAPI:
_BRepOffsetAPI.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BRepOffsetAPI.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.BRepBuilderAPI
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopoDS
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopAbs
import OCC.Core.TopLoc
import OCC.Core.TopTools
import OCC.Core.BRepTools
import OCC.Core.Bnd
import OCC.Core.BVH
import OCC.Core.Geom2d
import OCC.Core.BRep
import OCC.Core.Poly
import OCC.Core.TShort
import OCC.Core.Draft
import OCC.Core.BRepFill
import OCC.Core.MAT
import OCC.Core.AppParCurves
import OCC.Core.math
import OCC.Core.GeomPlate
import OCC.Core.Adaptor3d
import OCC.Core.Adaptor2d
import OCC.Core.TColGeom2d
import OCC.Core.GeomLProp
import OCC.Core.Law
import OCC.Core.AdvApp2Var
import OCC.Core.AdvApprox
import OCC.Core.PLib
import OCC.Core.Plate
import OCC.Core.GeomFill
import OCC.Core.Convert
import OCC.Core.AppBlend
import OCC.Core.Approx
import OCC.Core.AppCont
import OCC.Core.TColGeom
import OCC.Core.BRepMAT2d
import OCC.Core.Bisector
import OCC.Core.IntRes2d
import OCC.Core.BRepOffset
import OCC.Core.ChFiDS
import OCC.Core.BRepAdaptor
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor
import OCC.Core.BRepAlgo
import OCC.Core.BRepPrimAPI
import OCC.Core.BRepPrim
import OCC.Core.BRepSweep
import OCC.Core.Sweep

from enum import IntEnum
from OCC.Core.Exception import *



class BRepOffsetAPI_SequenceOfSequenceOfReal(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_begin(self)

    def end(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_end(self)

    def cbegin(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_cbegin(self)

    def cend(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_cend(self)

    def __init__(self, *args):
        _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_SequenceOfSequenceOfReal(*args))

    def Size(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Size(self)

    def Length(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Length(self)

    def Lower(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Lower(self)

    def Upper(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Upper(self)

    def IsEmpty(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_IsEmpty(self)

    def Reverse(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Reverse(self)

    def Exchange(self, I, J):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Set(self, theOther)

    def Remove(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Remove(self, *args)

    def Append(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Append(self, *args)

    def Prepend(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Split(self, theIndex, theSeq)

    def First(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_First(self)

    def ChangeFirst(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_ChangeFirst(self)

    def Last(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Last(self)

    def ChangeLast(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_ChangeLast(self)

    def Value(self, theIndex):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_SequenceOfSequenceOfReal

    def __len__(self):
        return self.Size()


# Register BRepOffsetAPI_SequenceOfSequenceOfReal in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_swigregister(BRepOffsetAPI_SequenceOfSequenceOfReal)

def BRepOffsetAPI_SequenceOfSequenceOfReal_delNode(theNode, theAl):
    return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfReal_delNode(theNode, theAl)

class BRepOffsetAPI_SequenceOfSequenceOfShape(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_begin(self)

    def end(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_end(self)

    def cbegin(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_cbegin(self)

    def cend(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_cend(self)

    def __init__(self, *args):
        _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_SequenceOfSequenceOfShape(*args))

    def Size(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Size(self)

    def Length(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Length(self)

    def Lower(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Lower(self)

    def Upper(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Upper(self)

    def IsEmpty(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_IsEmpty(self)

    def Reverse(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Reverse(self)

    def Exchange(self, I, J):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Exchange(self, I, J)

    @staticmethod
    def delNode(theNode, theAl):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_delNode(theNode, theAl)

    def Clear(self, theAllocator=0):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Clear(self, theAllocator)

    def Assign(self, theOther):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Assign(self, theOther)

    def Set(self, theOther):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Set(self, theOther)

    def Remove(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Remove(self, *args)

    def Append(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Append(self, *args)

    def Prepend(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Prepend(self, *args)

    def InsertBefore(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_InsertBefore(self, *args)

    def InsertAfter(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_InsertAfter(self, *args)

    def Split(self, theIndex, theSeq):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Split(self, theIndex, theSeq)

    def First(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_First(self)

    def ChangeFirst(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_ChangeFirst(self)

    def Last(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Last(self)

    def ChangeLast(self):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_ChangeLast(self)

    def Value(self, theIndex):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_SetValue(self, theIndex, theItem)
    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_SequenceOfSequenceOfShape

    def __len__(self):
        return self.Size()


# Register BRepOffsetAPI_SequenceOfSequenceOfShape in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_swigregister(BRepOffsetAPI_SequenceOfSequenceOfShape)

def BRepOffsetAPI_SequenceOfSequenceOfShape_delNode(theNode, theAl):
    return _BRepOffsetAPI.BRepOffsetAPI_SequenceOfSequenceOfShape_delNode(theNode, theAl)

class BRepOffsetAPI_DraftAngle(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_ModifyShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an empty algorithm to perform taper-adding transformations on faces of a shape. use the init function to define the shape to be tapered.

        Returns
        -------
        None
        Initializes an algorithm to perform taper-adding transformations on faces of the shape s. s will be referred to as the initial shape of the algorithm.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_DraftAngle(*args))

    def Add(self, *args):
        r"""
        Adds the face f, the direction direction, the angle angle, the plane neutralplane, and the flag flag to the framework created at construction time, and with this data, defines the taper-adding transformation. f is a face, which belongs to the initial shape of this algorithm or to the shape loaded by the function init. only planar, cylindrical or conical faces can be tapered: - if the face f is planar, it is tapered by inclining it through the angle angle about the line of intersection between the plane neutralplane and f. direction indicates the side of neutralplane from which matter is removed if angle is positive or added if angle is negative. - if f is cylindrical or conical, it is transformed in the same way on a single face, resulting in a conical face if f is cylindrical, and a conical or cylindrical face if it is already conical. the taper-adding transformation is propagated from the face f along the series of planar, cylindrical or conical faces containing f, which are tangential to one another. use the function adddone to check if this taper-adding transformation is successful. warning nothing is done if: - the face f does not belong to the initial shape of this algorithm, or - the face f is not planar, cylindrical or conical. exceptions - standard_nullobject if the initial shape is not defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the init function. - standard_constructionerror if the previous call to add has failed. the function adddone ought to have been used to check for this, and the function remove to cancel the results of the unsuccessful taper-adding transformation and to retrieve the previous shape.

        Parameters
        ----------
        F: TopoDS_Face
        Direction: gp_Dir
        Angle: float
        NeutralPlane: gp_Pln
        Flag: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Add(self, *args)

    def AddDone(self, *args):
        r"""
        Returns true if the previous taper-adding transformation performed by this algorithm in the last call to add, was successful. if adddone returns false: - the function problematicshape returns the face on which the error occurred, - the function remove has to be used to cancel the results of the unsuccessful taper-adding transformation and to retrieve the previous shape. exceptions standard_nullobject if the initial shape has not been defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the .init function.

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_AddDone(self, *args)

    def Build(self, *args):
        r"""
        Builds the resulting shape (redefined from makeshape).

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Build(self, *args)

    def Clear(self, *args):
        r"""
        Cancels the results of all taper-adding transformations performed by this algorithm on the initial shape. these results will have been defined by successive calls to the function add.

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Clear(self, *args)

    def ConnectedFaces(self, *args):
        r"""
        Returns all the faces which have been added together with the face <f>.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ConnectedFaces(self, *args)

    def CorrectWires(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_CorrectWires(self, *args)

    def Generated(self, *args):
        r"""
        Returns the list of shapes generated from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Generated(self, *args)

    def Init(self, *args):
        r"""
        Initializes, or reinitializes this taper-adding algorithm with the shape s. s will be referred to as the initial shape of this algorithm.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Init(self, *args)

    def Modified(self, *args):
        r"""
        Returns the list of shapes modified from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Modified(self, *args)

    def ModifiedFaces(self, *args):
        r"""
        Returns all the faces on which a modification has been given.

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ModifiedFaces(self, *args)

    def ModifiedShape(self, *args):
        r"""
        Returns the modified shape corresponding to <s>. s can correspond to the entire initial shape or to its subshape. raises exceptions standard_nosuchobject if s is not the initial shape or a subshape of the initial shape to which the transformation has been applied. .

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ModifiedShape(self, *args)

    def ProblematicShape(self, *args):
        r"""
        Returns the shape on which an error occurred after an unsuccessful call to add or when isdone returns false. exceptions standard_nullobject if the initial shape has not been defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the init function.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_ProblematicShape(self, *args)

    def Remove(self, *args):
        r"""
        Cancels the taper-adding transformation previously performed by this algorithm on the face f and the series of tangential faces which contain f, and retrieves the shape before the last taper-adding transformation. warning you will have to use this function if the previous call to add fails. use the function adddone to check it. exceptions - standard_nullobject if the initial shape has not been defined, i.e. if this algorithm has not been initialized with the non-empty constructor or the init function. - standard_nosuchobject if f has not been added or has already been removed.

        Parameters
        ----------
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Remove(self, *args)

    def Status(self, *args):
        r"""
        Returns an error status when an error has occurred (face, edge or vertex recomputation problem). otherwise returns draft_noerror. the method may be called if adddone returns standard_false, or when isdone returns standard_false.

        Returns
        -------
        Draft_ErrorStatus

        """
        return _BRepOffsetAPI.BRepOffsetAPI_DraftAngle_Status(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_DraftAngle

# Register BRepOffsetAPI_DraftAngle in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_DraftAngle_swigregister(BRepOffsetAPI_DraftAngle)

class BRepOffsetAPI_FindContigousEdges(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Initializes an algorithm for identifying contiguous edges on shapes with tolerance as the tolerance of contiguity (defaulted to 1.0e-6). this tolerance value is used to determine whether two edges or sections of edges are coincident. use the function add to define the shapes to be checked. set option to false. this argument (defaulted to true) will serve in subsequent software releases for performing an analysis of degenerated shapes.

        Parameters
        ----------
        tolerance: float,optional
        	default value is 1.0e-06
        option: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_FindContigousEdges(*args))

    def Add(self, *args):
        r"""
        Adds the shape shape to the list of shapes to be checked by this algorithm. once all the shapes to be checked have been added, use the function perform to find the contiguous edges and the function contigousedge to return these edges.

        Parameters
        ----------
        shape: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Add(self, *args)

    def ContigousEdge(self, *args):
        r"""
        Returns the contiguous edge of index index found by the function perform on the shapes added to this algorithm. exceptions standard_outofrange if: - index is less than 1, or - index is greater than the number of contiguous edges found by the function perform on the shapes added to this algorithm.

        Parameters
        ----------
        index: int

        Returns
        -------
        TopoDS_Edge

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_ContigousEdge(self, *args)

    def ContigousEdgeCouple(self, *args):
        r"""
        Returns a list of edges coincident with the contiguous edge of index index found by the function perform. there are as many edges in the list as there are faces adjacent to this contiguous edge. exceptions standard_outofrange if: - index is less than 1, or - index is greater than the number of contiguous edges found by the function perform on the shapes added to this algorithm.

        Parameters
        ----------
        index: int

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_ContigousEdgeCouple(self, *args)

    def DegeneratedShape(self, *args):
        r"""
        Gives a degenerated shape.

        Parameters
        ----------
        index: int

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_DegeneratedShape(self, *args)

    def Dump(self, *args):
        r"""
        Dump properties of resulting shape.

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Dump(self, *args)

    def Init(self, *args):
        r"""
        Initializes this algorithm for identifying contiguous edges on shapes using the tolerance of contiguity tolerance. this tolerance value is used to determine whether two edges or sections of edges are coincident. use the function add to define the shapes to be checked. sets <option> to false.

        Parameters
        ----------
        tolerance: float
        option: bool

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Init(self, *args)

    def IsDegenerated(self, *args):
        r"""
        Indicates if a input shape is degenerated.

        Parameters
        ----------
        shape: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_IsDegenerated(self, *args)

    def IsModified(self, *args):
        r"""
        Returns true if the copy of the initial shape shape was modified by the function perform (i.e. if one or more of its edges was broken down into contiguous and non-contiguous sections). warning returns false if shape is not one of the initial shapes added to this algorithm.

        Parameters
        ----------
        shape: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_IsModified(self, *args)

    def Modified(self, *args):
        r"""
        Gives a modifieded shape raises nosuchobject if shape has not been modified.

        Parameters
        ----------
        shape: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Modified(self, *args)

    def NbContigousEdges(self, *args):
        r"""
        Returns the number of contiguous edges found by the function perform on the shapes added to this algorithm.

        Returns
        -------
        int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_NbContigousEdges(self, *args)

    def NbDegeneratedShapes(self, *args):
        r"""
        Gives the number of degenerated shapes.

        Returns
        -------
        int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_NbDegeneratedShapes(self, *args)

    def Perform(self, *args):
        r"""
        Finds coincident parts of edges of two or more shapes added to this algorithm and breaks down these edges into contiguous and non-contiguous sections on copies of the initial shapes. the function contigousedge returns contiguous edges. the function modified can be used to return modified copies of the initial shapes where one or more edges were broken down into contiguous and non-contiguous sections. warning this function must be used once all the shapes to be checked have been added. it is not possible to add further shapes subsequently and then to repeat the call to perform.

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_Perform(self, *args)

    def SectionToBoundary(self, *args):
        r"""
        Returns the edge on the initial shape, of which the modified copy contains the edge section. section is coincident with a contiguous edge found by the function perform. use the function contigousedgecouple to obtain a valid section. this information is useful for verification purposes, since it provides a means of determining the surface to which the contiguous edge belongs. exceptions standard_nosuchobject if section is not coincident with a contiguous edge. use the function contigousedgecouple to obtain a valid section.

        Parameters
        ----------
        section: TopoDS_Edge

        Returns
        -------
        TopoDS_Edge

        """
        return _BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_SectionToBoundary(self, *args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def NbEdges(self):
    	pass

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_FindContigousEdges

# Register BRepOffsetAPI_FindContigousEdges in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_FindContigousEdges_swigregister(BRepOffsetAPI_FindContigousEdges)

class BRepOffsetAPI_MakeDraft(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs the draft surface object defined by the shape shape, the direction dir, and the angle angle. shape must be a topods_wire, topo_ds_face or topods_shell with free boundaries. exceptions standard_notdone if shape is not a topods_wire, topo_ds_face or topods_shell with free boundaries.

        Parameters
        ----------
        Shape: TopoDS_Shape
        Dir: gp_Dir
        Angle: float

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeDraft(*args))

    def Generated(self, *args):
        r"""
        Returns the list of shapes generated from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_Generated(self, *args)

    def Perform(self, *args):
        r"""
        Performs the draft using the length lengthmax as the maximum length for the corner edge between two draft faces.

        Parameters
        ----------
        LengthMax: float

        Returns
        -------
        None
        Performs the draft up to the surface surface. if keepinsidesurface is true, the part of surface inside the draft is kept in the result.

        Parameters
        ----------
        Surface: Geom_Surface
        KeepInsideSurface: bool,optional
        	default value is Standard_True

        Returns
        -------
        None
        Performs the draft up to the shape stopshape. if keepoutside is true, the part of stopshape which is outside the draft is kept in the result.

        Parameters
        ----------
        StopShape: TopoDS_Shape
        KeepOutSide: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_Perform(self, *args)

    def SetDraft(self, *args):
        r"""
        Sets the direction of the draft for this object. if isinternal is true, the draft is internal to the argument shape used in the constructor.

        Parameters
        ----------
        IsInternal: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_SetDraft(self, *args)

    def SetOptions(self, *args):
        r"""
        Sets the options of this draft tool. if a transition has to be performed, it can be defined by the mode style as rightcorner or roundcorner, rightcorner being a corner defined by a sharp angle, and roundcorner being a rounded corner. anglemin is an angular tolerance used to detect whether a transition has to be performed or not. anglemax sets the maximum value within which a rightcorner transition can be performed. anglemin and anglemax are expressed in radians.

        Parameters
        ----------
        Style: BRepBuilderAPI_TransitionMode,optional
        	default value is BRepBuilderAPI_RightCorner
        AngleMin: float,optional
        	default value is 0.01
        AngleMax: float,optional
        	default value is 3.0

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_SetOptions(self, *args)

    def Shell(self, *args):
        r"""
        Returns the shell resulting from performance of the draft along the wire.

        Returns
        -------
        TopoDS_Shell

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeDraft_Shell(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakeDraft

# Register BRepOffsetAPI_MakeDraft in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakeDraft_swigregister(BRepOffsetAPI_MakeDraft)

class BRepOffsetAPI_MakeEvolved(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        None
        Constructs an evolved shape by sweeping the profile (theprofile) along the spine (thespine). thespine can be shape only of type wire or face. see description to this class for detailed information.

        Parameters
        ----------
        theSpine: TopoDS_Shape
        theProfile: TopoDS_Wire
        theJoinType: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        theIsAxeProf: bool,optional
        	default value is Standard_True
        theIsSolid: bool,optional
        	default value is Standard_False
        theIsProfOnSpine: bool,optional
        	default value is Standard_False
        theTol: float,optional
        	default value is 0.0000001
        theIsVolume: bool,optional
        	default value is Standard_False
        theRunInParallel: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeEvolved(*args))

    def Bottom(self, *args):
        r"""
        Return the face bottom if <solid> is true in the constructor.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Bottom(self, *args)

    def Build(self, *args):
        r"""
        Builds the resulting shape (redefined from makeshape).

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Build(self, *args)

    def Evolved(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        BRepFill_Evolved

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Evolved(self, *args)

    def GeneratedShapes(self, *args):
        r"""
        Returns the shapes created from a subshape <spineshape> of the spine and a subshape <profshape> on the profile.

        Parameters
        ----------
        SpineShape: TopoDS_Shape
        ProfShape: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_GeneratedShapes(self, *args)

    def Top(self, *args):
        r"""
        Return the face top if <solid> is true in the constructor.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_Top(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakeEvolved

# Register BRepOffsetAPI_MakeEvolved in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakeEvolved_swigregister(BRepOffsetAPI_MakeEvolved)

class BRepOffsetAPI_MakeFilling(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs a wire filling object defined by - the energy minimizing criterion degree - the number of points on the curve nbpntsoncur - the number of iterations nbiter - the boolean anisotropie - the 2d tolerance tol2d - the 3d tolerance tol3d - the angular tolerance tolang - the tolerance for curvature tolcur - the highest polynomial degree maxdeg - the greatest number of segments maxseg. if the boolean anistropie is true, the algorithm's performance is better in cases where the ratio of the length u and the length v indicate a great difference between the two. in other words, when the surface is, for example, extremely long.

        Parameters
        ----------
        Degree: int,optional
        	default value is 3
        NbPtsOnCur: int,optional
        	default value is 15
        NbIter: int,optional
        	default value is 2
        Anisotropie: bool,optional
        	default value is Standard_False
        Tol2d: float,optional
        	default value is 0.00001
        Tol3d: float,optional
        	default value is 0.0001
        TolAng: float,optional
        	default value is 0.01
        TolCurv: float,optional
        	default value is 0.1
        MaxDeg: int,optional
        	default value is 8
        MaxSegments: int,optional
        	default value is 9

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeFilling(*args))

    def Add(self, *args):
        r"""
        Adds a new constraint which also defines an edge of the wire of the face order: order of the constraint: geomabs_c0 : the surface has to pass by 3d representation of the edge geomabs_g1 : the surface has to pass by 3d representation of the edge and to respect tangency with the first face of the edge geomabs_g2 : the surface has to pass by 3d representation of the edge and to respect tangency and curvature with the first face of the edge. raises constructionerror if the edge has no representation on a face and order is geomabs_g1 or geomabs_g2.

        Parameters
        ----------
        Constr: TopoDS_Edge
        Order: GeomAbs_Shape
        IsBound: bool,optional
        	default value is Standard_True

        Returns
        -------
        int
        Adds a new constraint which also defines an edge of the wire of the face order: order of the constraint: geomabs_c0 : the surface has to pass by 3d representation of the edge geomabs_g1 : the surface has to pass by 3d representation of the edge and to respect tangency with the given face geomabs_g2 : the surface has to pass by 3d representation of the edge and to respect tangency and curvature with the given face. raises constructionerror if the edge has no 2d representation on the given face.

        Parameters
        ----------
        Constr: TopoDS_Edge
        Support: TopoDS_Face
        Order: GeomAbs_Shape
        IsBound: bool,optional
        	default value is Standard_True

        Returns
        -------
        int
        Adds a free constraint on a face. the corresponding edge has to be automatically recomputed. it is always a bound.

        Parameters
        ----------
        Support: TopoDS_Face
        Order: GeomAbs_Shape

        Returns
        -------
        int
        Adds a punctual constraint.

        Parameters
        ----------
        Point: gp_Pnt

        Returns
        -------
        int
        Adds a punctual constraint.

        Parameters
        ----------
        U: float
        V: float
        Support: TopoDS_Face
        Order: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_Add(self, *args)

    def Build(self, *args):
        r"""
        Builds the resulting faces.

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_Build(self, *args)

    def G0Error(self, *args):
        r"""
        Returns the maximum distance between the result and the constraints. this is set at construction time.

        Returns
        -------
        float
        Returns the maximum distance attained between the result and the constraint index. this is set at construction time.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G0Error(self, *args)

    def G1Error(self, *args):
        r"""
        Returns the maximum angle between the result and the constraints. this is set at construction time.

        Returns
        -------
        float
        Returns the maximum angle between the result and the constraints. this is set at construction time.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G1Error(self, *args)

    def G2Error(self, *args):
        r"""
        Returns the maximum angle between the result and the constraints. this is set at construction time.

        Returns
        -------
        float
        Returns the greatest difference in curvature found between the result and the constraint index.

        Parameters
        ----------
        Index: int

        Returns
        -------
        float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_G2Error(self, *args)

    def Generated(self, *args):
        r"""
        Returns the list of shapes generated from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_Generated(self, *args)

    def IsDone(self, *args):
        r"""
        Tests whether computation of the filling plate has been completed.

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_IsDone(self, *args)

    def LoadInitSurface(self, *args):
        r"""
        Loads the initial surface surf to begin the construction of the surface. this optional function is useful if the surface resulting from construction for the algorithm is likely to be complex. the support surface of the face under construction is computed by a deformation of surf which satisfies the given constraints. the set of bounding edges defines the wire of the face. if no initial surface is given, the algorithm computes it automatically. if the set of edges is not connected (free constraint), missing edges are automatically computed. important: the initial surface must have orthogonal local coordinates, i.e. partial derivatives ds/du and ds/dv must be orthogonal at each point of surface. if this condition breaks, distortions of resulting surface are possible.

        Parameters
        ----------
        Surf: TopoDS_Face

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_LoadInitSurface(self, *args)

    def SetApproxParam(self, *args):
        r"""
        Sets the parameters used to approximate the filling surface. these include: - maxdeg - the highest degree which the polynomial defining the filling surface can have - maxsegments - the greatest number of segments which the filling surface can have.

        Parameters
        ----------
        MaxDeg: int,optional
        	default value is 8
        MaxSegments: int,optional
        	default value is 9

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetApproxParam(self, *args)

    def SetConstrParam(self, *args):
        r"""
        Sets the values of tolerances used to control the constraint. tol2d: tol3d: it is the maximum distance allowed between the support surface and the constraints tolang: it is the maximum angle allowed between the normal of the surface and the constraints tolcurv: it is the maximum difference of curvature allowed between the surface and the constraint.

        Parameters
        ----------
        Tol2d: float,optional
        	default value is 0.00001
        Tol3d: float,optional
        	default value is 0.0001
        TolAng: float,optional
        	default value is 0.01
        TolCurv: float,optional
        	default value is 0.1

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetConstrParam(self, *args)

    def SetResolParam(self, *args):
        r"""
        Sets the parameters used for resolution. the default values of these parameters have been chosen for a good ratio quality/performance. degree: it is the order of energy criterion to minimize for computing the deformation of the surface. the default value is 3 the recommended value is i+2 where i is the maximum order of the constraints. nbptsoncur: it is the average number of points for discretisation of the edges. nbiter: it is the maximum number of iterations of the process. for each iteration the number of discretisation points is increased. anisotropie:.

        Parameters
        ----------
        Degree: int,optional
        	default value is 3
        NbPtsOnCur: int,optional
        	default value is 15
        NbIter: int,optional
        	default value is 2
        Anisotropie: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeFilling_SetResolParam(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakeFilling

# Register BRepOffsetAPI_MakeFilling in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakeFilling_swigregister(BRepOffsetAPI_MakeFilling)

class BRepOffsetAPI_MakeOffset(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an algorithm for creating an empty offset.

        Returns
        -------
        None
        Constructs an algorithm for creating an algorithm to build parallels to the spine spine.

        Parameters
        ----------
        Spine: TopoDS_Face
        Join: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        IsOpenResult: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Spine: TopoDS_Wire
        Join: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        IsOpenResult: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeOffset(*args))

    def AddWire(self, *args):
        r"""
        Initializes the algorithm to construct parallels to the wire spine.

        Parameters
        ----------
        Spine: TopoDS_Wire

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_AddWire(self, *args)

    def Build(self, *args):
        r"""
        Builds the resulting shape (redefined from makeshape).

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Build(self, *args)

    def Generated(self, *args):
        r"""
        Returns a list of the created shapes from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Generated(self, *args)

    def Init(self, *args):
        r"""
        Initializes the algorithm to construct parallels to the spine spine. join defines the type of parallel generated by the salient vertices of the spine. the default type is geomabs_arc where the vertices generate sections of a circle. if join type is geomabs_intersection, the edges that intersect in a salient vertex generate the edges prolonged until intersection.

        Parameters
        ----------
        Spine: TopoDS_Face
        Join: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        IsOpenResult: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        Initialize the evaluation of offsetting.

        Parameters
        ----------
        Join: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        IsOpenResult: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Init(self, *args)

    def Perform(self, *args):
        r"""
        Computes a parallel to the spine at distance offset and at an altitude alt from the plane of the spine in relation to the normal to the spine. exceptions: stdfail_notdone if the offset is not built.

        Parameters
        ----------
        Offset: float
        Alt: float,optional
        	default value is 0.0

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffset_Perform(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakeOffset

# Register BRepOffsetAPI_MakeOffset in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakeOffset_swigregister(BRepOffsetAPI_MakeOffset)

class BRepOffsetAPI_MakeOffsetShape(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructor does nothing.

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeOffsetShape(*args))

    def Build(self, *args):
        r"""
        Does nothing.

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_Build(self, *args)

    def Generated(self, *args):
        r"""
        Returns the list of shapes generated from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_Generated(self, *args)

    def GetJoinType(self, *args):
        r"""
        Returns offset join type.

        Returns
        -------
        GeomAbs_JoinType

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_GetJoinType(self, *args)

    def IsDeleted(self, *args):
        r"""
        Returns true if the shape has been removed from the result.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_IsDeleted(self, *args)

    def MakeOffset(self, *args):
        r"""
        Returns instance of the unrelying intersection / arc algorithm.

        Returns
        -------
        BRepOffset_MakeOffset

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_MakeOffset(self, *args)

    def Modified(self, *args):
        r"""
        Returns the list of shapes modified from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_Modified(self, *args)

    def PerformByJoin(self, *args):
        r"""
        Constructs a shape parallel to the shape s, where - s may be a face, a shell, a solid or a compound of these shape kinds; - offset is the offset value. the offset shape is constructed: - outside s, if offset is positive, - inside s, if offset is negative; - tol defines the coincidence tolerance criterion for generated shapes; - mode defines the construction type of parallels applied to the free edges of shape s; currently, only one construction type is implemented, namely the one where the free edges do not generate parallels; this corresponds to the default value brepoffset_skin; - intersection specifies how the algorithm must work in order to limit the parallels to two adjacent shapes: - if intersection is false (default value), the intersection is calculated with the parallels to the two adjacent shapes, - if intersection is true, the intersection is calculated by taking all generated parallels into account; this computation method is more general as it avoids some self-intersections generated in the offset shape from features of small dimensions on shape s, however this method has not been completely implemented and therefore is not recommended for use; - selfinter tells the algorithm whether a computation to eliminate self-intersections must be applied to the resulting shape; however, as this functionality is not yet implemented, it is recommended to use the default value (false); - join defines how to fill the holes that may appear between parallels to the two adjacent faces. it may take values geomabs_arc or geomabs_intersection: - if join is equal to geomabs_arc, then pipes are generated between two free edges of two adjacent parallels, and spheres are generated on 'images' of vertices; it is the default value, - if join is equal to geomabs_intersection, then the parallels to the two adjacent faces are enlarged and intersected, so that there are no free edges on parallels to faces. removeintedges flag defines whether to remove the internal edges from the result or not. warnings 1. all the faces of the shape s should be based on the surfaces with continuity at least c1. 2. the offset value should be sufficiently small to avoid self-intersections in resulting shape. otherwise these self-intersections may appear inside an offset face if its initial surface is not plane or sphere or cylinder, also some non-adjacent offset faces may intersect each other. also, some offset surfaces may 'turn inside out'. 3. the algorithm may fail if the shape s contains vertices where more than 3 edges converge. 4. since 3d-offset algorithm involves intersection of surfaces, it is under limitations of surface intersection algorithm. 5. a result cannot be generated if the underlying geometry of s is bspline with continuity c0. exceptions geom_undefinedderivative if the underlying geometry of s is bspline with continuity c0.

        Parameters
        ----------
        S: TopoDS_Shape
        Offset: float
        Tol: float
        Mode: BRepOffset_Mode,optional
        	default value is BRepOffset_Skin
        Intersection: bool,optional
        	default value is Standard_False
        SelfInter: bool,optional
        	default value is Standard_False
        Join: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        RemoveIntEdges: bool,optional
        	default value is Standard_False
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_PerformByJoin(self, *args)

    def PerformBySimple(self, *args):
        r"""
        Constructs offset shape for the given one using simple algorithm without intersections computation.

        Parameters
        ----------
        theS: TopoDS_Shape
        theOffsetValue: float

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_PerformBySimple(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakeOffsetShape

# Register BRepOffsetAPI_MakeOffsetShape in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakeOffsetShape_swigregister(BRepOffsetAPI_MakeOffsetShape)

class BRepOffsetAPI_MakePipe(OCC.Core.BRepPrimAPI.BRepPrimAPI_MakeSweep):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs a pipe by sweeping the shape profile along the wire spine.the angle made by the spine with the profile is maintained along the length of the pipe. warning spine must be g1 continuous; that is, on the connection vertex of two edges of the wire, the tangent vectors on the left and on the right must have the same direction, though not necessarily the same magnitude. exceptions standard_domainerror if the profile is a solid or a composite solid.

        Parameters
        ----------
        Spine: TopoDS_Wire
        Profile: TopoDS_Shape

        Returns
        -------
        None
        The same as previous but with setting of mode of sweep and the flag that indicates attempt to approximate a c1-continuous surface if a swept surface proved to be c0.

        Parameters
        ----------
        Spine: TopoDS_Wire
        Profile: TopoDS_Shape
        aMode: GeomFill_Trihedron
        ForceApproxC1: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakePipe_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakePipe(*args))

    def Build(self, *args):
        r"""
        Builds the resulting shape (redefined from makeshape).

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_Build(self, *args)

    def ErrorOnSurface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_ErrorOnSurface(self, *args)

    def FirstShape(self, *args):
        r"""
        Returns the topods shape of the bottom of the prism.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_FirstShape(self, *args)

    def Generated(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape
        No available documentation.

        Parameters
        ----------
        SSpine: TopoDS_Shape
        SProfile: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_Generated(self, *args)

    def LastShape(self, *args):
        r"""
        Returns the topods shape of the top of the prism.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_LastShape(self, *args)

    def Pipe(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        BRepFill_Pipe

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipe_Pipe(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakePipe

# Register BRepOffsetAPI_MakePipe in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakePipe_swigregister(BRepOffsetAPI_MakePipe)

class BRepOffsetAPI_MakePipeShell(OCC.Core.BRepPrimAPI.BRepPrimAPI_MakeSweep):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs the shell-generating framework defined by the wire spine. sets an sweep's mode if no mode are set, the mode use in makepipe is used.

        Parameters
        ----------
        Spine: TopoDS_Wire

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakePipeShell(*args))

    def Add(self, *args):
        r"""
        Adds the section profile to this framework. first and last sections may be punctual, so the shape profile may be both wire and vertex. correspondent point on spine is computed automatically. if withcontact is true, the section is translated to be in contact with the spine. if withcorrection is true, the section is rotated to be orthogonal to the spine?s tangent in the correspondent point. this option has no sense if the section is punctual (profile is of type topods_vertex).

        Parameters
        ----------
        Profile: TopoDS_Shape
        WithContact: bool,optional
        	default value is Standard_False
        WithCorrection: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        Adds the section profile to this framework. correspondent point on the spine is given by location. warning: to be effective, it is not recommended to combine methods add and setlaw.

        Parameters
        ----------
        Profile: TopoDS_Shape
        Location: TopoDS_Vertex
        WithContact: bool,optional
        	default value is Standard_False
        WithCorrection: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Add(self, *args)

    def Build(self, *args):
        r"""
        Builds the resulting shape (redefined from makeshape).

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Build(self, *args)

    def Delete(self, *args):
        r"""
        Removes the section profile from this framework.

        Parameters
        ----------
        Profile: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Delete(self, *args)

    def ErrorOnSurface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_ErrorOnSurface(self, *args)

    def FirstShape(self, *args):
        r"""
        Returns the topods shape of the bottom of the sweep.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_FirstShape(self, *args)

    def Generated(self, *args):
        r"""
        Returns a list of new shapes generated from the shape s by the shell-generating algorithm. this function is redefined from brepoffsetapi_makeshape::generated. s can be an edge or a vertex of a given profile (see methods add).

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Generated(self, *args)

    def GetStatus(self, *args):
        r"""
        Get a status, when simulate or build failed. it can be brepbuilderapi_pipedone, brepbuilderapi_pipenotdone, brepbuilderapi_planenotintersectguide, brepbuilderapi_impossiblecontact.

        Returns
        -------
        BRepBuilderAPI_PipeError

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_GetStatus(self, *args)

    def IsReady(self, *args):
        r"""
        Returns true if this tool object is ready to build the shape, i.e. has a definition for the wire section profile.

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_IsReady(self, *args)

    def LastShape(self, *args):
        r"""
        Returns the topods shape of the top of the sweep.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_LastShape(self, *args)

    def MakeSolid(self, *args):
        r"""
        Transforms the sweeping shell in solid. if a propfile is not closed returns false.

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_MakeSolid(self, *args)

    def Profiles(self, *args):
        r"""
        Returns the list of original profiles.

        Parameters
        ----------
        theProfiles: TopTools_ListOfShape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Profiles(self, *args)

    def SetDiscreteMode(self, *args):
        r"""
        Sets a discrete trihedron to perform the sweeping.

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetDiscreteMode(self, *args)

    def SetForceApproxC1(self, *args):
        r"""
        Set the flag that indicates attempt to approximate a c1-continuous surface if a swept surface proved to be c0.

        Parameters
        ----------
        ForceApproxC1: bool

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetForceApproxC1(self, *args)

    def SetLaw(self, *args):
        r"""
        Sets the evolution law defined by the wire profile with its position (location, withcontact, withcorrection are the same options as in methods add) and a homotetic law defined by the function l. warning: to be effective, it is not recommended to combine methods add and setlaw.

        Parameters
        ----------
        Profile: TopoDS_Shape
        L: Law_Function
        WithContact: bool,optional
        	default value is Standard_False
        WithCorrection: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        Sets the evolution law defined by the wire profile with its position (location, withcontact, withcorrection are the same options as in methods add) and a homotetic law defined by the function l. warning: to be effective, it is not recommended to combine methods add and setlaw.

        Parameters
        ----------
        Profile: TopoDS_Shape
        L: Law_Function
        Location: TopoDS_Vertex
        WithContact: bool,optional
        	default value is Standard_False
        WithCorrection: bool,optional
        	default value is Standard_False

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetLaw(self, *args)

    def SetMaxDegree(self, *args):
        r"""
        Define the maximum v degree of resulting surface.

        Parameters
        ----------
        NewMaxDegree: int

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetMaxDegree(self, *args)

    def SetMaxSegments(self, *args):
        r"""
        Define the maximum number of spans in v-direction on resulting surface.

        Parameters
        ----------
        NewMaxSegments: int

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetMaxSegments(self, *args)

    def SetMode(self, *args):
        r"""
        Sets a frenet or a correctedfrenet trihedron to perform the sweeping if isfrenet is false, a corrected frenet trihedron is used.

        Parameters
        ----------
        IsFrenet: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        Sets a fixed trihedron to perform the sweeping all sections will be parallel.

        Parameters
        ----------
        Axe: gp_Ax2

        Returns
        -------
        None
        Sets a fixed binormal direction to perform the -- sweeping. angular relations between the section(s) and <binormal> will be constant.

        Parameters
        ----------
        BiNormal: gp_Dir

        Returns
        -------
        None
        Sets support to the spine to define the binormal of the trihedron, like the normal to the surfaces. warning: to be effective, each edge of the <spine> must have a representation on one face of<spinesupport>.

        Parameters
        ----------
        SpineSupport: TopoDS_Shape

        Returns
        -------
        bool
        Sets an auxiliary spine to define the normal for each point of the spine p, an point q is evalued on <auxiliaryspine> if <curvilinearequivalence> q split <auxiliaryspine> with the same length ratio than p split <spline>. else the plan define by p and the tangent to the <spine> intersect <auxiliaryspine> in q. if <keepcontact> equals brepfill_nocontact: the normal is defined by the vector pq. if <keepcontact> equals brepfill_contact: the normal is defined to achieve that the sweeped section is in contact to the auxiliaryspine. the width of section is constant all along the path. in other words, the auxiliary spine lies on the swept surface, but not necessarily is a boundary of this surface. however, the auxiliary spine has to be close enough to the main spine to provide intersection with any section all along the path. if <keepcontact> equals brepfill_contactonborder: the auxiliary spine becomes a boundary of the swept surface and the width of section varies along the path. give section to sweep. possibilities are : - give one or sevral section - give one profile and an homotetic law. - automatic compute of correspondence between spine, and section on the sweeped shape - correspondence between spine, and section on the sweeped shape defined by a vertex of the spine.

        Parameters
        ----------
        AuxiliarySpine: TopoDS_Wire
        CurvilinearEquivalence: bool
        KeepContact: BRepFill_TypeOfContact,optional
        	default value is BRepFill_NoContact

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetMode(self, *args)

    def SetTolerance(self, *args):
        r"""
        Sets the following tolerance values - 3d tolerance tol3d - boundary tolerance boundtol - angular tolerance tolangular.

        Parameters
        ----------
        Tol3d: float,optional
        	default value is 1.0e-4
        BoundTol: float,optional
        	default value is 1.0e-4
        TolAngular: float,optional
        	default value is 1.0e-2

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetTolerance(self, *args)

    def SetTransitionMode(self, *args):
        r"""
        Sets the transition mode to manage discontinuities on the swept shape caused by fractures on the spine. the transition mode can be brepbuilderapi_transformed (default value), brepbuilderapi_rightcorner, brepbuilderapi_roundcorner: -  repbuilderapi_transformed: discontinuities are treated by modification of the sweeping mode. the pipe is 'transformed' at the fractures of the spine. this mode assumes building a self-intersected shell. -  brepbuilderapi_rightcorner: discontinuities are treated like right corner. two pieces of the pipe corresponding to two adjacent segments of the spine are extended and intersected at a fracture of the spine. -  brepbuilderapi_roundcorner: discontinuities are treated like round corner. the corner is treated as rotation of the profile around an axis which passes through the point of the spine's fracture. this axis is based on cross product of directions tangent to the adjacent segments of the spine at their common point. warnings the mode brepbuilderapi_rightcorner provides a valid result if intersection of two pieces of the pipe (corresponding to two adjacent segments of the spine) in the neighborhood of the spine?s fracture is connected and planar. this condition can be violated if the spine is non-linear in some neighborhood of the fracture or if the profile was set with a scaling law. the last mode, brepbuilderapi_roundcorner, will assuredly provide a good result only if a profile was set with option withcorrection = true, i.e. it is strictly orthogonal to the spine.

        Parameters
        ----------
        Mode: BRepBuilderAPI_TransitionMode,optional
        	default value is BRepBuilderAPI_Transformed

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_SetTransitionMode(self, *args)

    def Simulate(self, *args):
        r"""
        Simulates the resulting shape by calculating its cross-sections. the spine is divided by this cross-sections into (numberofsection - 1) equal parts, the number of cross-sections is numberofsection. the cross-sections are wires and they are returned in the list result. this gives a rapid preview of the resulting shape, which will be obtained using the settings you have provided. raises notdone if <self> it is not ready.

        Parameters
        ----------
        NumberOfSection: int
        Result: TopTools_ListOfShape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Simulate(self, *args)

    def Spine(self, *args):
        r"""
        Returns the spine.

        Returns
        -------
        TopoDS_Wire

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_Spine(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakePipeShell

# Register BRepOffsetAPI_MakePipeShell in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakePipeShell_swigregister(BRepOffsetAPI_MakePipeShell)

class BRepOffsetAPI_MiddlePath(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        General constructor. startshape and endshape may be a wire or a face.

        Parameters
        ----------
        aShape: TopoDS_Shape
        StartShape: TopoDS_Shape
        EndShape: TopoDS_Shape

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MiddlePath_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MiddlePath(*args))

    def Build(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MiddlePath_Build(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MiddlePath

# Register BRepOffsetAPI_MiddlePath in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MiddlePath_swigregister(BRepOffsetAPI_MiddlePath)

class BRepOffsetAPI_NormalProjection(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructs an empty framework to define projection on a shape according to the normal from each point to be projected to the shape.

        Returns
        -------
        None
        Constructs a framework to define projection onto the basis shape s according to the normal from each point to be projected from the shape added to this framework by add. default parameters of the algorithm: tol3d = 1.e-04, tol2d =sqr(tol3d) , internalcontinuity = geomabs_c2, maxdegree = 14, maxseg = 16.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_NormalProjection(*args))

    def Add(self, *args):
        r"""
        Adds the shape toproj to the framework for calculation of the projection by compute3d. toproj is an edge or a wire and will be projected onto the basis shape. exceptions standard_constructionerror if toproj is not added.

        Parameters
        ----------
        ToProj: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Add(self, *args)

    def Ancestor(self, *args):
        r"""
        Returns the initial edge corresponding to the edge e resulting from the computation of the projection. exceptions stdfail_notdone if no edge was found. standard_nosuchobject if an edge corresponding to e has already been found.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Ancestor(self, *args)

    def Build(self, *args):
        r"""
        Builds the result of the projection as a compound of wires. tries to build oriented wires.

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Build(self, *args)

    def BuildWire(self, *args):
        r"""
        Build the result as a list of wire if possible in -- a first returns a wire only if there is only a wire.

        Parameters
        ----------
        Liste: TopTools_ListOfShape

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_BuildWire(self, *args)

    def Compute3d(self, *args):
        r"""
        Returns true if a 3d curve is computed. if not, false is returned and an initial 3d curve is kept to build the resulting edges.

        Parameters
        ----------
        With3d: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Compute3d(self, *args)

    def Couple(self, *args):
        r"""
        Returns the initial face corresponding to the projected edge e. exceptions stdfail_notdone if no face was found. standard_nosuchobject if a face corresponding to e has already been found.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Couple(self, *args)

    def Generated(self, *args):
        r"""
        Returns the list of shapes generated from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Generated(self, *args)

    def Init(self, *args):
        r"""
        Initializes the empty constructor framework with the shape s.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Init(self, *args)

    def IsDone(self, *args):
        r"""
        Returns true if the object was correctly built by the shape construction algorithm. if at the construction time of the shape, the algorithm cannot be completed, or the original data is corrupted, isdone returns false and therefore protects the use of functions to access the result of the construction (typically the shape function).

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_IsDone(self, *args)

    def Projection(self, *args):
        r"""
        Performs the projection. the construction of the result is performed by build. exceptions stdfail_notdone if the projection was not performed.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_Projection(self, *args)

    def SetLimit(self, *args):
        r"""
        Manage limitation of projected edges.

        Parameters
        ----------
        FaceBoundaries: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetLimit(self, *args)

    def SetMaxDistance(self, *args):
        r"""
        Sets the maximum distance between target shape and shape to project. if this condition is not satisfied then corresponding part of solution is discarded. if maxdist < 0 then this method does not affect the algorithm.

        Parameters
        ----------
        MaxDist: float

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetMaxDistance(self, *args)

    def SetParams(self, *args):
        r"""
        Sets the parameters used for computation tol3 is the required tolerance between the 3d projected curve and its 2d representation internalcontinuity is the order of constraints used for approximation maxdeg and maxseg are the maximum degree and the maximum number of segment for bspline resulting of an approximation.

        Parameters
        ----------
        Tol3D: float
        Tol2D: float
        InternalContinuity: GeomAbs_Shape
        MaxDegree: int
        MaxSeg: int

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_NormalProjection_SetParams(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_NormalProjection

# Register BRepOffsetAPI_NormalProjection in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_NormalProjection_swigregister(BRepOffsetAPI_NormalProjection)

class BRepOffsetAPI_ThruSections(OCC.Core.BRepBuilderAPI.BRepBuilderAPI_MakeShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Initializes an algorithm for building a shell or a solid passing through a set of sections, where: - issolid is set to true if the construction algorithm is required to build a solid or to false if it is required to build a shell (the default value), - ruled is set to true if the faces generated between the edges of two consecutive wires are ruled surfaces or to false (the default value) if they are smoothed out by approximation, - pres3d defines the precision criterion used by the approximation algorithm; the default value is 1.0e-6. use addwire and addvertex to define the successive sections of the shell or solid to be built.

        Parameters
        ----------
        isSolid: bool,optional
        	default value is Standard_False
        ruled: bool,optional
        	default value is Standard_False
        pres3d: float,optional
        	default value is 1.0e-06

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_ThruSections_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_ThruSections(*args))

    def AddVertex(self, *args):
        r"""
        Adds the vertex vertex (punctual section) to the set of sections through which the shell or solid is built. a vertex may be added to the set of sections only as first or last section. at least one wire must be added to the set of sections by the method addwire. use the build function to construct the shape.

        Parameters
        ----------
        aVertex: TopoDS_Vertex

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_AddVertex(self, *args)

    def AddWire(self, *args):
        r"""
        Adds the wire wire to the set of sections through which the shell or solid is built. use the build function to construct the shape.

        Parameters
        ----------
        wire: TopoDS_Wire

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_AddWire(self, *args)

    def Build(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_Build(self, *args)

    def CheckCompatibility(self, *args):
        r"""
        Sets/unsets the option to compute origin and orientation on wires to avoid twisted results and update wires to have same number of edges.

        Parameters
        ----------
        check: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_CheckCompatibility(self, *args)

    def Continuity(self, *args):
        r"""
        Returns the continuity used in the approximation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_Continuity(self, *args)

    def CriteriumWeight(self, *args):
        r"""
        Returns the weights associed to the criterium used in the optimization.

        Parameters
        ----------

        Returns
        -------
        W1: float
        W2: float
        W3: float

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_CriteriumWeight(self, *args)

    def FirstShape(self, *args):
        r"""
        Returns the topods shape of the bottom of the loft if solid.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_FirstShape(self, *args)

    def Generated(self, *args):
        r"""
        Returns a list of new shapes generated from the shape s by the shell-generating algorithm. this function is redefined from brepbuilderapi_makeshape::generated. s can be an edge or a vertex of a given profile (see methods addwire and addvertex).

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_Generated(self, *args)

    def GeneratedFace(self, *args):
        r"""
        If ruled returns the face generated by each edge except the last wire if smoothed returns the face generated by each edge of the first wire.

        Parameters
        ----------
        Edge: TopoDS_Shape

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_GeneratedFace(self, *args)

    def Init(self, *args):
        r"""
        Initializes this algorithm for building a shell or a solid passing through a set of sections, where: - issolid is set to true if this construction algorithm is required to build a solid or to false if it is required to build a shell. false is the default value; - ruled is set to true if the faces generated between the edges of two consecutive wires are ruled surfaces or to false (the default value) if they are smoothed out by approximation, - pres3d defines the precision criterion used by the approximation algorithm; the default value is 1.0e-6. use addwire and addvertex to define the successive sections of the shell or solid to be built.

        Parameters
        ----------
        isSolid: bool,optional
        	default value is Standard_False
        ruled: bool,optional
        	default value is Standard_False
        pres3d: float,optional
        	default value is 1.0e-06

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_Init(self, *args)

    def LastShape(self, *args):
        r"""
        Returns the topods shape of the top of the loft if solid.

        Returns
        -------
        TopoDS_Shape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_LastShape(self, *args)

    def MaxDegree(self, *args):
        r"""
        Returns the maximal u degree of result surface.

        Returns
        -------
        int

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_MaxDegree(self, *args)

    def ParType(self, *args):
        r"""
        Returns the type of parametrization used in the approximation.

        Returns
        -------
        Approx_ParametrizationType

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_ParType(self, *args)

    def SetContinuity(self, *args):
        r"""
        Define the continuity used in the approximation.

        Parameters
        ----------
        C: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetContinuity(self, *args)

    def SetCriteriumWeight(self, *args):
        r"""
        Define the weights associed to the criterium used in the optimization. //! if wi <= 0.

        Parameters
        ----------
        W1: float
        W2: float
        W3: float

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetCriteriumWeight(self, *args)

    def SetMaxDegree(self, *args):
        r"""
        Define the maximal u degree of result surface.

        Parameters
        ----------
        MaxDeg: int

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetMaxDegree(self, *args)

    def SetParType(self, *args):
        r"""
        Define the type of parametrization used in the approximation.

        Parameters
        ----------
        ParType: Approx_ParametrizationType

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetParType(self, *args)

    def SetSmoothing(self, *args):
        r"""
        Define the approximation algorithm.

        Parameters
        ----------
        UseSmoothing: bool

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_SetSmoothing(self, *args)

    def UseSmoothing(self, *args):
        r"""
        Define the approximation algorithm.

        Returns
        -------
        bool

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_UseSmoothing(self, *args)

    def Wires(self, *args):
        r"""
        Returns the list of original wires.

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_ThruSections_Wires(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_ThruSections

# Register BRepOffsetAPI_ThruSections in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_ThruSections_swigregister(BRepOffsetAPI_ThruSections)

class BRepOffsetAPI_MakeThickSolid(BRepOffsetAPI_MakeOffsetShape):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Constructor does nothing.

        Returns
        -------
        None

        """
        _BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_swiginit(self, _BRepOffsetAPI.new_BRepOffsetAPI_MakeThickSolid(*args))

    def Build(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_Build(self, *args)

    def MakeThickSolidByJoin(self, *args):
        r"""
        Constructs a hollowed solid from the solid s by removing the set of faces closingfaces from s, where: offset defines the thickness of the walls. its sign indicates which side of the surface of the solid the hollowed shape is built on; - tol defines the tolerance criterion for coincidence in generated shapes; - mode defines the construction type of parallels applied to free edges of shape s. currently, only one construction type is implemented, namely the one where the free edges do not generate parallels; this corresponds to the default value brepoffset_skin; intersection specifies how the algorithm must work in order to limit the parallels to two adjacent shapes: - if intersection is false (default value), the intersection is calculated with the parallels to the two adjacent shapes, - if intersection is true, the intersection is calculated by taking account of all parallels generated; this computation method is more general as it avoids self-intersections generated in the offset shape from features of small dimensions on shape s, however this method has not been completely implemented and therefore is not recommended for use; - selfinter tells the algorithm whether a computation to eliminate self-intersections needs to be applied to the resulting shape. however, as this functionality is not yet implemented, you should use the default value (false); - join defines how to fill the holes that may appear between parallels to the two adjacent faces. it may take values geomabs_arc or geomabs_intersection: - if join is equal to geomabs_arc, then pipes are generated between two free edges of two adjacent parallels, and spheres are generated on 'images' of vertices; it is the default value, - if join is equal to geomabs_intersection, then the parallels to the two adjacent faces are enlarged and intersected, so that there are no free edges on parallels to faces. removeintedges flag defines whether to remove the internal edges from the result or not. warnings since the algorithm of makethicksolid is based on makeoffsetshape algorithm, the warnings are the same as for makeoffsetshape.

        Parameters
        ----------
        S: TopoDS_Shape
        ClosingFaces: TopTools_ListOfShape
        Offset: float
        Tol: float
        Mode: BRepOffset_Mode,optional
        	default value is BRepOffset_Skin
        Intersection: bool,optional
        	default value is Standard_False
        SelfInter: bool,optional
        	default value is Standard_False
        Join: GeomAbs_JoinType,optional
        	default value is GeomAbs_Arc
        RemoveIntEdges: bool,optional
        	default value is Standard_False
        theRange: Message_ProgressRange,optional
        	default value is Message_ProgressRange()

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_MakeThickSolidByJoin(self, *args)

    def MakeThickSolidBySimple(self, *args):
        r"""
        Constructs solid using simple algorithm. according to its nature it is not possible to set list of the closing faces. this algorithm does not support faces removing. it is caused by fact that intersections are not computed during offset creation. non-closed shell or face is expected as input.

        Parameters
        ----------
        theS: TopoDS_Shape
        theOffsetValue: float

        Returns
        -------
        None

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_MakeThickSolidBySimple(self, *args)

    def Modified(self, *args):
        r"""
        Returns the list of shapes modified from the shape <s>.

        Parameters
        ----------
        S: TopoDS_Shape

        Returns
        -------
        TopTools_ListOfShape

        """
        return _BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_Modified(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BRepOffsetAPI.delete_BRepOffsetAPI_MakeThickSolid

# Register BRepOffsetAPI_MakeThickSolid in _BRepOffsetAPI:
_BRepOffsetAPI.BRepOffsetAPI_MakeThickSolid_swigregister(BRepOffsetAPI_MakeThickSolid)


BRepOffsetAPI_Sewing=OCC.Core.BRepBuilderAPI.BRepBuilderAPI_Sewing



