# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BlendFunc module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_blendfunc.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BlendFunc
else:
    import _BlendFunc

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BlendFunc.delete_SwigPyIterator

    def value(self):
        return _BlendFunc.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BlendFunc.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BlendFunc.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BlendFunc.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BlendFunc.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BlendFunc.SwigPyIterator_copy(self)

    def next(self):
        return _BlendFunc.SwigPyIterator_next(self)

    def __next__(self):
        return _BlendFunc.SwigPyIterator___next__(self)

    def previous(self):
        return _BlendFunc.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BlendFunc.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BlendFunc.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BlendFunc.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BlendFunc.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BlendFunc.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BlendFunc.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BlendFunc.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BlendFunc:
_BlendFunc.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BlendFunc.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.Convert
import OCC.Core.Blend
import OCC.Core.Law

from enum import IntEnum
from OCC.Core.Exception import *

BlendFunc_Rational = _BlendFunc.BlendFunc_Rational
BlendFunc_QuasiAngular = _BlendFunc.BlendFunc_QuasiAngular
BlendFunc_Polynomial = _BlendFunc.BlendFunc_Polynomial
BlendFunc_Linear = _BlendFunc.BlendFunc_Linear


class BlendFunc_SectionShape(IntEnum):
	BlendFunc_Rational = 0
	BlendFunc_QuasiAngular = 1
	BlendFunc_Polynomial = 2
	BlendFunc_Linear = 3
BlendFunc_Rational = BlendFunc_SectionShape.BlendFunc_Rational
BlendFunc_QuasiAngular = BlendFunc_SectionShape.BlendFunc_QuasiAngular
BlendFunc_Polynomial = BlendFunc_SectionShape.BlendFunc_Polynomial
BlendFunc_Linear = BlendFunc_SectionShape.BlendFunc_Linear

class blendfunc(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    @staticmethod
    def ComputeDNormal(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        Surf: Adaptor3d_Surface
        p2d: gp_Pnt2d
        Normal: gp_Vec
        DNu: gp_Vec
        DNv: gp_Vec

        Returns
        -------
        bool

        """
        return _BlendFunc.blendfunc_ComputeDNormal(*args)

    @staticmethod
    def ComputeNormal(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        Surf: Adaptor3d_Surface
        p2d: gp_Pnt2d
        Normal: gp_Vec

        Returns
        -------
        bool

        """
        return _BlendFunc.blendfunc_ComputeNormal(*args)

    @staticmethod
    def GetMinimalWeights(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        SectShape: BlendFunc_SectionShape
        TConv: Convert_ParameterisationType
        AngleMin: float
        AngleMax: float
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.blendfunc_GetMinimalWeights(*args)

    @staticmethod
    def GetShape(*args):
        r"""
        No available documentation.

        Parameters
        ----------
        SectShape: BlendFunc_SectionShape
        MaxAng: float
        TypeConv: Convert_ParameterisationType

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int

        """
        return _BlendFunc.blendfunc_GetShape(*args)

    @staticmethod
    def NextShape(*args):
        r"""
        Used to obtain the next level of continuity.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        GeomAbs_Shape

        """
        return _BlendFunc.blendfunc_NextShape(*args)

    __repr__ = _dumps_object

    @methodnotwrapped
    def Mults(self):
    	pass

    @methodnotwrapped
    def Knots(self):
    	pass


    def __init__(self):
        _BlendFunc.blendfunc_swiginit(self, _BlendFunc.new_blendfunc())
    __swig_destroy__ = _BlendFunc.delete_blendfunc

# Register blendfunc in _BlendFunc:
_BlendFunc.blendfunc_swigregister(blendfunc)

def blendfunc_ComputeDNormal(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    Surf: Adaptor3d_Surface
    p2d: gp_Pnt2d
    Normal: gp_Vec
    DNu: gp_Vec
    DNv: gp_Vec

    Returns
    -------
    bool

    """
    return _BlendFunc.blendfunc_ComputeDNormal(*args)

def blendfunc_ComputeNormal(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    Surf: Adaptor3d_Surface
    p2d: gp_Pnt2d
    Normal: gp_Vec

    Returns
    -------
    bool

    """
    return _BlendFunc.blendfunc_ComputeNormal(*args)

def blendfunc_GetMinimalWeights(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    SectShape: BlendFunc_SectionShape
    TConv: Convert_ParameterisationType
    AngleMin: float
    AngleMax: float
    Weigths: TColStd_Array1OfReal

    Returns
    -------
    None

    """
    return _BlendFunc.blendfunc_GetMinimalWeights(*args)

def blendfunc_GetShape(*args):
    r"""
    No available documentation.

    Parameters
    ----------
    SectShape: BlendFunc_SectionShape
    MaxAng: float
    TypeConv: Convert_ParameterisationType

    Returns
    -------
    NbPoles: int
    NbKnots: int
    Degree: int

    """
    return _BlendFunc.blendfunc_GetShape(*args)

def blendfunc_NextShape(*args):
    r"""
    Used to obtain the next level of continuity.

    Parameters
    ----------
    S: GeomAbs_Shape

    Returns
    -------
    GeomAbs_Shape

    """
    return _BlendFunc.blendfunc_NextShape(*args)

class BlendFunc_CSCircular(OCC.Core.Blend.Blend_CSFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates a function for a circular blending between a curve <c> and a surface <s>. the direction of the planes are given by <cguide>. the position of the plane is determined on the curve <c>. <l> defines the change of parameter between <c> and <cguide>. so, the planes are defined as described below : t is the current parameter on the guide line. pguide = c(l(t)); nguide = cguide'(t)/||cguide'(t)||.

        Parameters
        ----------
        S: Adaptor3d_Surface
        C: Adaptor3d_Curve
        CGuide: Adaptor3d_Curve
        L: Law_Function

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_CSCircular_swiginit(self, _BlendFunc.new_BlendFunc_CSCircular(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_GetBounds(self, *args)

    def GetMinimalWeight(self, *args):
        r"""
        Compute the minimal value of weight for each poles of all sections.

        Parameters
        ----------
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_GetMinimalWeight(self, *args)

    def GetSection(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        tabP: TColgp_Array1OfPnt
        tabV: TColgp_Array1OfVec

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_GetSection(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_CSCircular_GetSectionSize(self, *args)

    def GetShape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int
        NbPoles2d: int

        """
        return _BlendFunc.BlendFunc_CSCircular_GetShape(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None
        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_GetTolerance(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals() raises outofrange from standard.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Intervals(self, *args)

    def IsRational(self, *args):
        r"""
        Returns if the section is rationnal.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_IsRational(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_IsTangencyPoint(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Knots(self, *args)

    def Mults(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Mults(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function (3).

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_CSCircular_NbEquations(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_CSCircular_NbIntervals(self, *args)

    def NbVariables(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_CSCircular_NbVariables(self, *args)

    def ParameterOnC(self, *args):
        r"""
        Returns parameter of the point on the curve.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_CSCircular_ParameterOnC(self, *args)

    def Pnt2d(self, *args):
        r"""
        Returns u,v coordinates of the point on the surface.

        Returns
        -------
        gp_Pnt2d

        """
        return _BlendFunc.BlendFunc_CSCircular_Pnt2d(self, *args)

    def PointOnC(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_CSCircular_PointOnC(self, *args)

    def PointOnS(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_CSCircular_PointOnS(self, *args)

    def Resolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IC2d: int
        Tol: float

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _BlendFunc.BlendFunc_CSCircular_Resolution(self, *args)

    def Section(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float
        Used for the first and last section the method returns standard_true if the derivatives are computed, otherwise it returns standard_false.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Section(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Radius: float
        Choix: int

        Returns
        -------
        None
        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surface) at these points.

        Parameters
        ----------
        U: float
        V: float
        TgS: gp_Vec
        NormS: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSCircular_Tangent(self, *args)

    def Tangent2d(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_CSCircular_Tangent2d(self, *args)

    def TangentOnC(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_CSCircular_TangentOnC(self, *args)

    def TangentOnS(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_CSCircular_TangentOnS(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSCircular_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_CSCircular

# Register BlendFunc_CSCircular in _BlendFunc:
_BlendFunc.BlendFunc_CSCircular_swigregister(BlendFunc_CSCircular)

class BlendFunc_CSConstRad(OCC.Core.Blend.Blend_CSFunction):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_Surface
        C: Adaptor3d_Curve
        CGuide: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_CSConstRad_swiginit(self, _BlendFunc.new_BlendFunc_CSConstRad(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetBounds(self, *args)

    def GetMinimalWeight(self, *args):
        r"""
        Compute the minimal value of weight for each poles of all sections.

        Parameters
        ----------
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetMinimalWeight(self, *args)

    def GetSection(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        tabP: TColgp_Array1OfPnt
        tabV: TColgp_Array1OfVec

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetSection(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetSectionSize(self, *args)

    def GetShape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int
        NbPoles2d: int

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetShape(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None
        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_GetTolerance(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals() raises outofrange from standard.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Intervals(self, *args)

    def IsRational(self, *args):
        r"""
        Returns if the section is rationnal.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_IsRational(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_IsTangencyPoint(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Knots(self, *args)

    def Mults(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Mults(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function (3).

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_CSConstRad_NbEquations(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_CSConstRad_NbIntervals(self, *args)

    def ParameterOnC(self, *args):
        r"""
        Returns parameter of the point on the curve.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_CSConstRad_ParameterOnC(self, *args)

    def Pnt2d(self, *args):
        r"""
        Returns u,v coordinates of the point on the surface.

        Returns
        -------
        gp_Pnt2d

        """
        return _BlendFunc.BlendFunc_CSConstRad_Pnt2d(self, *args)

    def PointOnC(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_CSConstRad_PointOnC(self, *args)

    def PointOnS(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_CSConstRad_PointOnS(self, *args)

    def Resolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IC2d: int
        Tol: float

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _BlendFunc.BlendFunc_CSConstRad_Resolution(self, *args)

    def Section(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float
        U: float
        V: float
        W: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float
        Used for the first and last section the method returns standard_true if the derivatives are computed, otherwise it returns standard_false.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Section(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Radius: float
        Choix: int

        Returns
        -------
        None
        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surface) at these points.

        Parameters
        ----------
        U: float
        V: float
        TgS: gp_Vec
        NormS: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_CSConstRad_Tangent(self, *args)

    def Tangent2d(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_CSConstRad_Tangent2d(self, *args)

    def TangentOnC(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_CSConstRad_TangentOnC(self, *args)

    def TangentOnS(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_CSConstRad_TangentOnS(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_CSConstRad_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_CSConstRad

# Register BlendFunc_CSConstRad in _BlendFunc:
_BlendFunc.BlendFunc_CSConstRad_swigregister(BlendFunc_CSConstRad)

class BlendFunc_ChAsym(OCC.Core.Blend.Blend_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ChAsym_swiginit(self, _BlendFunc.new_BlendFunc_ChAsym(*args))

    def ComputeValues(self, *args):
        r"""
        Computes the values <f> of the derivatives for the variable <x> between degf and degl. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        DegF: int
        DegL: int

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_ComputeValues(self, *args)

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_GetBounds(self, *args)

    def GetMinimalDistance(self, *args):
        r"""
        Returns the minimal distance between two extremities of calculated sections.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_ChAsym_GetMinimalDistance(self, *args)

    def GetMinimalWeight(self, *args):
        r"""
        Compute the minimal value of weight for each poles of all sections.

        Parameters
        ----------
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_GetMinimalWeight(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_ChAsym_GetSectionSize(self, *args)

    def GetShape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int
        NbPoles2d: int

        """
        return _BlendFunc.BlendFunc_ChAsym_GetShape(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None
        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_GetTolerance(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_Intervals(self, *args)

    def IsRational(self, *args):
        r"""
        Returns if the section is rationnal.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_IsRational(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_IsTangencyPoint(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_Knots(self, *args)

    def Mults(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_Mults(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_ChAsym_NbEquations(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_ChAsym_NbIntervals(self, *args)

    def PointOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_ChAsym_PointOnS1(self, *args)

    def PointOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_ChAsym_PointOnS2(self, *args)

    def Resolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IC2d: int
        Tol: float

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _BlendFunc.BlendFunc_ChAsym_Resolution(self, *args)

    def Section(self, *args):
        r"""
        Utile pour une visu rapide et approximative de la surface.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Lin

        Returns
        -------
        Pdeb: float
        Pfin: float
        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_Section(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None
        Sets the distances and the angle.

        Parameters
        ----------
        Dist1: float
        Angle: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surfaces) at these points.

        Parameters
        ----------
        U1: float
        V1: float
        U2: float
        V2: float
        TgFirst: gp_Vec
        TgLast: gp_Vec
        NormFirst: gp_Vec
        NormLast: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsym_Tangent(self, *args)

    def Tangent2dOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ChAsym_Tangent2dOnS1(self, *args)

    def Tangent2dOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ChAsym_Tangent2dOnS2(self, *args)

    def TangentOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ChAsym_TangentOnS1(self, *args)

    def TangentOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ChAsym_TangentOnS2(self, *args)

    def TwistOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_TwistOnS1(self, *args)

    def TwistOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_TwistOnS2(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsym_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChAsym

# Register BlendFunc_ChAsym in _BlendFunc:
_BlendFunc.BlendFunc_ChAsym_swigregister(BlendFunc_ChAsym)

class BlendFunc_ChAsymInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ChAsymInv_swiginit(self, _BlendFunc.new_BlendFunc_ChAsymInv(*args))

    def ComputeValues(self, *args):
        r"""
        Computes the values <f> of the derivatives for the variable <x> between degf and degl. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        DegF: int
        DegL: int

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsymInv_ComputeValues(self, *args)

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsymInv_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsymInv_GetBounds(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsymInv_GetTolerance(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsymInv_IsSolution(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_ChAsymInv_NbEquations(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_Curve2d

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Dist1: float
        Angle: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChAsymInv_Set(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsymInv_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChAsymInv_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChAsymInv

# Register BlendFunc_ChAsymInv in _BlendFunc:
_BlendFunc.BlendFunc_ChAsymInv_swigregister(BlendFunc_ChAsymInv)

class BlendFunc_ConstRad(OCC.Core.Blend.Blend_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ConstRad_swiginit(self, _BlendFunc.new_BlendFunc_ConstRad(*args))

    def AxeRot(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Prm: float

        Returns
        -------
        gp_Ax1

        """
        return _BlendFunc.BlendFunc_ConstRad_AxeRot(self, *args)

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_GetBounds(self, *args)

    def GetMinimalDistance(self, *args):
        r"""
        Returns the minimal distance between two extremities of calculated sections.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_ConstRad_GetMinimalDistance(self, *args)

    def GetMinimalWeight(self, *args):
        r"""
        Compute the minimal value of weight for each poles of all sections.

        Parameters
        ----------
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_GetMinimalWeight(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_ConstRad_GetSectionSize(self, *args)

    def GetShape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int
        NbPoles2d: int

        """
        return _BlendFunc.BlendFunc_ConstRad_GetShape(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None
        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_GetTolerance(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Intervals(self, *args)

    def IsRational(self, *args):
        r"""
        Returns if the section is rationnal.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_IsRational(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_IsTangencyPoint(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Knots(self, *args)

    def Mults(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Mults(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_ConstRad_NbEquations(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_ConstRad_NbIntervals(self, *args)

    def PointOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_ConstRad_PointOnS1(self, *args)

    def PointOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_ConstRad_PointOnS2(self, *args)

    def Resolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IC2d: int
        Tol: float

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _BlendFunc.BlendFunc_ConstRad_Resolution(self, *args)

    def Section(self, *args):
        r"""
        Utile pour une visu rapide et approximative de la surface.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Section(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None
        Inits the value of radius, and the 'quadrant'.

        Parameters
        ----------
        Radius: float
        Choix: int

        Returns
        -------
        None
        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surfaces) at these points.

        Parameters
        ----------
        U1: float
        V1: float
        U2: float
        V2: float
        TgFirst: gp_Vec
        TgLast: gp_Vec
        NormFirst: gp_Vec
        NormLast: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRad_Tangent(self, *args)

    def Tangent2dOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ConstRad_Tangent2dOnS1(self, *args)

    def Tangent2dOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ConstRad_Tangent2dOnS2(self, *args)

    def TangentOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ConstRad_TangentOnS1(self, *args)

    def TangentOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ConstRad_TangentOnS2(self, *args)

    def TwistOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_TwistOnS1(self, *args)

    def TwistOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_TwistOnS2(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRad_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstRad

# Register BlendFunc_ConstRad in _BlendFunc:
_BlendFunc.BlendFunc_ConstRad_swigregister(BlendFunc_ConstRad)

class BlendFunc_ConstRadInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ConstRadInv_swiginit(self, _BlendFunc.new_BlendFunc_ConstRadInv(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRadInv_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRadInv_GetBounds(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRadInv_GetTolerance(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRadInv_IsSolution(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_ConstRadInv_NbEquations(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_Curve2d

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        R: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstRadInv_Set(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRadInv_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstRadInv_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstRadInv

# Register BlendFunc_ConstRadInv in _BlendFunc:
_BlendFunc.BlendFunc_ConstRadInv_swigregister(BlendFunc_ConstRadInv)

class BlendFunc_Corde(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S: Adaptor3d_Surface
        CGuide: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_Corde_swiginit(self, _BlendFunc.new_BlendFunc_Corde(*args))

    def DerFguide(self, *args):
        r"""
        Derived of the function compared to the parameter of the guideline.

        Parameters
        ----------
        Sol: math_Vector
        DerF: gp_Vec2d

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Corde_DerFguide(self, *args)

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_Derivatives(self, *args)

    def IsSolution(self, *args):
        r"""
        Returns false if sol is not solution else returns true and updates the fields tgs and tg2d.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        Returns true when it is not possible to compute the tangent vectors at pointons.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_IsTangencyPoint(self, *args)

    def NPlan(self, *args):
        r"""
        Returns the normal to cguide at ptgui.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Corde_NPlan(self, *args)

    def PointOnGuide(self, *args):
        r"""
        Returns the point of parameter <param> on cguide.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Corde_PointOnGuide(self, *args)

    def PointOnS(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Corde_PointOnS(self, *args)

    def SetDist(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Dist: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Corde_SetDist(self, *args)

    def SetParam(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Corde_SetParam(self, *args)

    def Tangent2dOnS(self, *args):
        r"""
        Returns the tangent vector at pointons, in the parametric space of the first surface.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_Corde_Tangent2dOnS(self, *args)

    def TangentOnS(self, *args):
        r"""
        Returns the tangent vector at pointons, in 3d space.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Corde_TangentOnS(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the function for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Corde_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Corde

# Register BlendFunc_Corde in _BlendFunc:
_BlendFunc.BlendFunc_Corde_swigregister(BlendFunc_Corde)

class BlendFunc_EvolRad(OCC.Core.Blend.Blend_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve
        Law: Law_Function

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_EvolRad_swiginit(self, _BlendFunc.new_BlendFunc_EvolRad(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_GetBounds(self, *args)

    def GetMinimalDistance(self, *args):
        r"""
        Returns the minimal distance between two extremities of calculated sections.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_EvolRad_GetMinimalDistance(self, *args)

    def GetMinimalWeight(self, *args):
        r"""
        Compute the minimal value of weight for each poles of all sections.

        Parameters
        ----------
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_GetMinimalWeight(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_EvolRad_GetSectionSize(self, *args)

    def GetShape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int
        NbPoles2d: int

        """
        return _BlendFunc.BlendFunc_EvolRad_GetShape(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None
        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_GetTolerance(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Intervals(self, *args)

    def IsRational(self, *args):
        r"""
        Returns if the section is rationnal.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_IsRational(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_IsTangencyPoint(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Knots(self, *args)

    def Mults(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Mults(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_EvolRad_NbEquations(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_EvolRad_NbIntervals(self, *args)

    def PointOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_EvolRad_PointOnS1(self, *args)

    def PointOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_EvolRad_PointOnS2(self, *args)

    def Resolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IC2d: int
        Tol: float

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _BlendFunc.BlendFunc_EvolRad_Resolution(self, *args)

    def Section(self, *args):
        r"""
        Method for graphic traces.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Circ

        Returns
        -------
        Pdeb: float
        Pfin: float
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Section(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Choix: int

        Returns
        -------
        None
        Sets the type of section generation for the approximations.

        Parameters
        ----------
        TypeSection: BlendFunc_SectionShape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surfaces) at these points.

        Parameters
        ----------
        U1: float
        V1: float
        U2: float
        V2: float
        TgFirst: gp_Vec
        TgLast: gp_Vec
        NormFirst: gp_Vec
        NormLast: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRad_Tangent(self, *args)

    def Tangent2dOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_EvolRad_Tangent2dOnS1(self, *args)

    def Tangent2dOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_EvolRad_Tangent2dOnS2(self, *args)

    def TangentOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_EvolRad_TangentOnS1(self, *args)

    def TangentOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_EvolRad_TangentOnS2(self, *args)

    def TwistOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_TwistOnS1(self, *args)

    def TwistOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_TwistOnS2(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRad_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_EvolRad

# Register BlendFunc_EvolRad in _BlendFunc:
_BlendFunc.BlendFunc_EvolRad_swigregister(BlendFunc_EvolRad)

class BlendFunc_EvolRadInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve
        Law: Law_Function

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_EvolRadInv_swiginit(self, _BlendFunc.new_BlendFunc_EvolRadInv(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRadInv_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRadInv_GetBounds(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRadInv_GetTolerance(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRadInv_IsSolution(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_EvolRadInv_NbEquations(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_Curve2d

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_EvolRadInv_Set(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRadInv_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_EvolRadInv_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_EvolRadInv

# Register BlendFunc_EvolRadInv in _BlendFunc:
_BlendFunc.BlendFunc_EvolRadInv_swigregister(BlendFunc_EvolRadInv)

class BlendFunc_GenChamfInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfInv_GetBounds(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfInv_GetTolerance(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_GenChamfInv_NbEquations(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_Curve2d

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        Dist1: float
        Dist2: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfInv_Set(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_GenChamfInv_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_GenChamfInv

# Register BlendFunc_GenChamfInv in _BlendFunc:
_BlendFunc.BlendFunc_GenChamfInv_swigregister(BlendFunc_GenChamfInv)

class BlendFunc_GenChamfer(OCC.Core.Blend.Blend_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined")
    __repr__ = _swig_repr

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_GetBounds(self, *args)

    def GetMinimalDistance(self, *args):
        r"""
        Returns the minimal distance between two extremities of calculated sections.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_GenChamfer_GetMinimalDistance(self, *args)

    def GetMinimalWeight(self, *args):
        r"""
        Compute the minimal value of weight for each poles of all sections.

        Parameters
        ----------
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_GetMinimalWeight(self, *args)

    def GetShape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int
        NbPoles2d: int

        """
        return _BlendFunc.BlendFunc_GenChamfer_GetShape(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None
        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_GetTolerance(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals() raises outofrange from standard.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_Intervals(self, *args)

    def IsRational(self, *args):
        r"""
        Returns false.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_GenChamfer_IsRational(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_Knots(self, *args)

    def Mults(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_Mults(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_GenChamfer_NbEquations(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_GenChamfer_NbIntervals(self, *args)

    def Resolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IC2d: int
        Tol: float

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _BlendFunc.BlendFunc_GenChamfer_Resolution(self, *args)

    def Section(self, *args):
        r"""
        Obsolete method.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        C: gp_Lin

        Returns
        -------
        Pdeb: float
        Pfin: float
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_Section(self, *args)

    def Set(self, *args):
        r"""
        Sets the value of the parameter along the guide line. this determines the plane in which the solution has to be found.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        Sets the bounds of the parametric interval on the guide line. this determines the derivatives in these values if the function is not cn.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None
        Sets the distances and the 'quadrant'.

        Parameters
        ----------
        Dist1: float
        Dist2: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_GenChamfer_Set(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_GenChamfer_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_GenChamfer

# Register BlendFunc_GenChamfer in _BlendFunc:
_BlendFunc.BlendFunc_GenChamfer_swigregister(BlendFunc_GenChamfer)

class BlendFunc_Ruled(OCC.Core.Blend.Blend_Function):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_Ruled_swiginit(self, _BlendFunc.new_BlendFunc_Ruled(*args))

    def AxeRot(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Prm: float

        Returns
        -------
        gp_Ax1

        """
        return _BlendFunc.BlendFunc_Ruled_AxeRot(self, *args)

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_GetBounds(self, *args)

    def GetMinimalDistance(self, *args):
        r"""
        Returns the minimal distance between two extremities of calculated sections.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_Ruled_GetMinimalDistance(self, *args)

    def GetMinimalWeight(self, *args):
        r"""
        Compute the minimal value of weight for each poles of all sections.

        Parameters
        ----------
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_GetMinimalWeight(self, *args)

    def GetSection(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float
        U1: float
        V1: float
        U2: float
        V2: float
        tabP: TColgp_Array1OfPnt
        tabV: TColgp_Array1OfVec

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_GetSection(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_Ruled_GetSectionSize(self, *args)

    def GetShape(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------

        Returns
        -------
        NbPoles: int
        NbKnots: int
        Degree: int
        NbPoles2d: int

        """
        return _BlendFunc.BlendFunc_Ruled_GetShape(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None
        Returns the tolerance to reach in approximation to respecte boundtol error at the boundary angletol tangent error at the boundary surftol error inside the surface.

        Parameters
        ----------
        BoundTol: float
        SurfTol: float
        AngleTol: float
        Tol3d: math_Vector
        Tol1D: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_GetTolerance(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals() raises outofrange from standard.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Intervals(self, *args)

    def IsRational(self, *args):
        r"""
        Returns false.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_IsRational(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_IsTangencyPoint(self, *args)

    def Knots(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TKnots: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Knots(self, *args)

    def Mults(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        TMults: TColStd_Array1OfInteger

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Mults(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_Ruled_NbEquations(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_Ruled_NbIntervals(self, *args)

    def PointOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Ruled_PointOnS1(self, *args)

    def PointOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Ruled_PointOnS2(self, *args)

    def Resolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        IC2d: int
        Tol: float

        Returns
        -------
        TolU: float
        TolV: float

        """
        return _BlendFunc.BlendFunc_Ruled_Resolution(self, *args)

    def Section(self, *args):
        r"""
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        D2Poles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        D2Poles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal
        D2Weigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        Used for the first and last section.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        DPoles: TColgp_Array1OfVec
        Poles2d: TColgp_Array1OfPnt2d
        DPoles2d: TColgp_Array1OfVec2d
        Weigths: TColStd_Array1OfReal
        DWeigths: TColStd_Array1OfReal

        Returns
        -------
        bool
        No available documentation.

        Parameters
        ----------
        P: Blend_Point
        Poles: TColgp_Array1OfPnt
        Poles2d: TColgp_Array1OfPnt2d
        Weigths: TColStd_Array1OfReal

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Section(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        First: float
        Last: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surfaces) at these points.

        Parameters
        ----------
        U1: float
        V1: float
        U2: float
        V2: float
        TgFirst: gp_Vec
        TgLast: gp_Vec
        NormFirst: gp_Vec
        NormLast: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Ruled_Tangent(self, *args)

    def Tangent2dOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_Ruled_Tangent2dOnS1(self, *args)

    def Tangent2dOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_Ruled_Tangent2dOnS2(self, *args)

    def TangentOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Ruled_TangentOnS1(self, *args)

    def TangentOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Ruled_TangentOnS2(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Ruled_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Ruled

# Register BlendFunc_Ruled in _BlendFunc:
_BlendFunc.BlendFunc_Ruled_swigregister(BlendFunc_Ruled)

class BlendFunc_RuledInv(OCC.Core.Blend.Blend_FuncInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_RuledInv_swiginit(self, _BlendFunc.new_BlendFunc_RuledInv(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_RuledInv_Derivatives(self, *args)

    def GetBounds(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        InfBound: math_Vector
        SupBound: math_Vector

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_RuledInv_GetBounds(self, *args)

    def GetTolerance(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Tolerance: math_Vector
        Tol: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_RuledInv_GetTolerance(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_RuledInv_IsSolution(self, *args)

    def NbEquations(self, *args):
        r"""
        Returns the number of equations of the function.

        Returns
        -------
        int

        """
        return _BlendFunc.BlendFunc_RuledInv_NbEquations(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        OnFirst: bool
        COnSurf: Adaptor2d_Curve2d

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_RuledInv_Set(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_RuledInv_Value(self, *args)

    def Values(self, *args):
        r"""
        Returns the values <f> of the functions and the derivatives <d> for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_RuledInv_Values(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_RuledInv

# Register BlendFunc_RuledInv in _BlendFunc:
_BlendFunc.BlendFunc_RuledInv_swigregister(BlendFunc_RuledInv)

class BlendFunc_Tensor(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        NbRow: int
        NbCol: int
        NbMat: int

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_Tensor_swiginit(self, _BlendFunc.new_BlendFunc_Tensor(*args))

    def GetChangeValue(self, Row, Col, Mat):
        r"""GetChangeValue(BlendFunc_Tensor self, Standard_Integer const Row, Standard_Integer const Col, Standard_Integer const Mat) -> Standard_Real"""
        return _BlendFunc.BlendFunc_Tensor_GetChangeValue(self, Row, Col, Mat)

    def SetChangeValue(self, Row, Col, Mat, value):
        r"""SetChangeValue(BlendFunc_Tensor self, Standard_Integer const Row, Standard_Integer const Col, Standard_Integer const Mat, Standard_Real value)"""
        return _BlendFunc.BlendFunc_Tensor_SetChangeValue(self, Row, Col, Mat, value)

    def Init(self, *args):
        r"""
        Initialize all the elements of a tensor to initialvalue.

        Parameters
        ----------
        InitialValue: float

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Tensor_Init(self, *args)

    def Multiply(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Right: math_Vector
        Product: math_Matrix

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Tensor_Multiply(self, *args)

    def Value(self, *args):
        r"""
        Accesses (in read or write mode) the value of index <row>, <col> and <mat> of a tensor. an exception is raised if <row>, <col> or <mat> are not in the correct range.

        Parameters
        ----------
        Row: int
        Col: int
        Mat: int

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_Tensor_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Tensor

# Register BlendFunc_Tensor in _BlendFunc:
_BlendFunc.BlendFunc_Tensor_swigregister(BlendFunc_Tensor)

class BlendFunc_ChamfInv(BlendFunc_GenChamfInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ChamfInv_swiginit(self, _BlendFunc.new_BlendFunc_ChamfInv(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChamfInv_Derivatives(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChamfInv_IsSolution(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Dist1: float
        Dist2: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ChamfInv_Set(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ChamfInv_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ChamfInv

# Register BlendFunc_ChamfInv in _BlendFunc:
_BlendFunc.BlendFunc_ChamfInv_swigregister(BlendFunc_ChamfInv)

class BlendFunc_Chamfer(BlendFunc_GenChamfer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        CG: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_Chamfer_swiginit(self, _BlendFunc.new_BlendFunc_Chamfer(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Chamfer_Derivatives(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_Chamfer_GetSectionSize(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Chamfer_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Chamfer_IsTangencyPoint(self, *args)

    def PointOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Chamfer_PointOnS1(self, *args)

    def PointOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_Chamfer_PointOnS2(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        Sets the distances and the 'quadrant'.

        Parameters
        ----------
        Dist1: float
        Dist2: float
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Chamfer_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surfaces) at these points.

        Parameters
        ----------
        U1: float
        V1: float
        U2: float
        V2: float
        TgFirst: gp_Vec
        TgLast: gp_Vec
        NormFirst: gp_Vec
        NormLast: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_Chamfer_Tangent(self, *args)

    def Tangent2dOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_Chamfer_Tangent2dOnS1(self, *args)

    def Tangent2dOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_Chamfer_Tangent2dOnS2(self, *args)

    def TangentOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Chamfer_TangentOnS1(self, *args)

    def TangentOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_Chamfer_TangentOnS2(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_Chamfer_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_Chamfer

# Register BlendFunc_Chamfer in _BlendFunc:
_BlendFunc.BlendFunc_Chamfer_swigregister(BlendFunc_Chamfer)

class BlendFunc_ConstThroat(BlendFunc_GenChamfer):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ConstThroat_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroat(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroat_Derivatives(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_ConstThroat_GetSectionSize(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroat_IsSolution(self, *args)

    def IsTangencyPoint(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroat_IsTangencyPoint(self, *args)

    def PointOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_ConstThroat_PointOnS1(self, *args)

    def PointOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pnt

        """
        return _BlendFunc.BlendFunc_ConstThroat_PointOnS2(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Param: float

        Returns
        -------
        None
        Sets the throat and the 'quadrant'.

        Parameters
        ----------
        aThroat: float
        Standard_Real: 
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstThroat_Set(self, *args)

    def Tangent(self, *args):
        r"""
        Returns the tangent vector at the section, at the beginning and the end of the section, and returns the normal (of the surfaces) at these points.

        Parameters
        ----------
        U1: float
        V1: float
        U2: float
        V2: float
        TgFirst: gp_Vec
        TgLast: gp_Vec
        NormFirst: gp_Vec
        NormLast: gp_Vec

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstThroat_Tangent(self, *args)

    def Tangent2dOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ConstThroat_Tangent2dOnS1(self, *args)

    def Tangent2dOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ConstThroat_Tangent2dOnS2(self, *args)

    def TangentOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ConstThroat_TangentOnS1(self, *args)

    def TangentOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ConstThroat_TangentOnS2(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroat_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroat

# Register BlendFunc_ConstThroat in _BlendFunc:
_BlendFunc.BlendFunc_ConstThroat_swigregister(BlendFunc_ConstThroat)

class BlendFunc_ConstThroatInv(BlendFunc_GenChamfInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ConstThroatInv_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroatInv(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatInv_Derivatives(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatInv_IsSolution(self, *args)

    def Set(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        theThroat: float
        Standard_Real: 
        Choix: int

        Returns
        -------
        None

        """
        return _BlendFunc.BlendFunc_ConstThroatInv_Set(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatInv_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatInv

# Register BlendFunc_ConstThroatInv in _BlendFunc:
_BlendFunc.BlendFunc_ConstThroatInv_swigregister(BlendFunc_ConstThroatInv)

class BlendFunc_ConstThroatWithPenetration(BlendFunc_ConstThroat):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ConstThroatWithPenetration_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroatWithPenetration(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_Derivatives(self, *args)

    def GetSectionSize(self, *args):
        r"""
        Returns the length of the maximum section.

        Returns
        -------
        float

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_GetSectionSize(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_IsSolution(self, *args)

    def Tangent2dOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_Tangent2dOnS1(self, *args)

    def Tangent2dOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec2d

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_Tangent2dOnS2(self, *args)

    def TangentOnS1(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_TangentOnS1(self, *args)

    def TangentOnS2(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Vec

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_TangentOnS2(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetration_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatWithPenetration

# Register BlendFunc_ConstThroatWithPenetration in _BlendFunc:
_BlendFunc.BlendFunc_ConstThroatWithPenetration_swigregister(BlendFunc_ConstThroatWithPenetration)

class BlendFunc_ConstThroatWithPenetrationInv(BlendFunc_ConstThroatInv):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        S1: Adaptor3d_Surface
        S2: Adaptor3d_Surface
        C: Adaptor3d_Curve

        Returns
        -------
        None

        """
        _BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_swiginit(self, _BlendFunc.new_BlendFunc_ConstThroatWithPenetrationInv(*args))

    def Derivatives(self, *args):
        r"""
        Returns the values <d> of the derivatives for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        D: math_Matrix

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_Derivatives(self, *args)

    def IsSolution(self, *args):
        r"""
        No available documentation.

        Parameters
        ----------
        Sol: math_Vector
        Tol: float

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_IsSolution(self, *args)

    def Value(self, *args):
        r"""
        Computes the values <f> of the functions for the variable <x>. returns true if the computation was done successfully, false otherwise.

        Parameters
        ----------
        X: math_Vector
        F: math_Vector

        Returns
        -------
        bool

        """
        return _BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_Value(self, *args)

    __repr__ = _dumps_object

    __swig_destroy__ = _BlendFunc.delete_BlendFunc_ConstThroatWithPenetrationInv

# Register BlendFunc_ConstThroatWithPenetrationInv in _BlendFunc:
_BlendFunc.BlendFunc_ConstThroatWithPenetrationInv_swigregister(BlendFunc_ConstThroatWithPenetrationInv)




@deprecated
def blendfunc_ComputeDNormal(*args):
	return blendfunc.ComputeDNormal(*args)

@deprecated
def blendfunc_ComputeNormal(*args):
	return blendfunc.ComputeNormal(*args)

@deprecated
def blendfunc_GetMinimalWeights(*args):
	return blendfunc.GetMinimalWeights(*args)

@deprecated
def blendfunc_GetShape(*args):
	return blendfunc.GetShape(*args)

@deprecated
def blendfunc_NextShape(*args):
	return blendfunc.NextShape(*args)




