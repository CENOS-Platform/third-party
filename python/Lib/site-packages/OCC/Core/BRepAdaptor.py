# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

"""
BRepAdaptor module, see official documentation at
https://www.opencascade.com/doc/occt-7.6.0/refman/html/package_brepadaptor.html
"""

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _BRepAdaptor
else:
    import _BRepAdaptor

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _BRepAdaptor.delete_SwigPyIterator

    def value(self):
        return _BRepAdaptor.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _BRepAdaptor.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _BRepAdaptor.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _BRepAdaptor.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _BRepAdaptor.SwigPyIterator_equal(self, x)

    def copy(self):
        return _BRepAdaptor.SwigPyIterator_copy(self)

    def next(self):
        return _BRepAdaptor.SwigPyIterator_next(self)

    def __next__(self):
        return _BRepAdaptor.SwigPyIterator___next__(self)

    def previous(self):
        return _BRepAdaptor.SwigPyIterator_previous(self)

    def advance(self, n):
        return _BRepAdaptor.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _BRepAdaptor.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _BRepAdaptor.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _BRepAdaptor.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _BRepAdaptor.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _BRepAdaptor.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _BRepAdaptor.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _BRepAdaptor:
_BRepAdaptor.SwigPyIterator_swigregister(SwigPyIterator)


def _dumps_object(klass):
    """ Overwrite default string output for any wrapped object.
    By default, __repr__ method returns something like:
    <OCC.Core.TopoDS.TopoDS_Shape; proxy of <Swig Object of type 'TopoDS_Shape *' at 0x02BB0758> >
    This is too much verbose.
    We prefer :
    <class 'gp_Pnt'>
    or
    <class 'TopoDS_Shape'>
    """
    klass_name = str(klass.__class__).split(".")[3].split("'")[0]
    repr_string = "<class '" + klass_name + "'"
# for TopoDS_Shape, we also look for the base type
    if klass_name == "TopoDS_Shape":
        if klass.IsNull():
            repr_string += ": Null>"
            return repr_string
        st = klass.ShapeType()
        types = {OCC.Core.TopAbs.TopAbs_VERTEX: "Vertex",
                 OCC.Core.TopAbs.TopAbs_SOLID: "Solid",
                 OCC.Core.TopAbs.TopAbs_EDGE: "Edge",
                 OCC.Core.TopAbs.TopAbs_FACE: "Face",
                 OCC.Core.TopAbs.TopAbs_SHELL: "Shell",
                 OCC.Core.TopAbs.TopAbs_WIRE: "Wire",
                 OCC.Core.TopAbs.TopAbs_COMPOUND: "Compound",
                 OCC.Core.TopAbs.TopAbs_COMPSOLID: "Compsolid"}
        repr_string += "; Type:%s" % types[st]        
    elif hasattr(klass, "IsNull"):
        if klass.IsNull():
            repr_string += "; Null"
    repr_string += ">"
    return repr_string


def process_exception(error, method_name, class_name):
    return _BRepAdaptor.process_exception(error, method_name, class_name)

from six import with_metaclass
import warnings
from OCC.Wrapper.wrapper_utils import Proxy, deprecated

import OCC.Core.Standard
import OCC.Core.NCollection
import OCC.Core.Adaptor3d
import OCC.Core.Geom
import OCC.Core.gp
import OCC.Core.TColStd
import OCC.Core.TCollection
import OCC.Core.GeomAbs
import OCC.Core.TColgp
import OCC.Core.TopAbs
import OCC.Core.Adaptor2d
import OCC.Core.Geom2d
import OCC.Core.math
import OCC.Core.Message
import OCC.Core.OSD
import OCC.Core.TopoDS
import OCC.Core.TopLoc
import OCC.Core.GeomAdaptor
import OCC.Core.Geom2dAdaptor

from enum import IntEnum
from OCC.Core.Exception import *




def Handle_BRepAdaptor_CompCurve_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_CompCurve_Create()

def Handle_BRepAdaptor_CompCurve_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_CompCurve_DownCast(t)

def Handle_BRepAdaptor_CompCurve_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_CompCurve_IsNull(t)

def Handle_BRepAdaptor_Curve_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_Curve_Create()

def Handle_BRepAdaptor_Curve_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve_DownCast(t)

def Handle_BRepAdaptor_Curve_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve_IsNull(t)

def Handle_BRepAdaptor_Curve2d_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_Curve2d_Create()

def Handle_BRepAdaptor_Curve2d_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve2d_DownCast(t)

def Handle_BRepAdaptor_Curve2d_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Curve2d_IsNull(t)

def Handle_BRepAdaptor_Surface_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_Surface_Create()

def Handle_BRepAdaptor_Surface_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Surface_DownCast(t)

def Handle_BRepAdaptor_Surface_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_Surface_IsNull(t)

def Handle_BRepAdaptor_HArray1OfCurve_Create():
    return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_Create()

def Handle_BRepAdaptor_HArray1OfCurve_DownCast(t):
    return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_DownCast(t)

def Handle_BRepAdaptor_HArray1OfCurve_IsNull(t):
    return _BRepAdaptor.Handle_BRepAdaptor_HArray1OfCurve_IsNull(t)
class BRepAdaptor_Array1OfCurve(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def begin(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_begin(self)

    def end(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_end(self)

    def cbegin(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_cbegin(self)

    def cend(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_cend(self)

    def __init__(self, *args):
        _BRepAdaptor.BRepAdaptor_Array1OfCurve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Array1OfCurve(*args))

    def Init(self, theValue):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Init(self, theValue)

    def Size(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Size(self)

    def Length(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Length(self)

    def IsEmpty(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_IsEmpty(self)

    def Lower(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Lower(self)

    def Upper(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Upper(self)

    def IsDeletable(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_IsDeletable(self)

    def IsAllocated(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_IsAllocated(self)

    def Assign(self, theOther):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Assign(self, theOther)

    def Move(self, theOther):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Move(self, theOther)

    def Set(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Set(self, *args)

    def First(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_First(self)

    def ChangeFirst(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_ChangeFirst(self)

    def Last(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Last(self)

    def ChangeLast(self):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_ChangeLast(self)

    def Value(self, theIndex):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Value(self, theIndex)

    def ChangeValue(self, theIndex):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_ChangeValue(self, theIndex)

    def __call__(self, *args):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve___call__(self, *args)

    def SetValue(self, theIndex, theItem):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_SetValue(self, theIndex, theItem)

    def Resize(self, theLower, theUpper, theToCopyData):
        return _BRepAdaptor.BRepAdaptor_Array1OfCurve_Resize(self, theLower, theUpper, theToCopyData)
    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Array1OfCurve

    def __getitem__(self, index):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            return self.Value(index + self.Lower())

    def __setitem__(self, index, value):
        if index + self.Lower() > self.Upper():
            raise IndexError("index out of range")
        else:
            self.SetValue(index + self.Lower(), value)

    def __len__(self):
        return self.Length()

    def __iter__(self):
        self.low = self.Lower()
        self.up = self.Upper()
        self.current = self.Lower() - 1
        return self

    def next(self):
        if self.current >= self.Upper():
            raise StopIteration
        else:
            self.current += 1
        return self.Value(self.current)

    __next__ = next


# Register BRepAdaptor_Array1OfCurve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Array1OfCurve_swigregister(BRepAdaptor_Array1OfCurve)

class BRepAdaptor_CompCurve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an undefined curve with no wire loaded.

        Returns
        -------
        None
        No available documentation.

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool,optional
        	default value is Standard_False

        Returns
        -------
        None
        Creates a curve to access the geometry of edge <w>.

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool
        First: float
        Last: float
        Tol: float

        Returns
        -------
        None

        """
        _BRepAdaptor.BRepAdaptor_CompCurve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_CompCurve(*args))

    def BSpline(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_BSpline(self, *args)

    def Bezier(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Bezier(self, *args)

    def Circle(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Circle(self, *args)

    def Continuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Continuity(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameter u.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_D3(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_DN(self, *args)

    def Degree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Degree(self, *args)

    def Edge(self, *args):
        r"""
        Returns an edge and one parameter on them corresponding to the parameter u.

        Parameters
        ----------
        U: float
        E: TopoDS_Edge

        Returns
        -------
        UonE: float

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Edge(self, *args)

    def Ellipse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Elips

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Ellipse(self, *args)

    def FirstParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_FirstParameter(self, *args)

    def GetType(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Hypr

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Hyperbola(self, *args)

    def Initialize(self, *args):
        r"""
        Sets the wire <w>.

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool

        Returns
        -------
        None
        Sets wire <w> and trimmed parameter.

        Parameters
        ----------
        W: TopoDS_Wire
        KnotByCurvilinearAbcissa: bool
        First: float
        Last: float
        Tol: float

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Initialize(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Intervals(self, *args)

    def IsClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_IsClosed(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_IsRational(self, *args)

    def LastParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_LastParameter(self, *args)

    def Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Line(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_NbIntervals(self, *args)

    def NbKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_NbPoles(self, *args)

    def Parabola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Parab

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Parabola(self, *args)

    def Period(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Period(self, *args)

    def Resolution(self, *args):
        r"""
        Returns the parametric resolution.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Resolution(self, *args)

    def Trim(self, *args):
        r"""
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Trim(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Value(self, *args)

    def Wire(self, *args):
        r"""
        Returns the wire.

        Returns
        -------
        TopoDS_Wire

        """
        return _BRepAdaptor.BRepAdaptor_CompCurve_Wire(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_CompCurve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_CompCurve

# Register BRepAdaptor_CompCurve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_CompCurve_swigregister(BRepAdaptor_CompCurve)

class BRepAdaptor_Curve(OCC.Core.Adaptor3d.Adaptor3d_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an undefined curve with no edge loaded.

        Returns
        -------
        None
        Creates a curve to access the geometry of edge <e>.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        None
        Creates a curve to access the geometry of edge <e>. the geometry will be computed using the parametric curve of <e> on the face <f>. an error is raised if the edge does not have a pcurve on the face.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        None

        """
        _BRepAdaptor.BRepAdaptor_Curve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Curve(*args))

    def BSpline(self, *args):
        r"""
        Warning: this will make a copy of the bspline curve since it applies to it mytsrf. be careful when using this method.

        Returns
        -------
        opencascade::handle<Geom_BSplineCurve>

        """
        return _BRepAdaptor.BRepAdaptor_Curve_BSpline(self, *args)

    def Bezier(self, *args):
        r"""
        Warning: this will make a copy of the bezier curve since it applies to it mytsrf. be careful when using this method.

        Returns
        -------
        opencascade::handle<Geom_BezierCurve>

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Bezier(self, *args)

    def Circle(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Circ

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Circle(self, *args)

    def Continuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Continuity(self, *args)

    def Curve(self, *args):
        r"""
        Returns the curve of the edge.

        Returns
        -------
        GeomAdaptor_Curve

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Curve(self, *args)

    def CurveOnSurface(self, *args):
        r"""
        Returns the curveonsurface of the edge.

        Returns
        -------
        Adaptor3d_CurveOnSurface

        """
        return _BRepAdaptor.BRepAdaptor_Curve_CurveOnSurface(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameter u.

        Parameters
        ----------
        U: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point of parameter u on the curve with its first derivative. raised if the continuity of the current interval is not c1.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D1(self, *args)

    def D2(self, *args):
        r"""
        Returns the point p of parameter u, the first and second derivatives v1 and v2. raised if the continuity of the current interval is not c2.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D2(self, *args)

    def D3(self, *args):
        r"""
        Returns the point p of parameter u, the first, the second and the third derivative. raised if the continuity of the current interval is not c3.

        Parameters
        ----------
        U: float
        P: gp_Pnt
        V1: gp_Vec
        V2: gp_Vec
        V3: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve_D3(self, *args)

    def DN(self, *args):
        r"""
        The returned vector gives the value of the derivative for the order of derivation n. raised if the continuity of the current interval is not cn. raised if n < 1.

        Parameters
        ----------
        U: float
        N: int

        Returns
        -------
        gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Curve_DN(self, *args)

    def Degree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Degree(self, *args)

    def Edge(self, *args):
        r"""
        Returns the edge.

        Returns
        -------
        TopoDS_Edge

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Edge(self, *args)

    def Ellipse(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Elips

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Ellipse(self, *args)

    def FirstParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Curve_FirstParameter(self, *args)

    def GetType(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_CurveType

        """
        return _BRepAdaptor.BRepAdaptor_Curve_GetType(self, *args)

    def Hyperbola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Hypr

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Hyperbola(self, *args)

    def Initialize(self, *args):
        r"""
        Sets the curve <self> to access the geometry of edge <e>.

        Parameters
        ----------
        E: TopoDS_Edge

        Returns
        -------
        None
        Sets the curve <self> to access the geometry of edge <e>. the geometry will be computed using the parametric curve of <e> on the face <f>. an error is raised if the edge does not have a pcurve on the face.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Initialize(self, *args)

    def Intervals(self, *args):
        r"""
        Stores in <t> the parameters bounding the intervals of continuity <s>. //! the array must provide enough room to accommodate for the parameters. i.e. t.length() > nbintervals().

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Intervals(self, *args)

    def Is3DCurve(self, *args):
        r"""
        Returns true if the edge geometry is computed from a 3d curve.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Is3DCurve(self, *args)

    def IsClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsClosed(self, *args)

    def IsCurveOnSurface(self, *args):
        r"""
        Returns true if the edge geometry is computed from a pcurve on a surface.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsCurveOnSurface(self, *args)

    def IsPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsPeriodic(self, *args)

    def IsRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Curve_IsRational(self, *args)

    def LastParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Curve_LastParameter(self, *args)

    def Line(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Lin

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Line(self, *args)

    def NbIntervals(self, *args):
        r"""
        Returns the number of intervals for continuity <s>. may be one if continuity(me) >= <s>.

        Parameters
        ----------
        S: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Curve_NbIntervals(self, *args)

    def NbKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Curve_NbKnots(self, *args)

    def NbPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Curve_NbPoles(self, *args)

    def OffsetCurve(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_OffsetCurve>

        """
        return _BRepAdaptor.BRepAdaptor_Curve_OffsetCurve(self, *args)

    def Parabola(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Parab

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Parabola(self, *args)

    def Period(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Period(self, *args)

    def Reset(self, *args):
        r"""
        Reset currently loaded curve (undone load()).

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Reset(self, *args)

    def Resolution(self, *args):
        r"""
        Returns the parametric resolution.

        Parameters
        ----------
        R3d: float

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Resolution(self, *args)

    def Tolerance(self, *args):
        r"""
        Returns the edge tolerance.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Tolerance(self, *args)

    def Trim(self, *args):
        r"""
        Returns a curve equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Trim(self, *args)

    def Trsf(self, *args):
        r"""
        Returns the coordinate system of the curve.

        Returns
        -------
        gp_Trsf

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Trsf(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameter u on the curve.

        Parameters
        ----------
        U: float

        Returns
        -------
        gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_Curve_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_Curve_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Curve

# Register BRepAdaptor_Curve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Curve_swigregister(BRepAdaptor_Curve)

class BRepAdaptor_Curve2d(OCC.Core.Geom2dAdaptor.Geom2dAdaptor_Curve):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an uninitialized curve2d.

        Returns
        -------
        None
        Creates with the pcurve of <e> on <f>.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        None

        """
        _BRepAdaptor.BRepAdaptor_Curve2d_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Curve2d(*args))

    def Edge(self, *args):
        r"""
        Returns the edge.

        Returns
        -------
        TopoDS_Edge

        """
        return _BRepAdaptor.BRepAdaptor_Curve2d_Edge(self, *args)

    def Face(self, *args):
        r"""
        Returns the face.

        Returns
        -------
        TopoDS_Face

        """
        return _BRepAdaptor.BRepAdaptor_Curve2d_Face(self, *args)

    def Initialize(self, *args):
        r"""
        Initialize with the pcurve of <e> on <f>.

        Parameters
        ----------
        E: TopoDS_Edge
        F: TopoDS_Face

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Curve2d_Initialize(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_Curve2d_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Curve2d

# Register BRepAdaptor_Curve2d in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Curve2d_swigregister(BRepAdaptor_Curve2d)

class BRepAdaptor_Surface(OCC.Core.Adaptor3d.Adaptor3d_Surface):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        r"""
        Creates an undefined surface with no face loaded.

        Returns
        -------
        None
        Creates a surface to access the geometry of <f>. if <restriction> is true the parameter range is the parameter range in the uv space of the restriction.

        Parameters
        ----------
        F: TopoDS_Face
        R: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        _BRepAdaptor.BRepAdaptor_Surface_swiginit(self, _BRepAdaptor.new_BRepAdaptor_Surface(*args))

    def AxeOfRevolution(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Ax1

        """
        return _BRepAdaptor.BRepAdaptor_Surface_AxeOfRevolution(self, *args)

    def BSpline(self, *args):
        r"""
        Warning : this will make a copy of the bspline surface since it applies to it the mytsrf transformation be careful when using this method.

        Returns
        -------
        opencascade::handle<Geom_BSplineSurface>

        """
        return _BRepAdaptor.BRepAdaptor_Surface_BSpline(self, *args)

    def BasisCurve(self, *args):
        r"""
        Only for surfaceofextrusion and surfaceofrevolution warning: this will make a copy of the underlying curve since it applies to it the transformation mytrsf. be careful when using this method.

        Returns
        -------
        opencascade::handle<Adaptor3d_Curve>

        """
        return _BRepAdaptor.BRepAdaptor_Surface_BasisCurve(self, *args)

    def BasisSurface(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _BRepAdaptor.BRepAdaptor_Surface_BasisSurface(self, *args)

    def Bezier(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        opencascade::handle<Geom_BezierSurface>

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Bezier(self, *args)

    def ChangeSurface(self, *args):
        r"""
        Returns the surface.

        Returns
        -------
        GeomAdaptor_Surface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_ChangeSurface(self, *args)

    def Cone(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Cone

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Cone(self, *args)

    def Cylinder(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Cylinder

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Cylinder(self, *args)

    def D0(self, *args):
        r"""
        Computes the point of parameters u,v on the surface.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D0(self, *args)

    def D1(self, *args):
        r"""
        Computes the point and the first derivatives on the surface. raised if the continuity of the current intervals is not c1.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D1(self, *args)

    def D2(self, *args):
        r"""
        Computes the point, the first and second derivatives on the surface. raised if the continuity of the current intervals is not c2.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D2(self, *args)

    def D3(self, *args):
        r"""
        Computes the point, the first, second and third derivatives on the surface. raised if the continuity of the current intervals is not c3.

        Parameters
        ----------
        U: float
        V: float
        P: gp_Pnt
        D1U: gp_Vec
        D1V: gp_Vec
        D2U: gp_Vec
        D2V: gp_Vec
        D2UV: gp_Vec
        D3U: gp_Vec
        D3V: gp_Vec
        D3UUV: gp_Vec
        D3UVV: gp_Vec

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Surface_D3(self, *args)

    def DN(self, *args):
        r"""
        Computes the derivative of order nu in the direction u and nv in the direction v at the point p(u, v). raised if the current u interval is not not cnu and the current v interval is not cnv. raised if nu + nv < 1 or nu < 0 or nv < 0.

        Parameters
        ----------
        U: float
        V: float
        Nu: int
        Nv: int

        Returns
        -------
        gp_Vec

        """
        return _BRepAdaptor.BRepAdaptor_Surface_DN(self, *args)

    def Direction(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Dir

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Direction(self, *args)

    def Face(self, *args):
        r"""
        Returns the face.

        Returns
        -------
        TopoDS_Face

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Face(self, *args)

    def FirstUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_FirstUParameter(self, *args)

    def FirstVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_FirstVParameter(self, *args)

    def GetType(self, *args):
        r"""
        Returns the type of the surface : plane, cylinder, cone, sphere, torus, beziersurface, bsplinesurface, surfaceofrevolution, surfaceofextrusion, othersurface.

        Returns
        -------
        GeomAbs_SurfaceType

        """
        return _BRepAdaptor.BRepAdaptor_Surface_GetType(self, *args)

    def Initialize(self, *args):
        r"""
        Sets the surface to the geometry of <f>.

        Parameters
        ----------
        F: TopoDS_Face
        Restriction: bool,optional
        	default value is Standard_True

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Initialize(self, *args)

    def IsUClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsUClosed(self, *args)

    def IsUPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsUPeriodic(self, *args)

    def IsURational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsURational(self, *args)

    def IsVClosed(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsVClosed(self, *args)

    def IsVPeriodic(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsVPeriodic(self, *args)

    def IsVRational(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        bool

        """
        return _BRepAdaptor.BRepAdaptor_Surface_IsVRational(self, *args)

    def LastUParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_LastUParameter(self, *args)

    def LastVParameter(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_LastVParameter(self, *args)

    def NbUIntervals(self, *args):
        r"""
        If necessary, breaks the surface in u intervals of continuity <s>. and returns the number of intervals.

        Parameters
        ----------
        theSh: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbUIntervals(self, *args)

    def NbUKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbUKnots(self, *args)

    def NbUPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbUPoles(self, *args)

    def NbVIntervals(self, *args):
        r"""
        If necessary, breaks the surface in v intervals of continuity <s>. and returns the number of intervals.

        Parameters
        ----------
        theSh: GeomAbs_Shape

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbVIntervals(self, *args)

    def NbVKnots(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbVKnots(self, *args)

    def NbVPoles(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_NbVPoles(self, *args)

    def OffsetValue(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_OffsetValue(self, *args)

    def Plane(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Pln

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Plane(self, *args)

    def Sphere(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Sphere

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Sphere(self, *args)

    def Surface(self, *args):
        r"""
        Returns the surface.

        Returns
        -------
        GeomAdaptor_Surface

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Surface(self, *args)

    def Tolerance(self, *args):
        r"""
        Returns the face tolerance.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Tolerance(self, *args)

    def Torus(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        gp_Torus

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Torus(self, *args)

    def Trsf(self, *args):
        r"""
        Returns the surface coordinate system.

        Returns
        -------
        gp_Trsf

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Trsf(self, *args)

    def UContinuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UContinuity(self, *args)

    def UDegree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UDegree(self, *args)

    def UIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the u direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UIntervals(self, *args)

    def UPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UPeriod(self, *args)

    def UResolution(self, *args):
        r"""
        Returns the parametric u resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        theR3d: float

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UResolution(self, *args)

    def UTrim(self, *args):
        r"""
        Returns a surface trimmed in the u direction equivalent of <self> between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _BRepAdaptor.BRepAdaptor_Surface_UTrim(self, *args)

    def VContinuity(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        GeomAbs_Shape

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VContinuity(self, *args)

    def VDegree(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        int

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VDegree(self, *args)

    def VIntervals(self, *args):
        r"""
        Returns the intervals with the requested continuity in the v direction.

        Parameters
        ----------
        T: TColStd_Array1OfReal
        S: GeomAbs_Shape

        Returns
        -------
        None

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VIntervals(self, *args)

    def VPeriod(self, *args):
        r"""
        No available documentation.

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VPeriod(self, *args)

    def VResolution(self, *args):
        r"""
        Returns the parametric v resolution corresponding to the real space resolution <r3d>.

        Parameters
        ----------
        theR3d: float

        Returns
        -------
        float

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VResolution(self, *args)

    def VTrim(self, *args):
        r"""
        Returns a surface trimmed in the v direction between parameters <first> and <last>. <tol> is used to test for 3d points confusion. if <first> >= <last>.

        Parameters
        ----------
        First: float
        Last: float
        Tol: float

        Returns
        -------
        opencascade::handle<Adaptor3d_Surface>

        """
        return _BRepAdaptor.BRepAdaptor_Surface_VTrim(self, *args)

    def Value(self, *args):
        r"""
        Computes the point of parameters u,v on the surface.

        Parameters
        ----------
        U: float
        V: float

        Returns
        -------
        gp_Pnt

        """
        return _BRepAdaptor.BRepAdaptor_Surface_Value(self, *args)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_Surface_DownCast(t)


    __repr__ = _dumps_object

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_Surface

# Register BRepAdaptor_Surface in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_Surface_swigregister(BRepAdaptor_Surface)

class BRepAdaptor_HArray1OfCurve(BRepAdaptor_Array1OfCurve, OCC.Core.Standard.Standard_Transient):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _BRepAdaptor.BRepAdaptor_HArray1OfCurve_swiginit(self, _BRepAdaptor.new_BRepAdaptor_HArray1OfCurve(*args))

    def Array1(self):
        return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_Array1(self)

    def ChangeArray1(self):
        return _BRepAdaptor.BRepAdaptor_HArray1OfCurve_ChangeArray1(self)


    @staticmethod
    def DownCast(t):
      return Handle_BRepAdaptor_HArray1OfCurve_DownCast(t)

    __swig_destroy__ = _BRepAdaptor.delete_BRepAdaptor_HArray1OfCurve

# Register BRepAdaptor_HArray1OfCurve in _BRepAdaptor:
_BRepAdaptor.BRepAdaptor_HArray1OfCurve_swigregister(BRepAdaptor_HArray1OfCurve)





